[["0",{"pageContent":"Find anything\n/\nSETTING UP\nIntroduction\nIncluding Stripe.js\nInitializing Stripe.js\nTHE ELEMENTS OBJECT\nCreate an Elements object\nUpdate an Elements object\nFetch Elements Updates\nTHE ELEMENT\nPayment Element\nLink Authentication Element\nAddress Element\nIssuing Elements\nOther Elements\nMount an Element\nElement methods\nListen to Element events\nInput validation\nPostal code formatting\nPAYMENT INTENTS\nConfirm a PaymentIntent\nConfirm a PaymentIntent by payment method\nRetrieve a PaymentIntent\nVerify with micro-deposits for payment\nCreate a Radar Session\nHandle a card action\nCollect bank account details for payment\nSETUP INTENTS\nConfirm a SetupIntent\nConfirm a SetupIntent by payment method\nRetrieve a SetupIntent\nVerify with micro-deposits for setup\nCollect bank account details for setup\nTHE PAYMENT REQUEST OBJECT\nCreate a PaymentRequest object\nCheck if a payment can be made\nShow the payment request interface\nUpdate a PaymentRequest object\nListen to PaymentRequest events\nPAYMENT METHODS\nCreate a PaymentMethod\nTOKENS AND SOURCES","metadata":{"source":"StripeAPI.md"}}],["1",{"pageContent":"Check if a payment can be made\nShow the payment request interface\nUpdate a PaymentRequest object\nListen to PaymentRequest events\nPAYMENT METHODS\nCreate a PaymentMethod\nTOKENS AND SOURCES\nCreate a Token\nCreate a Source\nCreate a Source from data\nRetrieve a Source\nIDENTITY\nShow verification modal\nISSUING\nCreate an ephemeral key nonce\nRetrieve an Issuing card\nFINANCIAL CONNECTIONS\nIntroduction\nCollect Financial Connections Accounts\nUse Financial Connections to collect a bank account Token for payouts\nAPPENDIX\nCssFontSource object\nCustomFontSource object\nContact object\nPaymentItem object\nPaymentResponse object\nShippingOption object\nShippingAddress object\nStyle object\nUpdateDetails object\nSupported browsers\nSupported locales\nCookies\nViewport meta tag requirements\nDEPRECATED\nRedirect to Checkout\nHandle a card payment with an Element\nHandle a card payment\nConfirm a PaymentIntent with an Element\nConfirm a PaymentIntent\nHandle card setup with an Element\nHandle card setup\nConfirm a SetupIntent with an Element\nConfirm a SetupIntent","metadata":{"source":"StripeAPI.md"}}],["2",{"pageContent":"Handle a card payment\nConfirm a PaymentIntent with an Element\nConfirm a PaymentIntent\nHandle card setup with an Element\nHandle card setup\nConfirm a SetupIntent with an Element\nConfirm a SetupIntent\nHandle an FPX payment\nSign In →\nStripe.js\nDocs\nSupport\nSign in →\nStripe.js reference\nThis reference documents every object and method available in Stripe’s browser-side JavaScript library, Stripe.js. Use our React Stripe.js reference if you want to add Elements to your React based app.","metadata":{"source":"StripeAPI.md"}}],["3",{"pageContent":"You can use Stripe.js’ APIs to tokenize customer information, collect sensitive payment details using customizable Stripe Elements, and accept payments with browser payment APIs like Apple Pay and the Payment Request API.\n\nLOOKING FOR A STEP-BY-STEP GUIDE?\nLearn to accept a payment or use the Payment Request Button.\n\nNEED TO UPGRADE?\nIf you are currently using Stripe.js v2 to collect card information, check out our migration guide to learn how to switch.\n\nNOT A DEVELOPER?\nUse Stripe’s no-code options or apps from our partners to get started with Stripe and to do more with your Stripe account—no code required.\n\nIncluding Stripe.js\nInclude the Stripe.js script on each page of your site—it should always be loaded directly from https://js.stripe.com, rather than included in a bundle or hosted yourself.","metadata":{"source":"StripeAPI.md"}}],["4",{"pageContent":"Including Stripe.js\nInclude the Stripe.js script on each page of your site—it should always be loaded directly from https://js.stripe.com, rather than included in a bundle or hosted yourself.\n\nTo best leverage Stripe’s advanced fraud functionality, include this script on every page, not just the checkout page. This allows Stripe to detect suspicious behavior that may be indicative of fraud as customers browse your website.\n\nUsing Stripe.js as a module\n\nWe also provide an npm package that makes it easier to load and use Stripe.js as a module. For more information, check out the project on GitHub.\n\nAsynchronous and deferred loading of Stripe.js\n\nAsynchronous loading of JavaScript is generally recommended, as it can improve the user experience of your site by not blocking DOM rendering during script loading. The easiest way to asynchronously load Stripe.js is to use the npm module as described above. It does asynchronous loading by default.","metadata":{"source":"StripeAPI.md"}}],["5",{"pageContent":"You can also load Stripe.js using the async or defer attribute on the script tag. Note, however, that with asynchronous loading any API calls will have to be made only after the script execution has finished.\n\nWas this section helpful?YesNo\n\n\n<script src=\"https://js.stripe.com/v3/\"></script>\nStripe(publishableKey,options?)\nUse Stripe(publishableKey, options?) to create an instance of the Stripe object. The Stripe object is your entrypoint to the rest of the Stripe.js SDK.\n\nYour Stripe publishable API key is required when calling this function, as it identifies your website to Stripe.\n\nWe've prefilled the example with a sample test API key. Don’t submit any personally identifiable information in requests made with this key. To create a Stripe object using your account, replace the sample API key with your actual API key or sign in.\n\nWhen you’re ready to accept live payments, replace the test key with your live key in production. Learn more about how API keys work in test mode and live mode.","metadata":{"source":"StripeAPI.md"}}],["6",{"pageContent":"When you’re ready to accept live payments, replace the test key with your live key in production. Learn more about how API keys work in test mode and live mode.\n\nMethod parameters\npublishableKey\nREQUIRED\nstring\nYour publishable key.\n\noptions\noptional\nobject\nInitialization options.\n\nShow options properties\nWas this section helpful?YesNo\n\n\nJavaScript\n\nvar stripe = Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\nThe Elements object\nStripe Elements are customizable UI components used to collect sensitive information in your payment forms.\n\nUse an Elements instance to create and manage a group of individual Element instances.\n\nstripe.elements(options?)\nThis method creates an Elements instance, which manages a group of elements.\n\nMethod parameters\noptions\noptional\nobject\nA set of options to create this Elements instance with.\n\nHide options properties\nfonts\narray\nAn array of custom fonts, which elements created from the Elements object can use. Fonts can be specified as CssFontSource or CustomFontSource objects.","metadata":{"source":"StripeAPI.md"}}],["7",{"pageContent":"Hide options properties\nfonts\narray\nAn array of custom fonts, which elements created from the Elements object can use. Fonts can be specified as CssFontSource or CustomFontSource objects.\n\nlocale\nstring\nA locale to display placeholders and error strings in. Default is auto (Stripe detects the locale of the browser).\n\nSetting the locale does not affect the behavior of postal code validation—a valid postal code for the billing country of the card is still required.\n\nclientSecret\nREQUIRED\nstring\nRequired to use with the Payment Element and the Link Authentication Element.\n\nThe client secret for a PaymentIntent or SetupIntent.\n\nappearance\nobject\nSupported for the Payment Element, the Link Authentication Element, and the Address Element.\n\nMatch the design of your site with the appearance option. The layout of each Element stays consistent, but you can modify colors, fonts, borders, padding, and more.","metadata":{"source":"StripeAPI.md"}}],["8",{"pageContent":"Match the design of your site with the appearance option. The layout of each Element stays consistent, but you can modify colors, fonts, borders, padding, and more.\n\nloader\n'auto' | 'always' | 'never'\nSupported for the Payment Element, the Link Authentication Element, and the Address Element.\n\nDisplay skeleton loader UI while waiting for Elements to be fully loaded, after they are mounted. Default is 'auto' (Stripe determines if a loader UI should be shown).\n\nWas this section helpful?YesNo\n\n\nJavaScript\n\nvar elements = stripe.elements({\n  clientSecret: 'CLIENT_SECRET',\n});\nelements.update(options)\nThis method updates options on an existing instance of Elements. Note that not all options (e.g. fonts) are updatable.\n\nMethod parameters\noptions\nREQUIRED\nobject\nA set of options to update this Elements instance with.\n\nHide options properties\nlocale\nstring\nA locale to display placeholders and error strings in. Default is auto (Stripe detects the locale of the browser).","metadata":{"source":"StripeAPI.md"}}],["9",{"pageContent":"Hide options properties\nlocale\nstring\nA locale to display placeholders and error strings in. Default is auto (Stripe detects the locale of the browser).\n\nSetting the locale does not affect the behavior of postal code validation—a valid postal code for the billing country of the card is still required.\n\nappearance\nobject\nUsed with the Payment Element.\n\nMatch the design of your site with the appearance option. The layout of each Element stays consistent, but you can modify colors, fonts, borders, padding, and more.\n\nWas this section helpful?YesNo\n\n\nJavaScript\n\nelements.update({locale: 'fr'});\nThe Element\nUse Element instances to collect sensitive information in your checkout flow.\n\nThe Payment Element\nThe Payment Element is an embeddable component for securely collecting payment details. The Payment Element supports dozens of payment methods with a single integration.\n\nelements.create('payment',options?)\nThis method creates an instance of the Payment Element.","metadata":{"source":"StripeAPI.md"}}],["10",{"pageContent":"elements.create('payment',options?)\nThis method creates an instance of the Payment Element.\n\nMethod parameters\ntype\nREQUIRED\n'payment'\nThe type of Element being created, which is payment in this case.\n\noptions\noptional\nobject\nOptions for creating the Payment Element.\n\nHide options properties\nlayout\n'accordion' | 'tabs' | object\nSpecify the layout for the Payment Element. If you only pass a layout type ('accordion' or ‘tabs’) without any additional parameters, the Payment Element renders using that layout and the default values associated with it.\n\nAn object can also be passed to specify the layout with additional configuration.\n\nShow layout properties\ndefaultValues\nobject\nProvide initial customer information that will be displayed in the Payment Element. The form will render with empty fields if not provided.","metadata":{"source":"StripeAPI.md"}}],["11",{"pageContent":"Show layout properties\ndefaultValues\nobject\nProvide initial customer information that will be displayed in the Payment Element. The form will render with empty fields if not provided.\n\nShow defaultValues properties\nbusiness\nobject\nProvide information about your business that will be displayed in the Payment Element. This information will be retrieved from your Stripe account if not provided.\n\nHide business properties\nname\nstring\nThe name of your business. Your business name will be used to render mandate text for some payment methods.\n\npaymentMethodOrder\narray\nBy default, the Payment Element will use a dynamic ordering that optimizes payment method display for each user.\n\nYou can override the default order in which payment methods are displayed in the Payment Element with a list of payment method types.","metadata":{"source":"StripeAPI.md"}}],["12",{"pageContent":"You can override the default order in which payment methods are displayed in the Payment Element with a list of payment method types.\n\nIf the associated PaymentIntent has payment method types not specified in paymentMethodOrder, they will be displayed after the payment methods you specify. If you specify payment method types not on the associated PaymentIntent, they will be ignored.\n\nfields\nobject\nBy default, the Payment Element will collect all necessary details to complete a payment.\n\nFor some payment methods, this means that the Payment Element will collect details like name or email that you may have already collected from the user. If this is the case, you can prevent the Payment Element from collecting these data by using the fields option.\n\nIf you disable the collection of a certain field with the fields option, you must pass that same data to stripe.confirmPayment or the payment will be rejected.\n\nSee below for details.","metadata":{"source":"StripeAPI.md"}}],["13",{"pageContent":"If you disable the collection of a certain field with the fields option, you must pass that same data to stripe.confirmPayment or the payment will be rejected.\n\nSee below for details.\n\nShow fields properties\nreadOnly\nboolean\nApplies a read-only state to the Payment Element so that payment details can’t be changed. Default is false.\n\nEnabling the readOnly option doesn't change the Payment Element's visual appearance. If you want to adjust the way the Payment Element looks, use the Appearance API.\n\nterms\nobject\nControl how mandates or other legal agreements are displayed in the Payment Element. Use never to never display legal agreements. The default setting is auto, which causes legal agreements to only be shown when necessary.\n\nShow terms properties\nwallets\nobject\nBy default, the Payment Element will display all the payment methods that the underlying Payment Intent was created with.","metadata":{"source":"StripeAPI.md"}}],["14",{"pageContent":"Show terms properties\nwallets\nobject\nBy default, the Payment Element will display all the payment methods that the underlying Payment Intent was created with.\n\nHowever, wallets like Apple Pay and Google Pay are not payment methods per the Payment Intent API. They will show when the Payment Intent has the card payment method and the customer is using a supported platform and have an active card in their account. This is the auto behavior, and it is the default for choice for all wallets.\n\nIf you do not want to show a given wallet as a payment option, you can set its property in wallets to never.\n\nShow wallets properties\n\nJavaScript\n\nvar paymentElement = elements.create('payment');\nCreate the Payment Elementwith customized fields\nOption parameter\nfields\nobject\nPass an object to specify payment fields you don't want to collect with the Payment Element.","metadata":{"source":"StripeAPI.md"}}],["15",{"pageContent":"Hide fields properties\nbillingDetails\n'never' | 'auto' | object\nSpecify never to avoid collecting all billing details in the Payment Element. If you would like to disable only certain billing details, pass an object specifying which fields you would like to disable collection for. The default setting for each field or object is auto.\n\nHide billingDetails properties\nname\n'never' | 'auto'\nemail\n'never' | 'auto'\nphone\n'never' | 'auto'\naddress\n'never' | 'auto' | object\nShow address properties\n\nJavaScript\n\n// Customize which fields are collected by the Payment Element\nvar paymentElement = elements.create('payment', {\n  fields: {\n    billingDetails: {\n      name: 'never',\n      email: 'never',\n    }\n  }\n});","metadata":{"source":"StripeAPI.md"}}],["16",{"pageContent":"// If you disable collecting fields in the Payment Element, you\n// must pass equivalent data when calling `stripe.confirmPayment`.\nform.addEventListener('submit', async (event) => {\n  stripe.confirmPayment({\n    elements,\n    confirmParams: {\n      return_url: 'https://example.com',\n      payment_method_data: {\n        billing_details: {\n          name: 'Jenny Rosen',\n          email: 'jenny.rosen@example.com',\n        }\n      },\n    },\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n});\nelements.getElement('payment')\nThis method retrieves a previously created Payment Element.\n\nMethod parameters\ntype\nREQUIRED\n'payment'\nThe type of Element being retrieved, which is payment in this case.\n\nReturns\nelements.getElement('payment') returns one of the following:\n\nAn instance of a Payment Element.\nnull, when no Payment Element has been created.\nWas this section helpful?YesNo\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["17",{"pageContent":"Returns\nelements.getElement('payment') returns one of the following:\n\nAn instance of a Payment Element.\nnull, when no Payment Element has been created.\nWas this section helpful?YesNo\n\n\nJavaScript\n\nvar paymentElement = elements.getElement('payment');\nelement.update(options)\nUpdates the options the Payment Element was initialized with. Updates are merged into the existing configuration.\n\nNOTE: Don't use element.update() to fetch updates from a PaymentIntent or SetupIntent. Use elements.fetchUpdates() instead.\n\nMethod parameters\noptions\noptional\nobject\nOptions for updating the Payment Element.\n\nHide options properties\ndefaultValues\nobject\nProvide initial customer information that will be displayed in the Payment Element. The form will render with empty fields if not provided.\n\nShow defaultValues properties\nbusiness\nobject\nProvide information about your business that will be displayed in the Payment Element. This information will be retrieved from your Stripe account if not provided.","metadata":{"source":"StripeAPI.md"}}],["18",{"pageContent":"Hide business properties\nname\nstring\nThe name of your business. Your business name will be used to render mandate text for some payment methods.\n\npaymentMethodOrder\narray\nBy default, the Payment Element will use a dynamic ordering that optimizes payment method display for each user.\n\nYou can override the default order in which payment methods are displayed in the Payment Element with a list of payment method types.\n\nIf the associated PaymentIntent has payment method types not specified in paymentMethodOrder, they will be displayed after the payment methods you specify. If you specify payment method types not on the associated PaymentIntent, they will be ignored.\n\nfields\nobject\nBy default, the Payment Element will collect all necessary details to complete a payment.","metadata":{"source":"StripeAPI.md"}}],["19",{"pageContent":"fields\nobject\nBy default, the Payment Element will collect all necessary details to complete a payment.\n\nFor some payment methods, this means that the Payment Element will collect details like name or email that you may have already collected from the user. If this is the case, you can prevent the Payment Element from collecting these data by using the fields option.\n\nIf you disable the collection of a certain field with the fields option, you must pass that same data to stripe.confirmPayment or the payment will be rejected.\n\nSee below for details.\n\nShow fields properties\nreadOnly\nboolean\nApplies a read-only state to the Payment Element so that payment details can’t be changed. Default is false.\n\nEnabling the readOnly option doesn't change the Payment Element's visual appearance. If you want to adjust the way the Payment Element looks, use the Appearance API.","metadata":{"source":"StripeAPI.md"}}],["20",{"pageContent":"Enabling the readOnly option doesn't change the Payment Element's visual appearance. If you want to adjust the way the Payment Element looks, use the Appearance API.\n\nterms\nobject\nControl how mandates or other legal agreements are displayed in the Payment Element. Use never to never display legal agreements. The default setting is auto, which causes legal agreements to only be shown when necessary.\n\nShow terms properties\nWas this section helpful?YesNo\n\n\nJavaScript\n\n// Update a Payment Element after creation\nvar paymentElement = elements.getElement('payment');\npaymentElement.update({business: {name: 'Stripe Shop'}});\nelements.fetchUpdates()\nUsed with the Payment Element.\n\nThis method fetches updates from the associated PaymentIntent or SetupIntent on an existing instance of Elements, and reflects these updates in the Payment Element.","metadata":{"source":"StripeAPI.md"}}],["21",{"pageContent":"This method fetches updates from the associated PaymentIntent or SetupIntent on an existing instance of Elements, and reflects these updates in the Payment Element.\n\nReturns\nThis method returns a Promise which resolves with a result object. If this method succeeds, the result object will be empty. If this method fails, the result object will contain a localized error message in the error.message field. If the associated PaymentIntent or SetupIntent is in an unexpected status, the result object will also contain the intent's status in the error.status field.\n\nWas this section helpful?YesNo\n\n\nJavaScript\n\nelements.fetchUpdates()\n  .then(function(result) {\n    // Handle result.error\n  });\nelement.collapse()\nThis method collapses the Payment Element into a row of payment method tabs.\n\nWas this section helpful?YesNo\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["22",{"pageContent":"Was this section helpful?YesNo\n\n\nJavaScript\n\n// Collapse a Payment Element\nvar paymentElement = elements.getElement('payment');\npaymentElement.collapse();\nThe Link Authentication Element\nThe Link Authentication Element is an embeddable component for collecting email addresses and allow users to log into Link on your checkout page.\n\nelements.create('linkAuthentication',options?)\nThis method creates an instance of the Link Authentication Element.\n\nMethod parameters\ntype\nREQUIRED\n'linkAuthentication'\nThe type of Element being created, which is linkAuthentication in this case.\n\noptions\noptional\nobject\nOptions for creating the Link Authentication Element.\n\nHide options properties\ndefaultValues\nobject\nProvide the initial contact information that will be displayed in the Link Authentication Element. The form will render with empty fields if not provided.\n\nShow defaultValues properties\nWas this section helpful?YesNo\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["23",{"pageContent":"Show defaultValues properties\nWas this section helpful?YesNo\n\n\nJavaScript\n\nvar linkAuthenticationElement = elements.create('linkAuthentication');\nelements.getElement('linkAuthentication')\nThis method retrieves a previously created Link Authentication Element.\n\nMethod parameters\ntype\nREQUIRED\n'linkAuthentication'\nThe type of Element being retrieved, which is linkAuthentication in this case.\n\nReturns\nelements.getElement('linkAuthentication') returns one of the following:\n\nAn instance of a Link Authentication Element.\nnull, when no Link Authentication Element has been created.\nWas this section helpful?YesNo\n\n\nJavaScript\n\nvar linkAuthenticationElement = elements.getElement('linkAuthentication');\nThe Address Element\nThe Address Element is an embeddable component for collecting local and international billing and shipping addresses.\n\nelements.create('address',options)\nThis method creates an instance of the Address Element.","metadata":{"source":"StripeAPI.md"}}],["24",{"pageContent":"elements.create('address',options)\nThis method creates an instance of the Address Element.\n\nMethod parameters\ntype\nREQUIRED\n'address'\nThe type of Element being created, which is address in this case.\n\noptions\nREQUIRED\nobject\nOptions for creating the Address Element.\n\nHide options properties\nmode\nREQUIRED\n'shipping' | 'billing'\nSpecify which mode you would like to use Address Element for.\n\nWhen shipping mode is used with the Payment Element and Link Authentication Element, it will automatically pass shipping information when confirming Payment Intent or Setup Intent.\n\nWhen billing mode is used with the Payment Element, it will automatically pass the billing information when confirming Payment Intent or Setup Intent.\n\nautocomplete\nobject\nBy default, the Address Element will have autocomplete enabled with Stripe provided Google Maps API key for certain countries if any of the following condition is met:","metadata":{"source":"StripeAPI.md"}}],["25",{"pageContent":"autocomplete\nobject\nBy default, the Address Element will have autocomplete enabled with Stripe provided Google Maps API key for certain countries if any of the following condition is met:\n\nIf Payment Element is mounted in the same elements group as Address Element in a single page application.\nIf the Address Element is used in an active Link session.\nYou can customize the autocomplete setting with this option.\n\nHide autocomplete properties\nmode\nREQUIRED\n‘automatic’ | ‘disabled’ | ‘google_maps_api’\nSpecify disabled to disable autocomplete in the Address Element.\n\nSpecify google_maps_api to enable Google Maps API with your own key. It will only be used when Stripe provided Google Maps API key is not available.\n\nThe default setting is automatic, where we’ll support autocomplete when possible.\n\napiKey\nstring\nSpecify your own Google Maps API key with it.\n\nOnly needs to be passed in when autocomplete.mode is set to google_maps_api.","metadata":{"source":"StripeAPI.md"}}],["26",{"pageContent":"apiKey\nstring\nSpecify your own Google Maps API key with it.\n\nOnly needs to be passed in when autocomplete.mode is set to google_maps_api.\n\nallowedCountries\narray\nBy default, the Address Element will display all countries for selection.\n\nYou can specify which countries are displayed in the Address Element with a list of two-letter country codes. If only one country is specified, the country field will not display.\n\nblockPoBox\nboolean\nBy default, PO boxes are considered a valid address type.\n\nYou can override this to invalidate PO Boxes.\n\ncontacts\narray\nAn array of Contact that can be displayed as saved addresses in the Address Element. The first contact will be automatically selected.\n\ndefaultValues\nobject\nProvide the initial information that will be displayed in the Address Element. The form will render with empty fields if not provided.\n\nHide defaultValues properties\nname\nstring\nProvide the initial full name or organization name.","metadata":{"source":"StripeAPI.md"}}],["27",{"pageContent":"Hide defaultValues properties\nname\nstring\nProvide the initial full name or organization name.\n\nfirstName\nstring\nProvide the initial first name. The display.name option must be set to split if this property is specified.\n\nlastName\nstring\nProvide the initial last name. The display.name option must be set to split if this property is specified.\n\nphone\nstring\nProvide the initial phone number value. The fields.phone option must be set to always if this property is specified.\n\naddress\nobject\nProvide the initial address details.\n\nShow address properties\nfields\nobject\nBy default, the Address Element will collect all the necessary information needed for an address. In some cases, it might be necessary to collect other types of information. You can specify other types of fields to render in the form with this option.","metadata":{"source":"StripeAPI.md"}}],["28",{"pageContent":"Hide fields properties\nphone\n'always' | 'auto' | 'never'\nSpecify always to enable phone number collection in the Address Element. Only collect phone numbers if you need them for the transaction. Default is auto.\n\nvalidation\nobject\nBy default, the Address Element will enforce preset validation for each field. You can customize the settings by using this option.\n\nHide validation properties\nphone\nobject\nHide phone properties\nrequired\n'always' | 'auto' | 'never'\nSpecify always to make phone number a required field. The fields.phone option must be set to always if this property is specified. Default is auto.\n\ndisplay\nobject\nYou can customize how certain fields are displayed.\n\nHide display properties\nname\n'full' | 'split' | 'organization'\nBy default, the Address Element will display a full name field. Specify 'split' to display a first name field and a last name field. Specify 'organization' to display an organization field.\n\nWas this section helpful?YesNo\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["29",{"pageContent":"Was this section helpful?YesNo\n\n\nJavaScript\n\n// Create the Address Element in shipping mode\nvar addressElement = elements.create('address', {\n  mode: 'shipping',\n});\n\n// Create the Address Element in billing mode\nvar addressElement = elements.create('address', {\n  mode: 'billing',\n});\nelements.getElement('address')\nThis method retrieves a previously created Address Element.\n\nMethod parameters\ntype\nREQUIRED\n'address'\nThe type of Element being retrieved, which is address in this case.\n\nReturns\nelements.getElement('address') returns one of the following:\n\nAn instance of an Address Element.\nnull, when no Address Element has been created.\nWas this section helpful?YesNo\n\n\nJavaScript\n\nvar addressElement = elements.getElement('address');\nelement.update(options)\nUpdates the options the Address Element was initialized with. Updates are merged into the existing configuration.\n\nMethod parameters\noptions\noptional\nobject\nOptions for updating the Address Element.","metadata":{"source":"StripeAPI.md"}}],["30",{"pageContent":"Method parameters\noptions\noptional\nobject\nOptions for updating the Address Element.\n\nHide options properties\nfields\nobject\nBy default, the Address Element will collect all the necessary information needed for an address. In some cases, it might be necessary to collect other types of information. You can specify other types of fields to render in the form with this option.\n\nHide fields properties\nphone\n'always' | 'auto' | 'never'\nSpecify always to enable phone number collection in the Address Element. Only collect phone numbers if you need them for the transaction. Default is auto.\n\nvalidation\nobject\nBy default, the Address Element will enforce preset validation for each field. You can customize the settings by using this option.\n\nHide validation properties\nphone\nobject\nHide phone properties\nrequired\n'always' | 'auto' | 'never'\nSpecify always to make phone number a required field. The fields.phone option must be set to always if this property is specified. Default is auto.","metadata":{"source":"StripeAPI.md"}}],["31",{"pageContent":"Was this section helpful?YesNo\n\n\nJavaScript\n\nvar addressElement = elements.getElement('address');\n\naddressElement.update({\n  validation: {\n    phone: {\n      required: 'never',\n    },\n  },\n});\nelement.getValue()\nValidates and retrieves form values from an Address Element. If there are any input validation errors, the errors will display by their respective fields.\n\nReturns\naddressElement.getValue() returns a promise. This promise will return an object with the following:","metadata":{"source":"StripeAPI.md"}}],["32",{"pageContent":"Returns\naddressElement.getValue() returns a promise. This promise will return an object with the following:\n\ncomplete, true if the value is well-formed and potentially complete. The complete value can be used to progressively disclose the next parts of your form or to enable form submission. It is not an indicator of whether a customer is done with their input—it only indicates that the Element contains a potentially complete, well-formed value. In many cases the customer could still add further input.\nisNewAddress, true if the address is a new address.\nvalue, an object containing the current address information. The firstName and lastName properties only appear if the display.name option is set to split. The phone property only appears if the fields.phone option is set to always.\nWas this section helpful?YesNo\n\n\nJavaScript\n\nvar addressElement = elements.getElement('address');","metadata":{"source":"StripeAPI.md"}}],["33",{"pageContent":"JavaScript\n\nvar addressElement = elements.getElement('address');\n\naddressElement.getValue()\n.then(function(result) {\n  if (result.complete) {\n    // Allow user to proceed to the next step\n    // Optionally, use value to store the address details\n  }\n})\n{\n  complete: false,\n  isNewAddress: true,\n  value: {\n    name: \"\",\n    firstName?: \"\",\n    lastName? \"\",\n    phone?: \"\",\n    address: {\n      line1: \"\",\n      line2: null,\n      city: \"\",\n      state: \"\",\n      country: 'US',\n      postal_code: \"\"\n    }\n  }\n}\nIssuing Elements\nIssuing Elements allows you to display the sensitive data of your Issuing cards in a PCI-compliant manner.\n\nelements.create('issuingCardNumberDisplay',options)\nThis method creates an instance of an individual Issuing Element.\n\nIt takes the type of Element to create as well as an options object.","metadata":{"source":"StripeAPI.md"}}],["34",{"pageContent":"elements.create('issuingCardNumberDisplay',options)\nThis method creates an instance of an individual Issuing Element.\n\nIt takes the type of Element to create as well as an options object.\n\nMethod parameters\ntype\nREQUIRED\nstring\nThe type of Element being created. One of: issuingCardNumberDisplay, issuingCardCvcDisplay, issuingCardExpiryDisplay, issuingCardPinDisplay, or issuingCardCopyButton.\n\noptions\nREQUIRED\nobject\nOptions for creating an Issuing element.\n\nHide options properties\nissuingCard\nstring\nID of the Issuing card to be displayed in this Element.\n\nephemeralKeySecret\nstring\nThe secret component of the ephemeral key created to display this Element.\n\nnonce\nstring\nThe ephemeral key nonce used to create the ephemeral key provided to this Element.\n\nstyle\nobject\nCustomize the appearance of this Element using CSS properties passed in a Style object.\n\nWas this section helpful?YesNo\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["35",{"pageContent":"style\nobject\nCustomize the appearance of this Element using CSS properties passed in a Style object.\n\nWas this section helpful?YesNo\n\n\nJavaScript\n\nvar element = elements.create('issuingCardNumberDisplay', {\n  issuingCard: 'ic_1ITi6XKYfU8ZP6raDAXem8ql',\n  nonce: 'ephkn_priv_v9QGxPyA1F1VHjB4dpLhHfw4',\n  ephemeralKeySecret: 'ek_live_YWNjdF8xSmtzQWtQbUd...',\n});\nOther Elements\nStripe also offers a set of Elements for individual payment methods that you can use in your payment flows.\n\nelements.create('card',options?)\nThis method creates an instance of an individual Element.\n\nIt takes the type of Element to create as well as an options object.\n\nMethod parameters\ntype\nREQUIRED\n'card'\nThe type of element you are creating. In this case, card.\n\noptions\noptional\nobject\nOptions for creating a card element.\n\nHide options properties\nclasses\nobject\nSet custom class names on the container DOM element when the Stripe element is in a particular state.","metadata":{"source":"StripeAPI.md"}}],["36",{"pageContent":"options\noptional\nobject\nOptions for creating a card element.\n\nHide options properties\nclasses\nobject\nSet custom class names on the container DOM element when the Stripe element is in a particular state.\n\nShow classes properties\nstyle\nobject\nCustomize the appearance of this element using CSS properties passed in a Style object.\n\nvalue\nstring\nA pre-filled set of values to include in the input (e.g., {postalCode: '94110'}). Note that sensitive card information (card number, CVC, and expiration date) cannot be pre-filled\n\nhidePostalCode\nboolean\nHide the postal code field. Default is false. If you are already collecting a full billing address or postal code elsewhere, set this to true.\n\niconStyle\nstring\nAppearance of the icon in the Element. Either solid or default.\n\nhideIcon\nboolean\nHides the icon in the Element. Default is false.\n\ndisabled\nboolean\nApplies a disabled state to the Element such that user input is not accepted. Default is false.\n\nWas this section helpful?YesNo\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["37",{"pageContent":"disabled\nboolean\nApplies a disabled state to the Element such that user input is not accepted. Default is false.\n\nWas this section helpful?YesNo\n\n\nJavaScript\n\nvar cardElement = elements.create('card');\nelements.getElement(type)\nThis method looks up a previously created Element by its type.\n\nMethod parameters\ntype\nREQUIRED\nstring\nThe type of Element to lookup.\n\nReturns\nelements.getElement returns one of the following:\n\nAn instance of an Element with a matching type.\nnull, when no Element with a matching type has been created.\nWas this section helpful?YesNo\n\n\nJavaScript\n\nvar cardElement = elements.getElement('card');\ncard.update(options)\nUpdates the options the Element was initialized with. Updates are merged into the existing configuration.\n\nIf you collect certain information in a different part of your interface (e.g., ZIP or postal code), use element.update with the appropriate information.","metadata":{"source":"StripeAPI.md"}}],["38",{"pageContent":"If you collect certain information in a different part of your interface (e.g., ZIP or postal code), use element.update with the appropriate information.\n\nThe styles of an Element can be dynamically changed using element.update. This method can be used to simulate CSS media queries that automatically adjust the size of elements when viewed on different devices.\n\nMethod parameters\noptions\noptional\nobject\nOptions for updating a card element.\n\nHide options properties\nclasses\nobject\nSet custom class names on the container DOM element when the Stripe element is in a particular state.\n\nShow classes properties\nstyle\nobject\nCustomize the appearance of this element using CSS properties passed in a Style object.\n\nvalue\nstring\nA pre-filled set of values to include in the input (e.g., {postalCode: '94110'}). Note that sensitive card information (card number, CVC, and expiration date) cannot be pre-filled","metadata":{"source":"StripeAPI.md"}}],["39",{"pageContent":"value\nstring\nA pre-filled set of values to include in the input (e.g., {postalCode: '94110'}). Note that sensitive card information (card number, CVC, and expiration date) cannot be pre-filled\n\nhidePostalCode\nboolean\nHide the postal code field. Default is false. If you are already collecting a full billing address or postal code elsewhere, set this to true.\n\niconStyle\nstring\nAppearance of the icon in the Element. Either solid or default.\n\nhideIcon\nboolean\nHides the icon in the Element. Default is false.\n\ndisabled\nboolean\nApplies a disabled state to the Element such that user input is not accepted. Default is false.\n\nWas this section helpful?YesNo\n\n\nJavaScript\n\n// Update an element with details collected elsewhere on your page\nvar myPostalCodeField = document.querySelector('input[name=\"my-postal-code\"]');\nmyPostalCodeField.addEventListener('change', function(event) {\n  cardElement.update({value: {postalCode: event.target.value}});\n});","metadata":{"source":"StripeAPI.md"}}],["40",{"pageContent":"// Dynamically change the styles of an element\nwindow.addEventListener('resize', function(event) {\n  if (window.innerWidth <= 320) {\n    cardElement.update({style: {base: {fontSize: '13px'}}});\n  } else {\n    cardElement.update({style: {base: {fontSize: '16px'}}});\n  }\n});\nStyle the Element container\nStyle the container you mount an Element to as if it were an <input> on your page. For example, to control padding and border on an Element, set these properties on the container. This is usually done by re-using the classes that you have applied to your DOM <input> elements. After the Element is mounted, the .StripeElement class is added to the container. Additionally, the following classes are automatically added to the container when the Element is complete, empty, focused, invalid, or autofilled by the browser:","metadata":{"source":"StripeAPI.md"}}],["41",{"pageContent":".StripeElement--complete\n.StripeElement--empty\n.StripeElement--focus\n.StripeElement--invalid\n.StripeElement--webkit-autofill (Chrome and Safari only)\nThese class names can be customized using the classes option when you create an Element.\n\nWas this section helpful?YesNo\n\n\n<style>\n  .my-input {\n    padding: 10px;\n    border: 1px solid #ccc;\n  }\n</style>\n\n<form>\n  <div>\n    <label>Name</label>\n    <input class=\"my-input\">\n  </div>\n  <div>\n    <label>Card</label>\n    <!-- Using the same \"my-input\" class on the -->\n    <!-- regular input above and on this container. -->\n    <div class=\"my-input\" id=\"card-element\"></div>\n  </div>\n</form>\nelement.mount(domElement)\nThe element.mount method attaches your Element to the DOM. element.mount accepts either a CSS Selector (e.g., '#card-element') or a DOM element.","metadata":{"source":"StripeAPI.md"}}],["42",{"pageContent":"You need to create a container DOM element to mount an Element. If the container DOM element has a label, the Element is automatically focused when its label is clicked. There are two ways to do this:\n\nMount the instance within a <label>.\nCreate a <label> with a for attribute, referencing the ID of your container.\nMethod parameters\ndomElement\nREQUIRED\nstring | DOM element\nThe CSS selector or DOM element where your Element will be mounted.\n\nWas this section helpful?YesNo\n\n\n<!-- Mount the instance within a <label> -->\n<label>Card\n  <div id=\"card-element\"></div>\n</label>\n\n<!--\n  Or create a <label> with a 'for' attribute,\n  referencing the ID of your container.\n-->\n<label for=\"card-element\">Card</label>\n<div id=\"card-element\"></div>\n\n<script>\n  cardElement.mount('#card-element');\n</script>\nElement methods\nBelow are a number of methods that are in common between all Element UIs.\n\nelement.blur()\nBlurs the Element.\n\nWas this section helpful?YesNo\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["43",{"pageContent":"element.blur()\nBlurs the Element.\n\nWas this section helpful?YesNo\n\n\nJavaScript\n\ncardElement.blur();\nelement.clear()\nClears the value(s) of the Element.\n\nWas this section helpful?YesNo\n\n\nJavaScript\n\ncardElement.clear();\nelement.destroy()\nRemoves the Element from the DOM and destroys it. A destroyed Element can not be re-activated or re-mounted to the DOM.\n\nWas this section helpful?YesNo\n\n\nJavaScript\n\ncardElement.destroy();\nelement.focus()\nFocuses the Element.\n\nThis method will currently not work on iOS 13+ due to a system limitation.\n\nWas this section helpful?YesNo\n\n\nJavaScript\n\ncardElement.focus();\nelement.unmount()\nUnmounts the Element from the DOM. Call element.mount to re-attach it to the DOM.\n\nWas this section helpful?YesNo\n\n\nJavaScript\n\ncardElement.unmount();\nElement events\nThe only way to communicate with your Element is by listening to an event. An Element might emit any of the events below. All events have a payload object that has an elementType property with the type of the Element that emitted the event.","metadata":{"source":"StripeAPI.md"}}],["44",{"pageContent":"paymentElement.on('change',handler)\nThe change event is triggered when the Element's value changes. The event payload always contains certain keys, in addition to some Element-specific keys.\n\nMethod parameters\nevent\nREQUIRED\n'change'\nThe name of the event. In this case, change.\n\nhandler\nREQUIRED\nfunction\nhandler(event) => void is a callback function that you provide that will be called when the event is fired. When called it will be passed an event object with the following properties:\n\nHide handler event object properties\nelementType\nstring\nThe type of element that emitted this event.\n\nempty\nboolean\ntrue if the value is empty.\n\ncomplete\nboolean\ntrue if all required fields for the selected payment method in the Payment Element have been filled with potentially valid input.\n\ncollapsed\nboolean\ntrue if the Payment Element is currently collapsed\n\nvalue\nobject\nAn object containing the current selected PaymentMethod type.","metadata":{"source":"StripeAPI.md"}}],["45",{"pageContent":"collapsed\nboolean\ntrue if the Payment Element is currently collapsed\n\nvalue\nobject\nAn object containing the current selected PaymentMethod type.\n\nConsult with your legal counsel regarding your requirements and obligations about how you collect, use, and store customers' personal data\n\nWas this section helpful?YesNo\n\n\nJavaScript\n\npaymentElement.on('change', function(event) {\n  if (event.complete) {\n    // enable payment button\n  }\n});\n{\n  elementType: 'payment',\n  complete: false,\n  empty: false,\n  collapsed: false,\n  value: { type: \"card\" },\n}\nelement.on('ready',handler)\nTriggered when the Element is fully rendered and can accept element.focus calls.\n\nMethod parameters\nevent\nREQUIRED\n'ready'\nThe name of the event. In this case, ready.\n\nhandler\nREQUIRED\nfunction\nhandler(event) => void is a callback function that you provide that will be called when the event is fired.\n\nAfter it's called, it passes an event object with the following properties:","metadata":{"source":"StripeAPI.md"}}],["46",{"pageContent":"After it's called, it passes an event object with the following properties:\n\nHide handler event object properties\nelementType\nREQUIRED\nstring\nThe type of element the event is fired from.\n\nWas this section helpful?YesNo\n\n\nJavaScript\n\nelement.on('ready', function(event) {\n  // Handle ready event\n});\nelement.on('focus',handler)\nTriggered when the Element gains focus.\n\nMethod parameters\nevent\nREQUIRED\n'focus'\nThe name of the event. In this case, focus.\n\nhandler\nREQUIRED\nfunction\nhandler(event) => void is a callback function that you provide that will be called when the event is fired.\n\nWas this section helpful?YesNo\n\n\nJavaScript\n\nelement.on('focus', function(event) {\n  // Handle focus event\n});\nelement.on('blur',handler)\nTriggered when the Element loses focus.\n\nMethod parameters\nevent\nREQUIRED\n'blur'\nThe name of the event. In this case, blur.\n\nhandler\nREQUIRED\nfunction\nhandler(event) => void is a callback function that you provide that will be called when the event is fired.\n\nWas this section helpful?YesNo","metadata":{"source":"StripeAPI.md"}}],["47",{"pageContent":"handler\nREQUIRED\nfunction\nhandler(event) => void is a callback function that you provide that will be called when the event is fired.\n\nWas this section helpful?YesNo\n\n\nJavaScript\n\nelement.on('blur', function(event) {\n  // Handle blur event\n});\nelement.on('escape',handler)\nTriggered when the escape key is pressed within an Element.\n\nMethod parameters\nevent\nREQUIRED\n'escape'\nThe name of the event. In this case, escape.\n\nhandler\nREQUIRED\nfunction\nhandler(event) => void is a callback function that you provide that will be called when the event is fired.\n\nWas this section helpful?YesNo\n\n\nJavaScript\n\nelement.on('escape', function(event) {\n  // Handle escape event\n});\npaymentRequestButton.on('click')\nTriggered when the Element is clicked.\n\nMethod parameters\nevent\nREQUIRED\n'click'\nThe name of the event. In this case, click.\n\nhandler\nREQUIRED\nfunction\nhandler(event) => void is a callback function that you provide that will be called when the event is fired.","metadata":{"source":"StripeAPI.md"}}],["48",{"pageContent":"handler\nREQUIRED\nfunction\nhandler(event) => void is a callback function that you provide that will be called when the event is fired.\n\nAfter it's called, it passes an event object with the following properties:\n\nHide handler event object properties\npreventDefault\nfunction\nCalling this function synchronously prevents the browser's payment interface from being shown. If you have your own form validation logic, you can call this when form validation fails.\n\nWas this section helpful?YesNo\n\n\nJavaScript\n\npaymentRequestButtonElement.on('click', function(event) {\n  // If form validation fails\n  if (!formValidated) {\n    event.preventDefault();\n  }\n});\nelement.on('loaderror',handler)\nTriggered when the Element fails to load.\n\nThis event is only emitted from the payment, linkAuthentication, and address Elements.\n\nMethod parameters\nevent\nREQUIRED\n'loaderror'\nThe name of the event. In this case, loaderror.","metadata":{"source":"StripeAPI.md"}}],["49",{"pageContent":"This event is only emitted from the payment, linkAuthentication, and address Elements.\n\nMethod parameters\nevent\nREQUIRED\n'loaderror'\nThe name of the event. In this case, loaderror.\n\nhandler\nREQUIRED\nfunction\nhandler(event) => void is a callback function that you provide that will be called when the event is fired.\n\nWhen called it will be passed an event object with the following properties:\n\nHide handler event object properties\nelementType\nstring\nThe type of element that emitted this event.\n\nerror\nobject\nAn error object that describes the failure.\n\nWas this section helpful?YesNo\n\n\nJavaScript\n\npaymentElement.on('loaderror', function(event) {\n  // Handle loaderror event\n});\nelement.on('loaderstart',handler)\nTriggered when the loader UI is mounted to the DOM and ready to be displayed.\n\nThis event is only emitted from the payment, linkAuthentication, and address Elements.\n\nMethod parameters\nevent\nREQUIRED\n'loaderstart'\nThe name of the event. In this case, loaderstart.","metadata":{"source":"StripeAPI.md"}}],["50",{"pageContent":"This event is only emitted from the payment, linkAuthentication, and address Elements.\n\nMethod parameters\nevent\nREQUIRED\n'loaderstart'\nThe name of the event. In this case, loaderstart.\n\nhandler\nREQUIRED\nfunction\nhandler(event) => void is a callback function that you provide that will be called when the event is fired.\n\nWhen called it will be passed an event object with the following properties:\n\nHide handler event object properties\nelementType\nstring\nThe type of element that emitted this event.\n\nWas this section helpful?YesNo\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["51",{"pageContent":"Hide handler event object properties\nelementType\nstring\nThe type of element that emitted this event.\n\nWas this section helpful?YesNo\n\n\nJavaScript\n\npaymentElement.on('loaderstart', function(event) {\n  // Handle loaderstart event\n});\ncardElement.on('networkschange',handler)\nTriggered when there is a change to the available networks the provided card can run on. If the list of available networks is still loading, an event with networks: null and loading: true is triggered. When the list of available networks loads, Stripe triggers an additional event that contains the list of these networks and shows loading: false. Refer to our card brand choice guide for further details.\n\nMethod parameters\nevent\nREQUIRED\n'networkschange'\nThe name of the event. In this case, networkschange.\n\nhandler\nREQUIRED\nfunction\nhandler(event) => void is a callback function that you provide that will be called when the event is fired. When called it will be passed an event object with the following properties:","metadata":{"source":"StripeAPI.md"}}],["52",{"pageContent":"Hide handler event object properties\nloading\nboolean\ntrue if the networks are loading. false when Stripe returns all the available networks.\n\nnetworks\nstringArray | null\nAll available networks for the card number provided. null if the networks are still loading.\n\nWas this section helpful?YesNo\n\n\nJavaScript\n\ncardElement.on('networkschange', function(event) {\n  if (event.networks && event.networks.length >= 1) {\n    // collect card brand preference\n  }\n});\n{\n  loading: false,\n  networks: ['visa', 'cartes_bancaires'],\n}\nInput validation\nStripe elements validate customer input as it is typed. To help your customers catch mistakes, listen to change events on an Element and display any errors.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["53",{"pageContent":"JavaScript\n\ncardElement.on('change', function(event) {\n  var displayError = document.getElementById('card-errors');\n  if (event.error) {\n    displayError.textContent = event.error.message;\n  } else {\n    displayError.textContent = '';\n  }\n});\nPostal code formatting\nThe card element automatically determines your customer’s billing address country based on their card number. Using this information, the postal code field validation reflects whether that country uses numeric or alphanumeric-formatted postal codes, or if the country uses postal codes at all. For instance, if a U.S. card is entered, the postal code field only accepts a five-digit numeric value. If it’s a UK card, an alphanumeric value can be provided instead.\n\nMany of our test cards have a U.S. billing address country. When using these to test your payment form, you must also use a five-digit U.S. ZIP code (e.g., 12345). To test elements with other postal code formats, use our international test card numbers.","metadata":{"source":"StripeAPI.md"}}],["54",{"pageContent":"Was this section helpful?YesNo\n\nPayment Intents\nAccept global payments online with the Payment Intents APIs. For step-by-step instructions on using the Payment Intents APIs, see the accept a payment guide.\n\nThe following Stripe.js methods are available to use as part of your integration.\n\nWas this section helpful?YesNo\n\nstripe.confirmPayment(options)\nUse stripe.confirmPayment to confirm a PaymentIntent using data collected by the Payment Element. When called, stripe.confirmPayment will attempt to complete any required actions, such as authenticating your user by displaying a 3DS dialog or redirecting them to a bank authorization page. Your user will be redirected to the return_url you pass once the confirmation is complete.\n\nMethod parameters\noptions\nREQUIRED\nobject\nHide options properties\nelements\nREQUIRED\nobject\nThe Elements instance that was used to create the Payment Element.","metadata":{"source":"StripeAPI.md"}}],["55",{"pageContent":"Method parameters\noptions\nREQUIRED\nobject\nHide options properties\nelements\nREQUIRED\nobject\nThe Elements instance that was used to create the Payment Element.\n\nconfirmParams\nobject\nParameters that will be passed on to the Stripe API. Refer to the Payment Intents API for a full list of parameters.\n\nHide confirmParams properties\nreturn_url\nREQUIRED\nstring\nThe url your customer will be directed to after they complete payment.\n\nshipping\nRECOMMENDED\nobject\nThe shipping details for the payment, if collected.\n\nNote: When the Address Element in shipping mode is being used, shipping address details are collected from the Address Element and passed to the PaymentIntents confirm endpoint as the shipping parameter. You can also include additional shipping fields, which will be merged with the data collected from the Element. Values passed here will override details collected by Elements.","metadata":{"source":"StripeAPI.md"}}],["56",{"pageContent":"payment_method_data\nobject\nWhen you call stripe.confirmPayment, payment details are collected from the Element and passed to the PaymentIntents confirm endpoint as the payment_method_data parameter. You can also include additional payment_method_data fields, which will be merged with the data collected from the Element.\n\nShow payment_method_data properties\nredirect\n'always' | 'if_required'\nBy default, stripe.confirmPayment will always redirect to your return_url after a successful confirmation. If you set redirect: \"if_required\", then stripe.confirmPayment will only redirect if your user chooses a redirect-based payment method.\n\nNote: Setting if_required requires that you handle successful confirmations for redirect-based and non-redirect based payment methods separately. When a non-redirect based payment method is successfully confirmed, stripe.confirmPayment will resolve with a {paymentIntent} object.","metadata":{"source":"StripeAPI.md"}}],["57",{"pageContent":"Returns\nstripe.confirmPayment will return a Promise. Upon a successful confirmation, your user will be redirected to the return_url you provide before the Promise ever resolves.\n\nIf the confirmation fails, the Promise will resolve with an {error} object that describes the failure. When the error type is card_error or validation_error, you can display the error message in error.message directly to your user. An error type of invalid_request_error could be due to an invalid request or 3DS authentication failures.\n\nNote that for some payment methods such as iDEAL or Afterpay Clearpay, your user will first be redirected to an intermediate page to authorize the payment. If they fail to authorize the payment, they will be redirected back to your return_url and the PaymentIntent will have a status of requires_payment_method. In this case you should attempt to recollect payment from the user.","metadata":{"source":"StripeAPI.md"}}],["58",{"pageContent":"Note that stripe.confirmPayment may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\nWas this section helpful?YesNo\n\n\nJavaScript\n\nstripe.confirmPayment({\n  elements,\n  confirmParams: {\n    // Return URL where the customer should be redirected after the PaymentIntent is confirmed.\n    return_url: 'https://example.com',\n  },\n})\n.then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\nConfirm a PaymentIntent by payment method\nBelow are a number of methods used to confirm a PaymentIntent for a specific payment method type.","metadata":{"source":"StripeAPI.md"}}],["59",{"pageContent":"stripe.confirmCardPayment(clientSecret,data?,options?)\nUse stripe.confirmCardPayment when the customer submits your payment form. When called, it will confirm the PaymentIntent with data you provide and carry out 3DS or other next actions if they are required.\n\nIf you are using Dynamic 3D Secure, stripe.confirmCardPayment will trigger your Radar rules to execute and may open a dialog for your customer to authenticate their payment.\n\nWhen you confirm a PaymentIntent, it needs to have an attached PaymentMethod. In addition to confirming the PaymentIntent, this method can automatically create and attach a new PaymentMethod for you. It can also be called with an existing PaymentMethod, or if you have already attached a PaymentMethod you can call this method without needing to provide any additional data. These use cases are detailed in the sections that follow.\n\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent.","metadata":{"source":"StripeAPI.md"}}],["60",{"pageContent":"Method parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent.\n\ndata\noptional\nobject\nData to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n\nHide data properties\npayment_method\nRECOMMENDED\nstring | object\nEither the id of an existing PaymentMethod, or an object containing data to create a PaymentMethod with. See the use case sections below for details.\n\nshipping\nRECOMMENDED\nobject\nThe shipping details for the payment, if collected.\n\nreturn_url\nstring\nIf you are handling next actions yourself, pass in a return_url. If the subsequent action is redirect_to_url, this URL will be used on the return path for the redirect.\n\nreceipt_email\nstring\nEmail address that the receipt for the resulting payment will be sent to.\n\nsetup_future_usage\nstring\nIndicates that you intend to make future payments with this PaymentIntent's payment method.","metadata":{"source":"StripeAPI.md"}}],["61",{"pageContent":"setup_future_usage\nstring\nIndicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf present, the payment method used with this PaymentIntent can be attached to a Customer, even after the transaction completes.\n\nUse on_session if you intend to only reuse the payment method when your customer is present in your checkout flow. Use off_session if your customer may or may not be in your checkout flow. See saving card details during payment to learn more.\n\nStripe uses setup_future_usage to dynamically optimize your payment flow and comply with regional legislation and network rules. For example, if your customer is impacted by SCA, using off_session will ensure that they are authenticated while processing this PaymentIntent. You will then be able to collect off-session payments for this customer.\n\npayment_method_options\nobject\nAn object containing payment-method-specific configuration to confirm the PaymentIntent with.","metadata":{"source":"StripeAPI.md"}}],["62",{"pageContent":"payment_method_options\nobject\nAn object containing payment-method-specific configuration to confirm the PaymentIntent with.\n\nShow payment_method_options properties\noptions\noptional\nobject\nAn options object to control the behavior of this method.\n\nHide options properties\nhandleActions\nboolean\nSet this to false if you want to handle next actions yourself, or if you want to defer next action handling until later (e.g. for use in the PaymentRequest API). Default is true.\n\nReturns\nstripe.confirmCardPayment will return a Promise which resolves with a result object. This object has either:","metadata":{"source":"StripeAPI.md"}}],["63",{"pageContent":"Returns\nstripe.confirmCardPayment will return a Promise which resolves with a result object. This object has either:\n\nresult.paymentIntent: the successful PaymentIntent.\nresult.error: an error. Refer to the API reference for all possible errors.\nNote that stripe.confirmCardPayment may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\nAdditionally, stripe.confirmCardPayment may trigger a 3D Secure authentication challenge. This will be shown in a modal dialog and may be confusing for customers using assistive technologies like screen readers. You should make your form accessible by ensuring that success or error messages are clearly read out after this method completes.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["64",{"pageContent":"JavaScript\n\nstripe\n  .confirmCardPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      card: cardElement,\n      billing_details: {\n        name: 'Jenny Rosen',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\nConfirm a card paymentwith payment data from an Element\nUse stripe.confirmCardPayment with payment data from an Element by passing a card or cardNumber Element as payment_method[card] in the data argument.\n\nThe new PaymentMethod will be created with data collected by the Element and will be used to confirm the PaymentIntent.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm using data collected by a card or cardNumber Element.\n\nHide payment_method properties\ncard\nREQUIRED\nElement\nUses the provided card or cardNumber Element for confirmation.\n\nbilling_details\nRECOMMENDED\nobject\nThe billing_details associated with the card.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["65",{"pageContent":"billing_details\nRECOMMENDED\nobject\nThe billing_details associated with the card.\n\n\nJavaScript\n\nstripe\n  .confirmCardPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      card: cardElement,\n      billing_details: {\n        name: 'Jenny Rosen',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\nConfirm a card paymentwith an existing payment method\nUse stripe.confirmCardPayment with an existing PaymentMethod by passing its id to payment_method. The PaymentMethod will be used to confirm the PaymentIntent.\n\nData argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["66",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\n\nJavaScript\n\nstripe\n  .confirmCardPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  })\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\nConfirm a card paymentwith an existing token\nFor backwards compatibility, you can convert an existing Token into a PaymentMethod with stripe.confirmCardPayment by passing the Token to payment_method[card][token]. The newly created PaymentMethod will be used to confirm the PaymentIntent.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm using an existing token.\n\nHide payment_method properties\ncard\nREQUIRED\nobject\nAn object of card data.\n\nHide card properties\ntoken\nREQUIRED\nstring\nConverts the provided token into a PaymentMethod to use for confirmation.\n\nbilling_details\nRECOMMENDED\nobject\nThe billing_details associated with the card.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["67",{"pageContent":"billing_details\nRECOMMENDED\nobject\nThe billing_details associated with the card.\n\n\nJavaScript\n\nstripe\n  .confirmCardPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      card: {\n        token: 'tok_visa',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\nConfirm a card paymentwith an attached PaymentMethod\nIf you have already attached a PaymentMethod to this PaymentIntent, then you can confirm the PaymentIntent using stripe.confirmCardPayment without passing in any additional data.\n\n\nJavaScript\n\nstripe\n  .confirmCardPayment('{PAYMENT_INTENT_CLIENT_SECRET}')\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\nstripe.confirmUsBankAccountPayment(clientSecret,data?)\nUse stripe.confirmUsBankAccountPayment in the Accept a payment flow for the ACH Direct Debit payment method to record the customer’s authorization for payment.","metadata":{"source":"StripeAPI.md"}}],["68",{"pageContent":"When you confirm a PaymentIntent, it needs to have an attached PaymentMethod. We suggest using stripe.collectBankAccountForPayment, which automatically collects bank account details and attaches a PaymentMethod. You may also choose to reuse an existing PaymentMethod or manually collect bank account details using the data parameter. These use cases are detailed in the sections that follow.\n\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent.\n\ndata\noptional\nobject\nData to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n\nHide data properties\npayment_method\nobject | string\nThe id of an existing PaymentMethod or an object of collected data. See use cases below for details.\n\nReturns\nstripe.confirmUsBankAccountPayment will return a Promise which resolves with a result object. This object has either:","metadata":{"source":"StripeAPI.md"}}],["69",{"pageContent":"Returns\nstripe.confirmUsBankAccountPayment will return a Promise which resolves with a result object. This object has either:\n\nresult.paymentIntent: the successfully confirmed PaymentIntent.\nresult.error: an error. Refer to the API reference and our integration guide for all possible errors.\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["70",{"pageContent":"JavaScript\n\nstripe.confirmUsBankAccountPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      us_bank_account: {\n        routing_number: '110000000',\n        account_number: '000123456789',\n        account_holder_type: 'individual',\n      },\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on PaymentIntent's status.\n    console.log(\"PaymentIntent ID: \" + result.paymentIntent.id);\n    console.log(\"PaymentIntent status: \" + result.paymentIntent.status);\n  }\n});\nConfirm an ACH Direct Debit paymentwith an existing PaymentMethod\nIf you have already created a PaymentMethod, you can pass its id to payment_method when calling stripe.confirmUsBankAccountPayment.","metadata":{"source":"StripeAPI.md"}}],["71",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\n\nJavaScript\n\nstripe.confirmUsBankAccountPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on PaymentIntent's status.\n    console.log(\"PaymentIntent ID: \" + result.paymentIntent.id);\n    console.log(\"PaymentIntent status: \" + result.paymentIntent.status);\n  }\n});\nConfirm an ACH Direct Debit paymentwith an attached PaymentMethod\nIf you have successfully called stripe.collectBankAccountForPayment or attached a PaymentMethod to this PaymentIntent already, then you can confirm the PaymentIntent without passing in any additional data.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["72",{"pageContent":"JavaScript\n\nstripe.confirmUsBankAccountPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {}\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on PaymentIntent's status.\n    console.log(\"PaymentIntent ID: \" + result.paymentIntent.id);\n    console.log(\"PaymentIntent status: \" + result.paymentIntent.status);\n  }\n});\nConfirm an ACH Direct Debit paymentwith self collected bank account information\nIf you already know the customer’s bank account information, or want to collect it yourself, you can pass them in directly to create a new PaymentMethod and confirm the PaymentIntent.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm using data collected.","metadata":{"source":"StripeAPI.md"}}],["73",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm using data collected.\n\nHide payment_method properties\nbilling_details\nREQUIRED\nObject\nThe customer's billing_details. name is required. Providing email allows your customer to receive ACH Direct Debit mandate and microdeposit emails.\n\nHide billing_details properties\nname\nREQUIRED\nstring\nThe customer's name. The first and last name must be at minimum 2 characters each.\n\nemail\nstring\nThe customer's email.\n\nus_bank_account\nREQUIRED\nObject\nThe customer's bank account information.\n\nHide us_bank_account properties\naccount_number\nREQUIRED\nstring\nThe customer’s bank account number.\n\nrouting_number\nREQUIRED\nstring\nThe routing number of the customer’s bank.\n\naccount_holder_type\nREQUIRED\nstring\nAccount holder type: individual or company.\n\naccount_type\nstring\nAccount type: checkings or savings. Defaults to checking if omitted.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["74",{"pageContent":"stripe.confirmUsBankAccountPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      us_bank_account: {\n        routing_number: '110000000',\n        account_number: '000123456789',\n        account_holder_type: 'individual',\n      },\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on PaymentIntent's status.\n    console.log(\"PaymentIntent ID: \" + result.paymentIntent.id);\n    console.log(\"PaymentIntent status: \" + result.paymentIntent.status);\n  }\n});\nstripe.confirmAcssDebitPayment(clientSecret,data?,options?)","metadata":{"source":"StripeAPI.md"}}],["75",{"pageContent":"console.log(\"PaymentIntent status: \" + result.paymentIntent.status);\n  }\n});\nstripe.confirmAcssDebitPayment(clientSecret,data?,options?)\nUse stripe.confirmAcssDebitPayment in the Accept a payment flow for the Canadian pre-authorized debit payment method when the customer submits your payment form. When called, it will automatically load an on-page modal UI to collect bank account details and verification, accept a hosted mandate agreement, and confirm the PaymentIntent when the user submits the form. Note that there are some additional requirements to this flow that are not covered in this reference. Refer to our integration guide for more details.","metadata":{"source":"StripeAPI.md"}}],["76",{"pageContent":"When you confirm a PaymentIntent, it needs to have an attached PaymentMethod. stripe.confirmAcssDebitPayment automatically creates a new PaymentMethod for you when your customer completes the modal UI. It can also be called with an existing PaymentMethod, which will load the modal UI to collect a new mandate agreement. These use cases are detailed in the sections that follow.\n\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent.\n\ndata\noptional\nobject\nData to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n\nHide data properties\npayment_method\nobject | string\nThe id of an existing PaymentMethod or an object of collected data. See use cases below for details.\n\noptions\noptional\nobject\nAn options object to control the behavior of this method.\n\nHide options properties\nskipMandate\nboolean\nSet this to true if you want to skip displaying the mandate confirmation.","metadata":{"source":"StripeAPI.md"}}],["77",{"pageContent":"options\noptional\nobject\nAn options object to control the behavior of this method.\n\nHide options properties\nskipMandate\nboolean\nSet this to true if you want to skip displaying the mandate confirmation.\n\nReturns\nstripe.confirmAcssDebitPayment will return a Promise which resolves with a result object. This object has either:\n\nresult.paymentIntent: the successfully confirmed PaymentIntent.\nresult.error: an error. Refer to the API reference and our integration guide for all possible errors.\nNote that stripe.confirmAcssDebitPayment may take several seconds to complete. During that time, disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, show it to the customer, re-enable the form, and hide the waiting indicator.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["78",{"pageContent":"JavaScript\n\nstripe.confirmAcssDebitPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on PaymentIntent's status.\n    console.log(\"PaymentIntent ID: \" + result.paymentIntent.id);\n    console.log(\"PaymentIntent status: \" + result.paymentIntent.status);\n  }\n});\nConfirm a Canadian pre-authorized debit paymentwith a new PaymentMethod\nYou can pass in the customer’s billing details to create a new PaymentMethod and confirm the PaymentIntent. You are required to collect and include the customer’s name and email address. This method loads an on-page modal UI that handles bank account details collection and verification, presents a hosted mandate agreement and collects authorization for you.","metadata":{"source":"StripeAPI.md"}}],["79",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm using data collected.\n\nHide payment_method properties\nbilling_details\nREQUIRED\nObject\nThe customer's billing_details. name and email are required.\n\nHide billing_details properties\nname\nREQUIRED\nstring\nThe customer's name. The first and last name must be at minimum 2 characters each.\n\nemail\nREQUIRED\nstring\nThe customer's email.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["80",{"pageContent":"email\nREQUIRED\nstring\nThe customer's email.\n\n\nJavaScript\n\nstripe.confirmAcssDebitPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on PaymentIntent's status.\n    console.log(\"PaymentIntent ID: \" + result.paymentIntent.id);\n    console.log(\"PaymentIntent status: \" + result.paymentIntent.status);\n  }\n});\nConfirm a Canadian pre-authorized debit paymentwith an existing PaymentMethod\nIf you have already created a PaymentMethod, you can pass its id to payment_method when calling stripe.confirmAcssDebitPayment. This method loads an on-page modal UI that only presents a hosted mandate agreement and collects authorization for you.","metadata":{"source":"StripeAPI.md"}}],["81",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\n\nJavaScript\n\nstripe.confirmAcssDebitPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on PaymentIntent's status.\n    console.log(\"PaymentIntent ID: \" + result.paymentIntent.id);\n    console.log(\"PaymentIntent status: \" + result.paymentIntent.status);\n  }\n});\nConfirm a Canadian pre-authorized debit paymentwith an attached PaymentMethod\nIf you have already attached a PaymentMethod to this PaymentIntent, then you can confirm the PaymentIntent without passing in any additional data. This method loads an on-page modal UI that only presents a hosted mandate agreement and collects authorization for you.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["82",{"pageContent":"JavaScript\n\nstripe.confirmAcssDebitPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {}\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on PaymentIntent's status.\n    console.log(\"PaymentIntent ID: \" + result.paymentIntent.id);\n    console.log(\"PaymentIntent status: \" + result.paymentIntent.status);\n  }\n});\nConfirm a Canadian pre-authorized debit paymentwith self collected bank account information\nIf you already know the customer’s bank account information, or want to collect it yourself, you can pass them in directly to create a new PaymentMethod and confirm the PaymentIntent. In this case, this method does not load the on-page modal UI, so you will need to build your own mandate agreement page.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm using data collected.","metadata":{"source":"StripeAPI.md"}}],["83",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm using data collected.\n\nHide payment_method properties\nbilling_details\nREQUIRED\nObject\nThe customer's billing_details. name and email are required.\n\nHide billing_details properties\nname\nREQUIRED\nstring\nThe customer's name. The first and last name must be at minimum 2 characters each.\n\nemail\nREQUIRED\nstring\nThe customer's email.\n\nacss_debit\nREQUIRED\nObject\nThe customer's bank account information.\n\nHide acss_debit properties\naccount_number\nREQUIRED\nstring\nThe customer’s bank account number.\n\ninstitution_number\nREQUIRED\nstring\nThe institution number of the customer’s bank.\n\ntransit_number\nREQUIRED\nstring\nThe transit number of the customer’s bank.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["84",{"pageContent":"stripe.confirmAcssDebitPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      acss_debit: {\n        institution_number: '000',\n        transit_number: '11000',\n        account_number: '000123456789',\n      },\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on PaymentIntent's status.\n    console.log(\"PaymentIntent ID: \" + result.paymentIntent.id);\n    console.log(\"PaymentIntent status: \" + result.paymentIntent.status);\n  }\n});\nConfirm a Canadian pre-authorized debit paymentwith an existing PaymentMethod but skip mandate display","metadata":{"source":"StripeAPI.md"}}],["85",{"pageContent":"console.log(\"PaymentIntent status: \" + result.paymentIntent.status);\n  }\n});\nConfirm a Canadian pre-authorized debit paymentwith an existing PaymentMethod but skip mandate display\nIf you have already created a PaymentMethod and built your own mandate agreement page, you can reuse it by passing its id to payment_method when calling stripe.confirmAcssDebitPayment and skip the on-page modal UI at the same time.","metadata":{"source":"StripeAPI.md"}}],["86",{"pageContent":"Data and options argument paramters\ndata\nobject\nData to be sent with the request.\n\nHide data properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\noptions\nobject\nAn options object to control the behavior of this method.\n\nHide options properties\nskipMandate\nREQUIRED\nboolean\nSet to true to skip the on-page modal UI.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["87",{"pageContent":"stripe.confirmAcssDebitPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  },\n  {\n    skipMandate: true,\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on PaymentIntent's status.\n    console.log(\"PaymentIntent ID: \" + result.paymentIntent.id);\n    console.log(\"PaymentIntent status: \" + result.paymentIntent.status);\n  }\n});\nstripe.confirmAffirmPayment(clientSecret,data?,options?)","metadata":{"source":"StripeAPI.md"}}],["88",{"pageContent":"console.log(\"PaymentIntent ID: \" + result.paymentIntent.id);\n    console.log(\"PaymentIntent status: \" + result.paymentIntent.status);\n  }\n});\nstripe.confirmAffirmPayment(clientSecret,data?,options?)\nUse stripe.confirmAffirmPayment in the Affirm payment method creation flow when the customer submits your payment form. When called, it will confirm the PaymentIntent with data you provide, and it will automatically redirect the customer to authorize the transaction. Once authorization is complete, the customer will be redirected back to your specified return_url. When you confirm a PaymentIntent, it needs to have an attached PaymentMethod. In addition to confirming the PaymentIntent, this method can automatically create and attach a new PaymentMethod for you. If you have already attached a PaymentMethod you can call this method without needing to provide any additional data. These use cases are detailed in the sections that follow.","metadata":{"source":"StripeAPI.md"}}],["89",{"pageContent":"Method parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent.\n\ndata\noptional\nobject\nData to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n\nHide data properties\npayment_method\nRECOMMENDED\nstring | object\nEither the id of an existing PaymentMethod, or an object containing data to create a PaymentMethod with. See the use case sections below for details.\n\nshipping\nREQUIRED\nobject\nThe shipping details for the payment.\n\nShow shipping properties\nreturn_url\nREQUIRED\nstring\nThe url your customer will be directed to after they complete authentication.\n\noptions\noptional\nobject\nAn options object to control the behavior of this method.\n\nHide options properties\nhandleActions\nboolean\nSet this to false if you want to manually handle the authorization redirect. Default is true.","metadata":{"source":"StripeAPI.md"}}],["90",{"pageContent":"Hide options properties\nhandleActions\nboolean\nSet this to false if you want to manually handle the authorization redirect. Default is true.\n\nReturns\nBy default, stripe.confirmAffirmPayment will trigger a redirect when successful. If there is an error, or when handling next_actions manually by using the handleActions: false option, it will return a Promise which resolves with a result object. This object has either:\n\nresult.paymentIntent: the successful PaymentIntent.\nresult.error: an error. Refer to the API reference for all possible errors.\nNote that stripe.confirmAffirmPayment may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["91",{"pageContent":"JavaScript\n\nstripe.confirmAffirmPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}'\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\nConfirm an Affirm paymentwithout an existing payment method\nIf you have not already created a PaymentMethod, you can pass payment method parameters, and the newly created PaymentMethod will be used to confirm the PaymentIntent.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass payment method billing details.\n\nHide payment_method properties\nbilling_details\nRECOMMENDED\nobject\nThe billing_details associated with the payment.\n\nShow billing_details properties\nshipping\nREQUIRED\nobject\nThe shipping details for the payment.\n\nShow shipping properties\nreturn_url\nREQUIRED\nstring\nThe url your customer will be directed to after they complete authentication.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["92",{"pageContent":"stripe.confirmAffirmPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n        address: {\n          line1: '123 Main Street',\n          city: 'San Francisco',\n          state: 'CA',\n          country: 'US',\n          postal_code: '94321'\n        }\n      }\n    },\n    shipping: {\n      name: 'Jenny Rosen',\n      address: {\n        line1: '123 Main Street',\n        city: 'San Francisco',\n        state: 'CA',\n        country: 'US',\n        postal_code: '94321'\n      }\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\nConfirm an Affirm paymentwith an existing payment method\nIf you have already created a PaymentMethod, you can pass its id to payment_method and it will be used to confirm the PaymentIntent.","metadata":{"source":"StripeAPI.md"}}],["93",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\nshipping\nREQUIRED\nobject\nThe shipping details for the payment.\n\nShow shipping properties\nreturn_url\nREQUIRED\nstring\nThe url your customer will be directed to after they complete authentication.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["94",{"pageContent":"Show shipping properties\nreturn_url\nREQUIRED\nstring\nThe url your customer will be directed to after they complete authentication.\n\n\nJavaScript\n\nstripe.confirmAffirmPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    shipping: {\n      name: 'Jenny Rosen',\n      address: {\n        line1: '123 Main Street',\n        city: 'San Francisco',\n        state: 'CA',\n        country: 'US',\n        postal_code: '94321'\n      }\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n).then(function(result) {\n  // Inform the customer that there was an error.\n});\nConfirm an Affirm paymentwith an attached PaymentMethod\nIf you have already attached a return_url and a PaymentMethod to this PaymentIntent, then you can confirm without passing in any additional data.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["95",{"pageContent":"stripe.confirmAffirmPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}'\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\nstripe.confirmAfterpayClearpayPayment(clientSecret,data?,options?)\nUse stripe.confirmAfterpayClearpayPayment in the Afterpay Clearpay payment method creation flow when the customer submits your payment form. When called, it will confirm the PaymentIntent with data you provide, and it will automatically redirect the customer to authorize the transaction. Once authorization is complete, the customer will be redirected back to your specified return_url. When you confirm a PaymentIntent, it needs to have an attached PaymentMethod. In addition to confirming the PaymentIntent, this method can automatically create and attach a new PaymentMethod for you. If you have already attached a PaymentMethod you can call this method without needing to provide any additional data. These use cases are detailed in the sections that follow.","metadata":{"source":"StripeAPI.md"}}],["96",{"pageContent":"Method parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent.\n\ndata\noptional\nobject\nData to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n\nHide data properties\npayment_method\nRECOMMENDED\nstring | object\nEither the id of an existing PaymentMethod, or an object containing data to create a PaymentMethod with. See the use case sections below for details.\n\nreturn_url\nREQUIRED\nstring\nThe url your customer will be directed to after they complete authentication.\n\noptions\noptional\nobject\nAn options object to control the behavior of this method.\n\nHide options properties\nhandleActions\nboolean\nSet this to false if you want to manually handle the authorization redirect. Default is true.","metadata":{"source":"StripeAPI.md"}}],["97",{"pageContent":"Hide options properties\nhandleActions\nboolean\nSet this to false if you want to manually handle the authorization redirect. Default is true.\n\nReturns\nBy default, stripe.confirmAfterpayClearpayPayment will trigger a redirect when successful. If there is an error, or when handling next_actions manually by using the handleActions: false option, it will return a Promise which resolves with a result object. This object has either:\n\nresult.paymentIntent: the successful PaymentIntent.\nresult.error: an error. Refer to the API reference for all possible errors.\nNote that stripe.confirmAfterpayClearpayPayment may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["98",{"pageContent":"JavaScript\n\nstripe.confirmAfterpayClearpayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}'\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\nConfirm an Afterpay Clearpay paymentwithout an existing payment method\nIf you have not already created a PaymentMethod, you can pass payment method parameters, and the newly created PaymentMethod will be used to confirm the PaymentIntent.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass payment method billing details.\n\nHide payment_method properties\nbilling_details\nREQUIRED\nobject\nThe billing_details associated with the payment.\n\nShow billing_details properties\nshipping\nRECOMMENDED\nobject\nThe shipping details for the payment.\n\nShow shipping properties\nreturn_url\nREQUIRED\nstring\nThe url your customer will be directed to after they complete authentication.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["99",{"pageContent":"stripe.confirmAfterpayClearpayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n        address: {\n          line1: '123 Main Street',\n          city: 'San Francisco',\n          state: 'CA',\n          country: 'US',\n          postal_code: '94321'\n        }\n      }\n    },\n    shipping: {\n      name: 'Jenny Rosen',\n      address: {\n        line1: '123 Main Street',\n        city: 'San Francisco',\n        state: 'CA',\n        country: 'US',\n        postal_code: '94321'\n      }\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\nConfirm an Afterpay Clearpay paymentwith an existing payment method\nIf you have already created a PaymentMethod, you can pass its id to payment_method and it will be used to confirm the PaymentIntent.","metadata":{"source":"StripeAPI.md"}}],["100",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\nreturn_url\nREQUIRED\nstring\nThe url your customer will be directed to after they complete authentication.\n\n\nJavaScript\n\nstripe.confirmAfterpayClearpayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n).then(function(result) {\n  // Inform the customer that there was an error.\n});\nConfirm an Afterpay Clearpay paymentwith an attached PaymentMethod\nIf you have already attached a return_url and a PaymentMethod to this PaymentIntent, then you can confirm without passing in any additional data.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["101",{"pageContent":"JavaScript\n\nstripe.confirmAfterpayClearpayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}'\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\nstripe.confirmAlipayPayment(clientSecret,data?,options?)\nUse stripe.confirmAlipayPayment in the Alipay payment method creation flow when the customer submits your payment form. When called, it will confirm the PaymentIntent with data you provide, and it will automatically redirect the customer to authorize the transaction. Once authorization is complete, the customer will be redirected back to your specified return_url. When you confirm a PaymentIntent, it needs to have an attached PaymentMethod. In addition to confirming the PaymentIntent, this method can automatically create and attach a new PaymentMethod for you. If you have already attached a PaymentMethod you can call this method without needing to provide any additional data. These use cases are detailed in the sections that follow.","metadata":{"source":"StripeAPI.md"}}],["102",{"pageContent":"Method parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent.\n\ndata\noptional\nobject\nData to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n\nHide data properties\npayment_method\nRECOMMENDED\nstring | object\nThe id of an existing PaymentMethod. See the use case sections below for details.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\noptions\noptional\nobject\nAn options object to control the behavior of this method.\n\nHide options properties\nhandleActions\nboolean\nSet this to false if you want to manually handle the authorization redirect. Default is true.\n\nReturns\nBy default, stripe.confirmAlipayPayment will trigger a redirect when successful. If there is an error, or when handling next_actions manually by using the handleActions: false option, it will return a Promise which resolves with a result object. This object has either:","metadata":{"source":"StripeAPI.md"}}],["103",{"pageContent":"result.paymentIntent: the successful PaymentIntent.\nresult.error: an error. Refer to the API reference for all possible errors.\nNote that stripe.confirmAlipayPayment may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\n\nJavaScript\n\nstripe.confirmAlipayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\nConfirm an Alipay paymentWithout an existing payment method\nIf you have not already created a PaymentMethod, the newly created PaymentMethod will be used to confirm the PaymentIntent.","metadata":{"source":"StripeAPI.md"}}],["104",{"pageContent":"Data argument properties\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\n\nJavaScript\n\nstripe.confirmAlipayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\nConfirm an Alipay paymentWith an existing payment method\nIf you have already created a PaymentMethod, you can pass its id to payment_method and it will be used to confirm the PaymentIntent.\n\nData argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["105",{"pageContent":"return_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\n\nJavaScript\n\nstripe.confirmAlipayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n).then(function(result) {\n  // Inform the customer that there was an error.\n});\nConfirm an Alipay paymentWith an attached PaymentMethod\nIf you have already attached a return_url and a PaymentMethod to this PaymentIntent, then you can confirm without passing in any additional data.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["106",{"pageContent":"JavaScript\n\nstripe.confirmAlipayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}'\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\nstripe.confirmAuBecsDebitPayment(clientSecret,data?)\nUse stripe.confirmAuBecsDebitPayment in the BECS Direct Debit Payments with Payment Methods flow when the customer submits your payment form. When called, it will confirm the PaymentIntent with data you provide. Note that there are some additional requirements to this flow that are not covered in this reference. Refer to our integration guide for more details.\n\nWhen you confirm a PaymentIntent, it needs to have an attached PaymentMethod. In addition to confirming the PaymentIntent, this method can automatically create and attach a new PaymentMethod for you. If you have already attached a PaymentMethod you can call this method without needing to provide any additional data. These use cases are detailed in the sections that follow.","metadata":{"source":"StripeAPI.md"}}],["107",{"pageContent":"Method parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent.\n\ndata\noptional\nobject\nData to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n\nHide data properties\npayment_method\nRECOMMENDED\nobject | string\nThe id of an existing PaymentMethod or an object of collected data. See use cases below for details.\n\nsetup_future_usage\nstring\nTo set up the BECS Direct Debit account for reuse, set this parameter to off_session. BECS Direct Debit only accepts an off_session value for this parameter. If a customer is provided on this PaymentIntent, the PaymentMethod will be attached to the customer when the PaymentIntent transitions to processing.\n\nReturns\nstripe.confirmAuBecsDebitPayment will return a Promise which resolves with a result object. This object has either:","metadata":{"source":"StripeAPI.md"}}],["108",{"pageContent":"Returns\nstripe.confirmAuBecsDebitPayment will return a Promise which resolves with a result object. This object has either:\n\nresult.paymentIntent: the successful PaymentIntent.\nresult.error: an error. Refer to the API reference for all possible errors.\nNote that stripe.confirmAuBecsDebitPayment may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["109",{"pageContent":"JavaScript\n\nstripe\n  .confirmAuBecsDebitPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      au_becs_debit: auBankAccountElement,\n      billing_details: {\n        name: 'John Smith',\n        email: 'john.smith@example.com',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\nConfirm a BECS Debit paymentwith payment data from an Element\nCreate and attach a new PaymentMethod with stripe.confirmAuBecsDebitPayment by passing an auBankAccount Element to payment_method[au_becs_debit]. The new PaymentMethod will be created with the data collected by the Element and will be used to confirm the PaymentIntent. Additionally, to create a BECS Direct Debit PaymentMethod, you are required to collect and include the account holder's name and the customer's email address.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm the payment using data collected by an auBankAccount Element.","metadata":{"source":"StripeAPI.md"}}],["110",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm the payment using data collected by an auBankAccount Element.\n\nHide payment_method properties\nau_becs_debit\nREQUIRED\nElement\nAn auBankAccount Element.\n\nbilling_details\nREQUIRED\nObject\nThe customer's billing_details. name and email are required.\n\nHide billing_details properties\nname\nREQUIRED\nstring\nThe account holder's name.\n\nemail\nREQUIRED\nstring\nThe customer's email.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["111",{"pageContent":"Hide billing_details properties\nname\nREQUIRED\nstring\nThe account holder's name.\n\nemail\nREQUIRED\nstring\nThe customer's email.\n\n\nJavaScript\n\nstripe\n  .confirmAuBecsDebitPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      au_becs_debit: auBankAccountElement,\n      billing_details: {\n        name: 'John Smith',\n        email: 'john.smith@example.com',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\nConfirm a BECS Debit paymentwith self collected data\nIf you already know the customer’s BSB number and bank account number or want to collect it yourself, then you do not need to use the auBankAccount Element with stripe.confirmAuBecsDebitPayment. You can pass in the customer’s bank account information directly to create a new PaymentMethod and confirm the PaymentIntent. To create a BECS Direct Debit PaymentMethod, you are required to collect and include the account holder's name and the customer's email address.","metadata":{"source":"StripeAPI.md"}}],["112",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm using data collected without an Element.\n\nHide payment_method properties\nau_becs_debit\nREQUIRED\nobject\nHide au_becs_debit properties\nbsb_number\nREQUIRED\nstring\nA Bank State Branch (BSB) number.\n\naccount_number\nREQUIRED\nstring\nA bank account number.\n\nbilling_details\nREQUIRED\nObject\nThe customer's billing_details. name and email are required.\n\nHide billing_details properties\nname\nREQUIRED\nstring\nThe account holder's name.\n\nemail\nREQUIRED\nstring\nThe customer's email.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["113",{"pageContent":"Hide billing_details properties\nname\nREQUIRED\nstring\nThe account holder's name.\n\nemail\nREQUIRED\nstring\nThe customer's email.\n\n\nJavaScript\n\nstripe\n  .confirmAuBecsDebitPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      au_becs_debit: {\n        bsb_number: '000000',\n        account_number: '000123456'\n      },\n      billing_details: {\n        name: 'John Smith',\n        email: 'john.smith@example.com',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\nConfirm a BECS Debit paymentwith an existing payment method\nIf you have already created a PaymentMethod, you can pass its id to payment_method when calling stripe.confirmAuBecsDebitPayment. It will be used to confirm the PaymentIntent.\n\nData argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["114",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\n\nJavaScript\n\nstripe\n  .confirmAuBecsDebitPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  })\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\nConfirm a BECS Debit paymentwith an attached PaymentMethod\nIf you have already attached a PaymentMethod to this PaymentIntent, then you can confirm the PaymentIntent using stripe.confirmAuBecsDebitPayment without passing in any additional data.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["115",{"pageContent":"JavaScript\n\nstripe\n  .confirmAuBecsDebitPayment('{PAYMENT_INTENT_CLIENT_SECRET}')\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\nstripe.confirmBancontactPayment(clientSecret,data?,options?)\nUse stripe.confirmBancontactPayment in the Bancontact Payments with Payment Methods flow when the customer submits your payment form. When called, it will confirm the PaymentIntent with data you provide, and it will automatically redirect the customer to authorize the transaction. Once authorization is complete, the customer will be redirected back to your specified return_url.\n\nWhen you confirm a PaymentIntent, it needs to have an attached PaymentMethod. In addition to confirming the PaymentIntent, this method can automatically create and attach a new PaymentMethod for you. If you have already attached a PaymentMethod you can call this method without needing to provide any additional data. These use cases are detailed in the sections that follow.","metadata":{"source":"StripeAPI.md"}}],["116",{"pageContent":"Method parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent.\n\ndata\noptional\nobject\nData to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n\nHide data properties\npayment_method\nRECOMMENDED\nstring | object\nEither the id of an existing PaymentMethod, or an object containing data to create a PaymentMethod with. See the use case sections below for details.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\nsetup_future_usage\nstring\nTo set up a SEPA Direct Debit payment method using the bank details from this Bancontact payment, set this parameter to off_session. When using this parameter, a customer will need to be set on the PaymentIntent. The newly created SEPA Direct Debit PaymentMethod will be attached to this customer.\n\noptions\noptional\nobject\nAn options object to control the behavior of this method.","metadata":{"source":"StripeAPI.md"}}],["117",{"pageContent":"options\noptional\nobject\nAn options object to control the behavior of this method.\n\nHide options properties\nhandleActions\nboolean\nSet this to false if you want to manually handle the authorization redirect. Default is true.\n\nReturns\nstripe.confirmBancontactPayment will trigger a redirect when successful. If there is an error, it will return a Promise which resolves with a result object. This object has either:\n\nresult.paymentIntent: the successful PaymentIntent.\nresult.error: an error. Refer to the API reference for all possible errors.\nNote that stripe.confirmBancontactPayment may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["118",{"pageContent":"JavaScript\n\nstripe\n  .confirmBancontactPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\nConfirm a Bancontact paymentwith an existing payment method\nUse stripe.confirmBancontactPayment with an existing PaymentMethod by passing its id to payment_method. The PaymentMethod will be used to confirm the PaymentIntent.\n\nData argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.","metadata":{"source":"StripeAPI.md"}}],["119",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\nsetup_future_usage\nstring\nTo set up a SEPA Direct Debit payment method using the bank details from this Bancontact payment, set this parameter to off_session. When using this parameter, a customer will need to be set on the PaymentIntent. The newly created SEPA Direct Debit PaymentMethod will be attached to this customer.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["120",{"pageContent":"JavaScript\n\nstripe\n  .confirmBancontactPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    // Inform the customer that there was an error.\n  });\nConfirm a Bancontact paymentwith collected data\nYour customer's name is required for the Bancontact authorization to succeed. You can pass in the customer’s name directly to create a new PaymentMethod and confirm the PaymentIntent.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm with the customer's name.\n\nHide payment_method properties\nbilling_details\nREQUIRED\nobject\nAn object detailing billing information.\n\nHide billing_details properties\nname\nREQUIRED\nstring\nThe customer's name.\n\nemail\nstring\nThe customer's email. Required when setup_future_usage is set to off_session.","metadata":{"source":"StripeAPI.md"}}],["121",{"pageContent":"Hide billing_details properties\nname\nREQUIRED\nstring\nThe customer's name.\n\nemail\nstring\nThe customer's email. Required when setup_future_usage is set to off_session.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\nsetup_future_usage\nstring\nTo set up a SEPA Direct Debit payment method using the bank details from this Bancontact payment, set this parameter to off_session. When using this parameter, a customer will need to be set on the PaymentIntent. The newly created SEPA Direct Debit PaymentMethod will be attached to this customer.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["122",{"pageContent":"JavaScript\n\nstripe\n  .confirmBancontactPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\nConfirm a Bancontact paymentwith an attached PaymentMethod\nIf you have already attached a PaymentMethod to this PaymentIntent, then you can confirm the PaymentIntent using stripe.confirmBancontactPayment without passing in any additional data.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["123",{"pageContent":"JavaScript\n\nstripe\n  .confirmBancontactPayment('{PAYMENT_INTENT_CLIENT_SECRET}')\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\nstripe.confirmBlikPayment(clientSecret,data,options?)\nUse stripe.confirmBlikPayment in the BLIK Payments with Payment Methods flow when the customer submits your payment form. When called, it will confirm the PaymentIntent with data you provide, and it will automatically prompt the customer to authorize the transaction.\n\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent.\n\ndata\nREQUIRED\nobject\nData to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n\nHide data properties\npayment_method_options\nREQUIRED\nobject\nAn object that contains transaction specific data.\n\nHide payment_method_options properties\ncode\nREQUIRED\nstring\nYour customer's 6-digit BLIK code.","metadata":{"source":"StripeAPI.md"}}],["124",{"pageContent":"Hide payment_method_options properties\ncode\nREQUIRED\nstring\nYour customer's 6-digit BLIK code.\n\npayment_method\nobject\nUse this parameter to supply additional data relevant to the transaction, such as billing details.\n\nHide payment_method properties\nbilling_details\nobject\nThe billing details associated with the transaction.\n\noptions\noptional\nobject\nAn options object to control the behavior of this method.\n\nHide options properties\nhandleActions\nboolean\nSet this to false if you want to manually determine if the confirmation has succeeded or failed.\n\nReturns\nBy default, stripe.confirmBlikPayment will only return when the payment has succeeded or failed. If there is an error, or when handling next actions manually by using the handleActions: false option, it will return a Promise which resolves with a result object. This object has either:","metadata":{"source":"StripeAPI.md"}}],["125",{"pageContent":"result.paymentIntent: the successful PaymentIntent.\nresult.error: an error. Refer to the API reference for all possible errors.\nNote that stripe.confirmBlikPayment may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\nWas this section helpful?YesNo\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["126",{"pageContent":"Was this section helpful?YesNo\n\n\nJavaScript\n\nstripe\n  .confirmBlikPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      blik: {},\n      billing_details: {}\n    },\n    payment_method_options: {\n      blik: {\n        code: '{CODE}'\n      }\n    }\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\nstripe.confirmBoletoPayment(clientSecret,data?,options?)\nUse stripe.confirmBoletoPayment in the Boleto Payment with Payment Methods flow when the customer submits your payment form. When called, it will confirm the PaymentIntent with data you provide. Note that there are some additional requirements to this flow that are not covered in this reference. Refer to our integration guide for more details.","metadata":{"source":"StripeAPI.md"}}],["127",{"pageContent":"When you confirm a PaymentIntent, it needs to have an attached PaymentMethod. In addition to confirming the PaymentIntent, this method can automatically create and attach a new PaymentMethod for you. If you have already attached a PaymentMethod you can call this method without needing to provide any additional data. These use cases are detailed in the sections that follow.\n\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent.\n\ndata\noptional\nobject\nData to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n\nHide data properties\npayment_method\nobject | string\nThe id of an existing PaymentMethod or an object of collected data. See use cases below for details.\n\noptions\noptional\nobject\nAn options object to control the behavior of this method.","metadata":{"source":"StripeAPI.md"}}],["128",{"pageContent":"options\noptional\nobject\nAn options object to control the behavior of this method.\n\nHide options properties\nhandleActions\nREQUIRED\nboolean\nSet to false. The Boleto private beta does not handle the next actions for you automatically (e.g. display Boleto details). Please refer to our Stripe Boleto integration guide for more info.\n\nReturns\nstripe.confirmBoletoPayment will return a Promise which resolves with a result object. This object has either:\n\nresult.paymentIntent: the successful PaymentIntent.\nresult.error: an error. Refer to the API reference for all possible errors.\nNote that stripe.confirmBoletoPayment may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["129",{"pageContent":"JavaScript\n\nstripe.confirmBoletoPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      boleto: {\n        tax_id: '000.000.000-00'\n      },\n      billing_details: {\n        name: 'Fulaninho de Silva',\n        email: 'fulaninho@example.com',\n        address: {\n          line1: '1234 Avenida Paulista',\n          city: 'Sao Paulo',\n          state: 'SP',\n          postal_code: '01310100',\n          country: 'BR',\n        },\n      },\n    },\n  },\n  {\n    handleActions: false,\n  }\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\nConfirm a Boleto paymentwith collected data\nYou can pass in the customer’s billing details to create a new PaymentMethod and confirm the PaymentIntent. To create a Boleto PaymentMethod, you are required to collect and include the customer’s name, email, Brazilian tax id (CPF/CNPJ) and address.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm using data collected.","metadata":{"source":"StripeAPI.md"}}],["130",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm using data collected.\n\nHide payment_method properties\nboleto\nREQUIRED\nObject\nHide boleto properties\ntax_id\nREQUIRED\nstring\nThe customer's Brazilian tax id (CPF/CNPJ).\n\nbilling_details\nREQUIRED\nObject\nThe customer's billing_details. name, email and address.\n\nHide billing_details properties\nname\nREQUIRED\nstring\nThe customer's name. The first and last name must be at minimum 2 characters each.\n\nemail\nREQUIRED\nstring\nThe customer's email.\n\naddress\nREQUIRED\nstring\nThe customer's address: street name, city, state and postal code\n\nHide address properties\nline1\nREQUIRED\nstring\nThe customer's address line 1 (e.g. street or company name).\n\nline2\nstring\nThe customer's address line 2 (e.g. apartment, suite, unit, or building).\n\ncity\nREQUIRED\nstring\nThe customer's address city (e.g. Sao Paulo).\n\nstate\nREQUIRED\nstring\nThe customer's address state (e.g. SP).","metadata":{"source":"StripeAPI.md"}}],["131",{"pageContent":"city\nREQUIRED\nstring\nThe customer's address city (e.g. Sao Paulo).\n\nstate\nREQUIRED\nstring\nThe customer's address state (e.g. SP).\n\npostal_code\nREQUIRED\nstring\nThe customer's CEP (i.e. Brazilian postal code). Must be 8 digits long.\n\ncountry\nREQUIRED\nstring\nMust be BR.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["132",{"pageContent":"postal_code\nREQUIRED\nstring\nThe customer's CEP (i.e. Brazilian postal code). Must be 8 digits long.\n\ncountry\nREQUIRED\nstring\nMust be BR.\n\n\nJavaScript\n\nstripe.confirmBoletoPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      boleto: {\n        tax_id: '000.000.000-00'\n      },\n      billing_details: {\n        name: 'Fulaninho de Silva',\n        email: 'fulaninho@example.com',\n        address: {\n          line1: '1234 Avenida Paulista',\n          city: 'Sao Paulo',\n          state: 'SP',\n          postal_code: '01310100',\n          country: 'BR',\n        },\n      },\n    },\n  },\n  {\n    handleActions: false,\n  }\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\nConfirm a Boleto paymentwith an existing payment method\nIf you have already created a PaymentMethod, you can pass its id to payment_method when calling stripe.confirmBoletoPayment. It will be used to confirm the PaymentIntent.","metadata":{"source":"StripeAPI.md"}}],["133",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\n\nJavaScript\n\nstripe.confirmBoletoPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  },\n  {\n    handleActions: false,\n  }\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\nConfirm a Boleto paymentwith an attached PaymentMethod\nIf you have already attached a PaymentMethod to this PaymentIntent, then you can confirm the PaymentIntent using stripe.confirmBoletoPayment without passing in any additional data.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["134",{"pageContent":"JavaScript\n\nstripe.confirmBoletoPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {},\n  {\n    handleActions: false,\n  }\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\nstripe.confirmCustomerBalancePayment(clientSecret,data?,options?)\nUse stripe.confirmCustomerBalancePayment in the Customer Balance payment flow when the customer submits your payment form. When called, it will confirm the PaymentIntent with data you provide. Refer to our integration guide for more details.\n\nSince the Customer Balance payment method draws from a balance, the attempt will succeed or fail depending on the current balance amount. To collect more funds from the customer when the cash balance is insufficient, use the customer balance with bank transfer funding parameters.\n\nThe confirmation attempt will finish in one of the following result states:","metadata":{"source":"StripeAPI.md"}}],["135",{"pageContent":"The confirmation attempt will finish in one of the following result states:\n\nIf the customer balance is greater than or equal to the amount, the PaymentIntent response will have a status of succeeded. The funding_type will be ignored.\nIf the customer balance is less than the amount, and you do not set the funding_type, the PaymentIntent response will have a status of requires_payment_method.\nIf the customer balance is less than the amount, and you set the funding_type, the PaymentIntent response will have a status of requires_action. The paymentIntent.next_action.display_bank_transfer_instructions hash will contain bank transfer details for funding the Customer Balance.\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent.\n\ndata\noptional\nobject\nData to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n\nHide data properties\npayment_method\nREQUIRED\nobject\nAn object specifying the customer_balance type.","metadata":{"source":"StripeAPI.md"}}],["136",{"pageContent":"Hide data properties\npayment_method\nREQUIRED\nobject\nAn object specifying the customer_balance type.\n\nHide payment_method properties\ncustomer_balance\nREQUIRED\nobject\nSet to {}.\n\npayment_method_options\nobject\nAdditional payment specific configuration options. See the with collected data use case below.\n\noptions\noptional\nobject\nAn options object to control the behavior of this method.\n\nHide options properties\nhandleActions\nREQUIRED\nboolean\nSet to false. The Customer Balance does not handle the next actions for you automatically (e.g. displaying bank transfer details). To make future upgrades easier, this option is required to always be sent. Please refer to our Stripe Customer Balance integration guide for more info.\n\nReturns\nstripe.confirmCustomerBalancePayment will return a Promise which resolves with a result object. This object has either:","metadata":{"source":"StripeAPI.md"}}],["137",{"pageContent":"result.paymentIntent: when the Customer Balance is sufficient to pay the amount, a PaymentIntent with status of succeeded.\nresult.paymentIntent: when the Customer Balance is insufficient to pay the amount, and funding_type data was provided, a PaymentIntent with status of requires_action.\nresult.paymentIntent: when the Customer Balance is insufficient to pay the amount, and no funding_type data was provided, a PaymentIntent with status of requires_payment_method.\nresult.error: an error. Refer to the API reference for all possible errors.\nNote that stripe.confirmCustomerBalancePayment may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["138",{"pageContent":"stripe.confirmCustomerBalancePayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      customer_balance: {},\n    }\n  },\n  {\n    handleActions: false,\n  }\n).then(function({error, paymentIntent}) {\n  if (error) {\n    // Inform the customer that there was an error.\n  } else if (paymentIntent.status === 'requires_payment_method') {\n    // If `payment_method_options.funding_type` wasn't set this\n    // is where you would need to handle the insufficient customer\n    // balance state.\n  } else if (paymentIntent.status === 'requires_action') {\n    // If the current customer balance is insufficient to cover\n    // the amount, and you've passed\n    // `payment_method_options.funding_type` for funding the\n    // customer balance, you can display the bank transfer\n    // instructions to your user.\n    if (paymentIntent.next_action.type === 'display_bank_transfer_instructions') {\n      // Bank transfer details can be found under:\n      // paymentIntent.next_action.display_bank_transfer_instructions\n    }","metadata":{"source":"StripeAPI.md"}}],["139",{"pageContent":"// Bank transfer details can be found under:\n      // paymentIntent.next_action.display_bank_transfer_instructions\n    }\n  }\n});\nConfirm a Customer Balance paymentwith collected data\nYou can pass in the customer’s bank transfer funding details to create a new PaymentMethod and confirm the PaymentIntent.","metadata":{"source":"StripeAPI.md"}}],["140",{"pageContent":"If the Customer Balance was not enough to pay the amount, the status is requires_action. The paymentIntent.next_action.display_bank_transfer_instructions hash contains bank transfer details for funding the Customer Balance.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm using data collected.\n\nHide payment_method properties\ncustomer_balance\nREQUIRED\nobject\nSet to {}.\n\npayment_method_options\nobject\nAdditional payment-specific configuration options.\n\nHide payment_method_options properties\nfunding_type\nstring\nThe funding method type to be used when there are not enough funds in the Customer Balance. Permitted values include: bank_transfer.\n\nbank_transfer\nobject\nThe customer's chosen bank transfer method.\n\nShow bank_transfer properties\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["141",{"pageContent":"stripe.confirmCustomerBalancePayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      customer_balance: {\n      },\n    },\n    payment_method_options: {\n      customer_balance: {\n        funding_type: 'bank_transfer',\n        bank_transfer: {\n          type: 'us_bank_account',\n        },\n      },\n    },\n  },\n  {\n    handleActions: false,\n  }\n).then(function({error, paymentIntent}) {\n  if (error) {\n    // Inform the customer that there was an error.\n  } else if (paymentIntent.status === 'requires_payment_method') {\n    // If `payment_method_options.funding_type` wasn't set this\n    // is where you would need to handle the insufficient customer\n    // balance state.\n  } else if (paymentIntent.status === 'requires_action') {\n    // If the current customer balance is insufficient to cover\n    // the amount, and you've passed\n    // `payment_method_options.funding_type` for funding the\n    // customer balance, you can display the bank transfer\n    // instructions to your user.","metadata":{"source":"StripeAPI.md"}}],["142",{"pageContent":"// the amount, and you've passed\n    // `payment_method_options.funding_type` for funding the\n    // customer balance, you can display the bank transfer\n    // instructions to your user.\n    if (paymentIntent.next_action.type === 'display_bank_transfer_instructions') {\n      // Bank transfer details can be found under:\n      // paymentIntent.next_action.display_bank_transfer_instructions\n    }\n  }\n});\nstripe.confirmEpsPayment(clientSecret,data?,options?)","metadata":{"source":"StripeAPI.md"}}],["143",{"pageContent":"// Bank transfer details can be found under:\n      // paymentIntent.next_action.display_bank_transfer_instructions\n    }\n  }\n});\nstripe.confirmEpsPayment(clientSecret,data?,options?)\nUse stripe.confirmEpsPayment in the EPS Payments with Payment Methods flow when the customer submits your payment form. When called, it will confirm the PaymentIntent with data you provide, and it will automatically redirect the customer to authorize the transaction. Once authorization is complete, the customer will be redirected back to your specified return_url. When you confirm a PaymentIntent, it needs to have an attached PaymentMethod. In addition to confirming the PaymentIntent, this method can automatically create and attach a new PaymentMethod for you. If you have already attached a PaymentMethod you can call this method without needing to provide any additional data. These use cases are detailed in the sections that follow.","metadata":{"source":"StripeAPI.md"}}],["144",{"pageContent":"Method parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent.\n\ndata\noptional\nobject\nData to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n\nHide data properties\npayment_method\nRECOMMENDED\nstring | object\nEither the id of an existing PaymentMethod, or an object containing data to create a PaymentMethod with. See the use case sections below for details.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\noptions\noptional\nobject\nAn options object to control the behavior of this method.\n\nHide options properties\nhandleActions\nboolean\nSet this to false if you want to manually handle the authorization redirect. Default is true.\n\nReturns\nstripe.confirmEpsPayment will trigger a redirect when successful. If there is an error, it will return a Promise which resolves with a result object. This object has either:","metadata":{"source":"StripeAPI.md"}}],["145",{"pageContent":"Returns\nstripe.confirmEpsPayment will trigger a redirect when successful. If there is an error, it will return a Promise which resolves with a result object. This object has either:\n\nresult.paymentIntent: the successful PaymentIntent.\nresult.error: an error. Refer to the API reference for all possible errors.\nNote that stripe.confirmEpsPayment may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["146",{"pageContent":"JavaScript\n\nstripe\n  .confirmEpsPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\nConfirm an EPS paymentwith an existing payment method\nUse stripe.confirmEpsPayment with an existing PaymentMethod by passing its id to payment_method. The PaymentMethod will be used to confirm the PaymentIntent.\n\nData argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["147",{"pageContent":"return_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\n\nJavaScript\n\nstripe\n  .confirmEpsPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    // Inform the customer that there was an error.\n  });\nConfirm an EPS paymentwith collected data\nYour customer's name is required for the EPS authorization to succeed. You can pass in the customer’s name directly to create a new PaymentMethod and confirm the PaymentIntent.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm with the customer's name.\n\nHide payment_method properties\nbilling_details\nREQUIRED\nobject\nAn object detailing billing information.\n\nHide billing_details properties\nname\nREQUIRED\nstring\nThe customer's name.","metadata":{"source":"StripeAPI.md"}}],["148",{"pageContent":"Hide payment_method properties\nbilling_details\nREQUIRED\nobject\nAn object detailing billing information.\n\nHide billing_details properties\nname\nREQUIRED\nstring\nThe customer's name.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\n\nJavaScript\n\nstripe\n  .confirmEpsPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\nConfirm an EPS paymentwith an attached PaymentMethod\nIf you have already attached a PaymentMethod to this PaymentIntent, then you can confirm the PaymentIntent using stripe.confirmEpsPayment without passing in any additional data.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["149",{"pageContent":"JavaScript\n\nstripe\n  .confirmEpsPayment('{PAYMENT_INTENT_CLIENT_SECRET}')\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\nstripe.confirmFpxPayment(clientSecret,data?,options?)\nUse stripe.confirmFpxPayment in the FPX payment method creation flow when the customer submits your payment form. When called, it will confirm the PaymentIntent with data you provide, and it will automatically redirect the customer to authorize the transaction. Once authorization is complete, the customer will be redirected back to your specified return_url.\n\nWhen you confirm a PaymentIntent, it needs to have an attached PaymentMethod. In addition to confirming the PaymentIntent, this method can automatically create and attach a new PaymentMethod for you. If you have already attached a PaymentMethod you can call this method without needing to provide any additional data. These use cases are detailed in the sections that follow.","metadata":{"source":"StripeAPI.md"}}],["150",{"pageContent":"Method parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent.\n\ndata\noptional\nobject\nData to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n\nHide data properties\npayment_method\nRECOMMENDED\nstring | object\nEither the id of an existing PaymentMethod, or an object containing data to create a PaymentMethod with. See the use case sections below for details.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\noptions\noptional\nobject\nAn options object to control the behavior of this method.\n\nHide options properties\nhandleActions\nboolean\nSet this to false if you want to manually handle the authorization redirect. Default is true.","metadata":{"source":"StripeAPI.md"}}],["151",{"pageContent":"Hide options properties\nhandleActions\nboolean\nSet this to false if you want to manually handle the authorization redirect. Default is true.\n\nReturns\nBy default, stripe.confirmFpxPayment will trigger a redirect when successful. If there is an error, or when handling next_actions manually by using the handleActions: false option, it will return a Promise which resolves with a result object. This object has either:\n\nresult.paymentIntent: the successful PaymentIntent.\nresult.error: an error. Refer to the API reference for all possible errors.\nNote that stripe.confirmFpxPayment may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["152",{"pageContent":"JavaScript\n\nstripe.confirmFpxPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      fpx: fpxBankElement\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\nConfirm an FPX paymentwith payment data from an Element\nCreate and attach a new PaymentMethod by passing an fpxBank Element to payment_method[fpx]. The new PaymentMethod will be created with the bank code collected by the Element and will be used to confirm the PaymentIntent.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm using data collected by an fpxBank Element.\n\nHide payment_method properties\nfpx\nRECOMMENDED\nElement\nAn fpxBank Element.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["153",{"pageContent":"Hide payment_method properties\nfpx\nRECOMMENDED\nElement\nAn fpxBank Element.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\n\nJavaScript\n\nstripe.confirmFpxPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      fpx: fpxBankElement\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\nConfirm an FPX paymentwith an existing payment method\nIf you have already created a PaymentMethod, you can pass its id to payment_method and it will be used to confirm the PaymentIntent.\n\nData argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["154",{"pageContent":"return_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\n\nJavaScript\n\nstripe.confirmFpxPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n).then(function(result) {\n  // Inform the customer that there was an error.\n});\nConfirm an FPX paymentwith self collected data\nIf you already know the customer’s bank or want to collect it yourself, then you do not need to use the fpxBank Element. You can pass in the customer’s bank code directly.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm using data collected by an fpxBank Element.\n\nHide payment_method properties\nfpx\nREQUIRED\nobject\nAn object detailing the customer's FPX bank.\n\nHide fpx properties\nbank\nREQUIRED\nstring\nThe customer's bank.","metadata":{"source":"StripeAPI.md"}}],["155",{"pageContent":"Hide payment_method properties\nfpx\nREQUIRED\nobject\nAn object detailing the customer's FPX bank.\n\nHide fpx properties\nbank\nREQUIRED\nstring\nThe customer's bank.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\n\nJavaScript\n\nstripe\n  .confirmFpxPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      fpx: {\n        bank: 'ambank',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\nConfirm an FPX paymentwith an attached PaymentMethod\nIf you have already attached a return_url and a PaymentMethod to this PaymentIntent, then you can confirm the PaymentIntent using stripe.confirmFpxPayment without passing in any additional data.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["156",{"pageContent":"JavaScript\n\nstripe.confirmFpxPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}'\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\nstripe.confirmGiropayPayment(clientSecret,data?,options?)\nUse stripe.confirmGiropayPayment in the giropay Payments with Payment Methods flow when the customer submits your payment form. When called, it will confirm the PaymentIntent with data you provide, and it will automatically redirect the customer to authorize the transaction. Once authorization is complete, the customer will be redirected back to your specified return_url. When you confirm a PaymentIntent, it needs to have an attached PaymentMethod. In addition to confirming the PaymentIntent, this method can automatically create and attach a new PaymentMethod for you. If you have already attached a PaymentMethod you can call this method without needing to provide any additional data. These use cases are detailed in the sections that follow.","metadata":{"source":"StripeAPI.md"}}],["157",{"pageContent":"Method parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent.\n\ndata\noptional\nobject\nData to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n\nHide data properties\npayment_method\nRECOMMENDED\nstring | object\nEither the id of an existing PaymentMethod, or an object containing data to create a PaymentMethod with. See the use case sections below for details.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\noptions\noptional\nobject\nAn options object to control the behavior of this method.\n\nHide options properties\nhandleActions\nboolean\nSet this to false if you want to manually handle the authorization redirect. Default is true.\n\nReturns\nstripe.confirmGiropayPayment will trigger a redirect when successful. If there is an error, it will return a Promise which resolves with a result object. This object has either:","metadata":{"source":"StripeAPI.md"}}],["158",{"pageContent":"Returns\nstripe.confirmGiropayPayment will trigger a redirect when successful. If there is an error, it will return a Promise which resolves with a result object. This object has either:\n\nresult.paymentIntent: the successful PaymentIntent.\nresult.error: an error. Refer to the API reference for all possible errors.\nNote that stripe.confirmGiropayPayment may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["159",{"pageContent":"JavaScript\n\nstripe\n  .confirmGiropayPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\nConfirm a giropay paymentwith an existing payment method\nUse stripe.confirmGiropayPayment with an existing PaymentMethod by passing its id to payment_method. The PaymentMethod will be used to confirm the PaymentIntent.\n\nData argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["160",{"pageContent":"return_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\n\nJavaScript\n\nstripe\n  .confirmGiropayPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    // Inform the customer that there was an error.\n  });\nConfirm a giropay paymentwith collected data\nYour customer's name is required for the giropay authorization to succeed. You can pass in the customer’s name directly to create a new PaymentMethod and confirm the PaymentIntent.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm with the customer's name.\n\nHide payment_method properties\nbilling_details\nREQUIRED\nobject\nAn object detailing billing information.\n\nHide billing_details properties\nname\nREQUIRED\nstring\nThe customer's name.","metadata":{"source":"StripeAPI.md"}}],["161",{"pageContent":"Hide payment_method properties\nbilling_details\nREQUIRED\nobject\nAn object detailing billing information.\n\nHide billing_details properties\nname\nREQUIRED\nstring\nThe customer's name.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\n\nJavaScript\n\nstripe\n  .confirmGiropayPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\nConfirm a giropay paymentwith an attached PaymentMethod\nIf you have already attached a PaymentMethod to this PaymentIntent, then you can confirm the PaymentIntent using stripe.confirmGiropayPayment without passing in any additional data.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["162",{"pageContent":"JavaScript\n\nstripe\n  .confirmGiropayPayment('{PAYMENT_INTENT_CLIENT_SECRET}')\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\nstripe.confirmGrabPayPayment(clientSecret,data?,options?)\nUse stripe.confirmGrabPayPayment in the GrabPay payments with Payment Methods flow when the customer submits your payment form. When called, it will confirm the PaymentIntent, and automatically redirect the customer to authorize the transaction. Once authorization is complete, the customer will be redirected back to your specified return_url.\n\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent.\n\ndata\noptional\nobject\nData to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n\nHide data properties\npayment_method\nstring | object\nEither the id of an existing PaymentMethod, or an object containing data to create a PaymentMethod with. See the use case sections below for details.","metadata":{"source":"StripeAPI.md"}}],["163",{"pageContent":"return_url\nREQUIRED\nstring\nThe URL your customer will be directed to after they complete authentication.\n\noptions\noptional\nobject\nAn options object to control the behavior of this method.\n\nHide options properties\nhandleActions\nboolean\nSet this to false if you want to manually handle the authorization redirect. Default is true.\n\nReturns\nBy default, stripe.confirmGrabPayPayment will trigger a redirect when successful. If there is an error, or when handling next actions manually by using the handleActions: false option, it will return a Promise which resolves with a result object. This object has either:","metadata":{"source":"StripeAPI.md"}}],["164",{"pageContent":"result.paymentIntent: the successful PaymentIntent.\nresult.error: an error. Refer to the API reference for all possible errors.\nNote that stripe.confirmGrabPayPayment may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["165",{"pageContent":"JavaScript\n\nstripe\n  .confirmGrabPayPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    // Return URL where the customer should be redirected after\n    // the authorization.\n    return_url: \"https://example.com/checkout/complete\",\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\nConfirm a GrabPay paymentwith a new PaymentMethod\nYou can confirm the PaymentIntent using stripe.confirmGrabPayPayment without passing in any additional data. This will automatically create and attach a new PaymentMethod.\n\nData argument properties\nreturn_url\nREQUIRED\nstring\nThe URL your customer will be directed to after they complete authentication.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["166",{"pageContent":"Data argument properties\nreturn_url\nREQUIRED\nstring\nThe URL your customer will be directed to after they complete authentication.\n\n\nJavaScript\n\nstripe\n  .confirmGrabPayPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    // Return URL where the customer should be redirected after\n    // the authorization.\n    return_url: \"https://example.com/checkout/complete\",\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\nConfirm a GrabPay paymentwith an existing PaymentMethod\nUse stripe.confirmGrabPayPayment with an existing PaymentMethod by passing its id to payment_method. The PaymentMethod will be used to confirm the PaymentIntent.\n\nData argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\nreturn_url\nREQUIRED\nstring\nThe URL your customer will be directed to after they complete authentication.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["167",{"pageContent":"return_url\nREQUIRED\nstring\nThe URL your customer will be directed to after they complete authentication.\n\n\nJavaScript\n\nstripe\n  .confirmGrabPayPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after\n    // the authorization.\n    return_url: \"https://example.com/checkout/complete\",\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\nConfirm a GrabPay paymentwith an attached PaymentMethod\nIf you have already attached a PaymentMethod to this PaymentIntent, you can then confirm the PaymentIntent using stripe.confirmGrabPayPayment without passing in any additional data.\n\nData argument properties\nreturn_url\nREQUIRED\nstring\nThe URL your customer will be directed to after they complete authentication.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["168",{"pageContent":"Data argument properties\nreturn_url\nREQUIRED\nstring\nThe URL your customer will be directed to after they complete authentication.\n\n\nJavaScript\n\nstripe\n  .confirmGrabPayPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    // Return URL where the customer should be redirected after\n    // the authorization.\n    return_url: \"https://example.com/checkout/complete\",\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\nstripe.confirmIdealPayment(clientSecret,data?,options?)\nUse stripe.confirmIdealPayment in the iDEAL Payments with Payment Methods flow when the customer submits your payment form. When called, it will confirm the PaymentIntent with data you provide, and it will automatically redirect the customer to authorize the transaction. Once authorization is complete, the customer will be redirected back to your specified return_url.","metadata":{"source":"StripeAPI.md"}}],["169",{"pageContent":"When you confirm a PaymentIntent, it needs to have an attached PaymentMethod. In addition to confirming the PaymentIntent, this method can automatically create and attach a new PaymentMethod for you. If you have already attached a PaymentMethod you can call this method without needing to provide any additional data. These use cases are detailed in the sections that follow.\n\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent.\n\ndata\noptional\nobject\nData to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n\nHide data properties\npayment_method\nRECOMMENDED\nstring | object\nEither the id of an existing PaymentMethod, or an object containing data to create a PaymentMethod with. See the use case sections below for details.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.","metadata":{"source":"StripeAPI.md"}}],["170",{"pageContent":"return_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\nsetup_future_usage\nstring\nTo set up a SEPA Direct Debit payment method using the bank details from this iDEAL payment, set this parameter to off_session. When using this parameter, a customer will need to be set on the PaymentIntent. The newly created SEPA Direct Debit PaymentMethod will be attached to this customer.\n\noptions\noptional\nobject\nAn options object to control the behavior of this method.\n\nHide options properties\nhandleActions\nboolean\nSet this to false if you want to manually handle the authorization redirect. Default is true.\n\nReturns\nBy default, stripe.confirmIdealPayment will trigger a redirect when successful. If there is an error, or when handling next actions manually by using the handleActions: false option, it will return a Promise which resolves with a result object. This object has either:","metadata":{"source":"StripeAPI.md"}}],["171",{"pageContent":"result.paymentIntent: the successful PaymentIntent.\nresult.error: an error. Refer to the API reference for all possible errors.\nNote that stripe.confirmIdealPayment may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["172",{"pageContent":"JavaScript\n\nstripe\n  .confirmIdealPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      ideal: idealBankElement,\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\nConfirm an iDEAL paymentwith payment data from an Element\nCreate and attach a new PaymentMethod with stripe.confirmIdealPayment by passing an idealBank Element to payment_method[ideal]. The new PaymentMethod will be created with the bank code collected by the Element and will be used to confirm the PaymentIntent.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm using data collected by an idealBank Element.\n\nHide payment_method properties\nideal\nRECOMMENDED\nElement\nAn idealBank Element.","metadata":{"source":"StripeAPI.md"}}],["173",{"pageContent":"Hide payment_method properties\nideal\nRECOMMENDED\nElement\nAn idealBank Element.\n\nbilling_details\nobject\nThe customer's billing_details. Required when setup_future_usage is set to off_session.\n\nShow billing_details properties\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\nsetup_future_usage\nstring\nTo set up a SEPA Direct Debit payment method using the bank details from this iDEAL payment, set this parameter to off_session. When using this parameter, a customer will need to be set on the PaymentIntent. The newly created SEPA Direct Debit PaymentMethod will be attached to this customer.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["174",{"pageContent":"JavaScript\n\nstripe\n  .confirmIdealPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      ideal: idealBankElement,\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\nConfirm an iDEAL paymentwith an existing payment method\nUse stripe.confirmIdealPayment with an existing PaymentMethod by passing its id to payment_method. The PaymentMethod will be used to confirm the PaymentIntent.\n\nData argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.","metadata":{"source":"StripeAPI.md"}}],["175",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\nsetup_future_usage\nstring\nTo set up a SEPA Direct Debit payment method using the bank details from this iDEAL payment, set this parameter to off_session. When using this parameter, a customer will need to be set on the PaymentIntent. The newly created SEPA Direct Debit PaymentMethod will be attached to this customer.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["176",{"pageContent":"JavaScript\n\nstripe\n  .confirmIdealPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    // Inform the customer that there was an error.\n  });\nConfirm an iDEAL paymentwith self collected data\nIf you already know the customer’s bank or want to collect it yourself, then you do not need to use the idealBank Element. You can pass in the customer’s bank code directly to create a new PaymentMethod and confirm the PaymentIntent.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm using data collected by an idealBank Element.\n\nHide payment_method properties\nideal\nREQUIRED\nobject\nAn object detailing the customer's iDEAL bank.\n\nHide ideal properties\nbank\nREQUIRED\nstring\nThe customer's bank.","metadata":{"source":"StripeAPI.md"}}],["177",{"pageContent":"Hide payment_method properties\nideal\nREQUIRED\nobject\nAn object detailing the customer's iDEAL bank.\n\nHide ideal properties\nbank\nREQUIRED\nstring\nThe customer's bank.\n\nbilling_details\nobject\nThe customer's billing_details. Required when setup_future_usage is set to off_session.\n\nShow billing_details properties\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\nsetup_future_usage\nstring\nTo set up a SEPA Direct Debit payment method using the bank details from this iDEAL payment, set this parameter to off_session. When using this parameter, a customer will need to be set on the PaymentIntent. The newly created SEPA Direct Debit PaymentMethod will be attached to this customer.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["178",{"pageContent":"JavaScript\n\nstripe\n  .confirmIdealPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      ideal: {\n        bank: 'abn_amro',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\nConfirm an iDEAL paymentwith an attached PaymentMethod\nIf you have already attached a PaymentMethod to this PaymentIntent, then you can confirm the PaymentIntent using stripe.confirmIdealPayment without passing in any additional data.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["179",{"pageContent":"JavaScript\n\nstripe\n  .confirmIdealPayment('{PAYMENT_INTENT_CLIENT_SECRET}')\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\nstripe.confirmKlarnaPayment(clientSecret,data?,options?)\nUse stripe.confirmKlarnaPayment in the Klarna payment method creation flow when the customer submits your payment form. When called, it will confirm the PaymentIntent with data you provide, and it will automatically redirect the customer to authorize the transaction. Once authorization is complete, the customer will be redirected back to your specified return_url.\n\nWhen you confirm a PaymentIntent, it needs to have an attached PaymentMethod. In addition to confirming the PaymentIntent, this method can automatically create and attach a new PaymentMethod for you. If you have already attached a PaymentMethod you can call this method without needing to provide any additional data. These use cases are detailed in the sections that follow.","metadata":{"source":"StripeAPI.md"}}],["180",{"pageContent":"Method parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent.\n\ndata\noptional\nobject\nData to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n\nHide data properties\npayment_method\nRECOMMENDED\nstring | object\nEither the id of an existing PaymentMethod, or an object containing data to create a PaymentMethod with. See the use case sections below for details.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\noptions\noptional\nobject\nAn options object to control the behavior of this method.\n\nHide options properties\nhandleActions\nboolean\nSet this to false if you want to manually handle the authorization redirect. Default is true.","metadata":{"source":"StripeAPI.md"}}],["181",{"pageContent":"Hide options properties\nhandleActions\nboolean\nSet this to false if you want to manually handle the authorization redirect. Default is true.\n\nReturns\nBy default, stripe.confirmKlarnaPayment will trigger a redirect when successful. If there is an error, or when handling next_actions manually by using the handleActions: false option, it will return a Promise which resolves with a result object. This object has either:\n\nresult.paymentIntent: the successful PaymentIntent.\nresult.error: an error. Refer to the API reference for all possible errors.\nNote that stripe.confirmKlarnaPayment may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["182",{"pageContent":"JavaScript\n\nstripe.confirmKlarnaPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}'\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\nConfirm a Klarna paymentWithout an existing payment method\nIf you have not already created a PaymentMethod, the newly created PaymentMethod will be used to confirm the PaymentIntent.\n\nData argument properties\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["183",{"pageContent":"Data argument properties\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\n\nJavaScript\n\nstripe.confirmKlarnaPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        address: {\n          country: 'DE',\n        },\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\nConfirm a Klarna paymentWith an existing payment method\nIf you have already created a PaymentMethod, you can pass its id to payment_method and it will be used to confirm the PaymentIntent.\n\nData argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["184",{"pageContent":"return_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\n\nJavaScript\n\nstripe.confirmKlarnaPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n).then(function(result) {\n  // Inform the customer that there was an error.\n});\nConfirm a Klarna paymentWith an attached PaymentMethod\nIf you have already attached a return_url and a PaymentMethod to this PaymentIntent, then you can confirm without passing in any additional data.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["185",{"pageContent":"JavaScript\n\nstripe.confirmKlarnaPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}'\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\nstripe.confirmKonbiniPayment(clientSecret,data?,options?)\nUse stripe.confirmKonbiniPayment in the Konbini payment flow when the customer submits your payment form. When called, it will confirm the PaymentIntent with data you provide. Note that there are some additional requirements to this flow that are not covered in this reference. Refer to our integration guide for more details.\n\nWhen you confirm a PaymentIntent, it needs to have an attached PaymentMethod. In addition to confirming the PaymentIntent, this method can automatically create and attach a new PaymentMethod for you. If you have already attached a PaymentMethod you can call this method without needing to provide any additional data. These use cases are detailed in the sections that follow.","metadata":{"source":"StripeAPI.md"}}],["186",{"pageContent":"Method parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent.\n\ndata\noptional\nobject\nData to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n\nHide data properties\npayment_method\nobject | string\nEither the id of an existing PaymentMethod, or an object containing data to create a PaymentMethod with. See the use case sections below for details.\n\npayment_method_options\nObject\nAn object containing payment-method-specific configuration to confirm the PaymentIntent with.\n\nShow payment_method_options properties\noptions\noptional\nobject\nAn options object to control the behavior of this method.\n\nHide options properties\nhandleActions\nboolean\nSet this to false if you want to handle next actions yourself. Please refer to our integration guide for more info. Default is true.\n\nReturns\nstripe.confirmKonbiniPayment will return a Promise which resolves with a result object. This object has either:","metadata":{"source":"StripeAPI.md"}}],["187",{"pageContent":"Returns\nstripe.confirmKonbiniPayment will return a Promise which resolves with a result object. This object has either:\n\nresult.paymentIntent: the successful PaymentIntent.\nresult.error: an error. Refer to the API reference for all possible errors.\nNote that stripe.confirmKonbiniPayment may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["188",{"pageContent":"JavaScript\n\nstripe.confirmKonbiniPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: '花子山田',\n        email: 'yamada.hanako@example.com',\n      },\n    },\n    payment_method_options: {\n      konbini: {\n        confirmation_number: '08012341234',\n      },\n    },\n  }\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\nConfirm a Konbini paymentwith collected data\nYou can pass in the customer’s billing details to create a new PaymentMethod and confirm the PaymentIntent. To create a Konbini PaymentMethod, you are required to collect and include the customer’s name and email.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm using data collected.\n\nHide payment_method properties\nbilling_details\nREQUIRED\nObject\nThe customer's billing_details.\n\nHide billing_details properties\nname\nREQUIRED\nstring\nThe customer's full name.\n\nemail\nREQUIRED\nstring\nThe customer's email address.","metadata":{"source":"StripeAPI.md"}}],["189",{"pageContent":"Hide billing_details properties\nname\nREQUIRED\nstring\nThe customer's full name.\n\nemail\nREQUIRED\nstring\nThe customer's email address.\n\npayment_method_options\nObject\nAn object containing payment-method-specific configuration to confirm the PaymentIntent with.\n\nShow payment_method_options properties\n\nJavaScript\n\nstripe.confirmKonbiniPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: '花子山田',\n        email: 'yamada.hanako@example.com',\n      },\n    },\n    payment_method_options: {\n      konbini: {\n        confirmation_number: '08012341234',\n      },\n    },\n  }\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\nConfirm a Konbini paymentwith an existing payment method\nIf you have already created a PaymentMethod, you can pass its id to payment_method when calling stripe.confirmKonbiniPayment. It will be used to confirm the PaymentIntent.","metadata":{"source":"StripeAPI.md"}}],["190",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\npayment_method_options\nObject\nAn object containing payment-method-specific configuration to confirm the PaymentIntent with.\n\nShow payment_method_options properties\n\nJavaScript\n\nstripe.confirmKonbiniPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    payment_method_options: {\n      konbini: {\n        confirmation_number: '08012341234',\n      },\n    },\n  },\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\nConfirm a Konbini paymentwith an attached PaymentMethod\nIf you have already attached a PaymentMethod to this PaymentIntent, then you can confirm the PaymentIntent using stripe.confirmKonbiniPayment without passing in any additional data.\n\nData argument properties\npayment_method_options\nObject\nAn object containing payment-method-specific configuration to confirm the PaymentIntent with.\n\nShow payment_method_options properties","metadata":{"source":"StripeAPI.md"}}],["191",{"pageContent":"Data argument properties\npayment_method_options\nObject\nAn object containing payment-method-specific configuration to confirm the PaymentIntent with.\n\nShow payment_method_options properties\n\nJavaScript\n\nstripe.confirmKonbiniPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method_options: {\n      konbini: {\n        confirmation_number: '08012341234',\n      },\n    },\n  }\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\nstripe.confirmOxxoPayment(clientSecret,data?,options?)\nUse stripe.confirmOxxoPayment in the OXXO Payment with Payment Methods flow when the customer submits your payment form. When called, it will confirm the PaymentIntent with data you provide. Note that there are some additional requirements to this flow that are not covered in this reference. Refer to our integration guide for more details.","metadata":{"source":"StripeAPI.md"}}],["192",{"pageContent":"When you confirm a PaymentIntent, it needs to have an attached PaymentMethod. In addition to confirming the PaymentIntent, this method can automatically create and attach a new PaymentMethod for you. If you have already attached a PaymentMethod you can call this method without needing to provide any additional data. These use cases are detailed in the sections that follow.\n\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent.\n\ndata\noptional\nobject\nData to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n\nHide data properties\npayment_method\nobject | string\nThe id of an existing PaymentMethod or an object of collected data. See use cases below for details.\n\noptions\noptional\nobject\nAn options object to control the behavior of this method.","metadata":{"source":"StripeAPI.md"}}],["193",{"pageContent":"options\noptional\nobject\nAn options object to control the behavior of this method.\n\nHide options properties\nhandleActions\nboolean\nSet this to false if you want to handle next actions yourself. Please refer to our Stripe OXXO integration guide for more info. Default is true.\n\nReturns\nstripe.confirmOxxoPayment will return a Promise which resolves with a result object. This object has either:\n\nresult.paymentIntent: the successful PaymentIntent.\nresult.error: an error. Refer to the API reference for all possible errors.\nNote that stripe.confirmOxxoPayment may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.","metadata":{"source":"StripeAPI.md"}}],["194",{"pageContent":"Additionally, stripe.confirmOxxoPayment will pop up a modal with the voucher. This modal contains all the information required to pay the voucher at OXXO stores, such as the amount, a reference number and corresponding barcode.\n\n\nJavaScript\n\nstripe.confirmOxxoPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Fulano de Tal',\n        email: 'fulano@example.com',\n      },\n    },\n  }\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\nConfirm an Oxxo paymentwith collected data\nYou can pass in the customer’s billing details to create a new PaymentMethod and confirm the PaymentIntent. To create a OXXO PaymentMethod, you are required to collect and include the customer’s name and email address.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm using data collected.","metadata":{"source":"StripeAPI.md"}}],["195",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm using data collected.\n\nHide payment_method properties\nbilling_details\nREQUIRED\nObject\nThe customer's billing_details. name and email are required.\n\nHide billing_details properties\nname\nREQUIRED\nstring\nThe customer's name. The first and last name must be at minimum 2 characters each.\n\nemail\nREQUIRED\nstring\nThe customer's email.\n\n\nJavaScript\n\nstripe.confirmOxxoPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Fulano de Tal',\n        email: 'fulano@example.com',\n      },\n    },\n  }\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\nConfirm an Oxxo paymentwith an existing payment method\nIf you have already created a PaymentMethod, you can pass its id to payment_method when calling stripe.confirmOxxoPayment. It will be used to confirm the PaymentIntent.","metadata":{"source":"StripeAPI.md"}}],["196",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\n\nJavaScript\n\nstripe.confirmOxxoPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  }\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\nConfirm an Oxxo paymentwith an attached PaymentMethod\nIf you have already attached a PaymentMethod to this PaymentIntent, then you can confirm the PaymentIntent using stripe.confirmOxxoPayment without passing in any additional data.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["197",{"pageContent":"JavaScript\n\nstripe.confirmOxxoPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {}\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\nstripe.confirmP24Payment(clientSecret,data?,options?)\nUse stripe.confirmP24Payment in the Przelewy24 Payments with Payment Methods flow when the customer submits your payment form. When called, it will confirm the PaymentIntent with data you provide, and it will automatically redirect the customer to authorize the transaction. Once authorization is complete, the customer will be redirected back to your specified return_url.\n\nWhen you confirm a PaymentIntent, it needs to have an attached PaymentMethod. In addition to confirming the PaymentIntent, this method can automatically create and attach a new PaymentMethod for you. If you have already attached a PaymentMethod you can call this method without needing to provide any additional data. These use cases are detailed in the sections that follow.","metadata":{"source":"StripeAPI.md"}}],["198",{"pageContent":"Method parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent.\n\ndata\noptional\nobject\nData to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n\nHide data properties\npayment_method\nRECOMMENDED\nstring | object\nEither the id of an existing PaymentMethod, or an object containing data to create a PaymentMethod with. See the use case sections below for details.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\noptions\noptional\nobject\nAn options object to control the behavior of this method.\n\nHide options properties\nhandleActions\nboolean\nSet this to false if you want to manually handle the authorization redirect. Default is true.\n\nReturns\nstripe.confirmP24Payment will trigger a redirect when successful. If there is an error, it will return a Promise which resolves with a result object. This object has either:","metadata":{"source":"StripeAPI.md"}}],["199",{"pageContent":"Returns\nstripe.confirmP24Payment will trigger a redirect when successful. If there is an error, it will return a Promise which resolves with a result object. This object has either:\n\nresult.paymentIntent: the successful PaymentIntent.\nresult.error: an error. Refer to the API reference for all possible errors.\nNote that stripe.confirmP24Payment may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["200",{"pageContent":"JavaScript\n\nstripe\n  .confirmP24Payment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      billing_details: {\n        email: 'jenny.rosen@example.com',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\nConfirm a Przelewy24 paymentwith an existing payment method\nUse stripe.confirmP24Payment with an existing PaymentMethod by passing its id to payment_method. The PaymentMethod will be used to confirm the PaymentIntent.\n\nData argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["201",{"pageContent":"return_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\n\nJavaScript\n\nstripe\n  .confirmP24Payment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    // Inform the customer that there was an error.\n  });\nConfirm a Przelewy24 paymentwith collected data\nYour customer's email address is required for the Przelewy24 authorization to succeed. You can pass in the customer’s email address directly to create a new PaymentMethod and confirm the PaymentIntent.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm with the customer's email address.\n\nHide payment_method properties\nbilling_details\nREQUIRED\nobject\nAn object detailing billing information.\n\nHide billing_details properties\nemail\nREQUIRED\nstring\nThe customer's email address.","metadata":{"source":"StripeAPI.md"}}],["202",{"pageContent":"Hide payment_method properties\nbilling_details\nREQUIRED\nobject\nAn object detailing billing information.\n\nHide billing_details properties\nemail\nREQUIRED\nstring\nThe customer's email address.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\n\nJavaScript\n\nstripe\n  .confirmP24Payment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      billing_details: {\n        email: 'jenny.rosen@example.com',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\nConfirm a Przelewy24 paymentwith an attached PaymentMethod\nIf you have already attached a PaymentMethod to this PaymentIntent, then you can confirm the PaymentIntent using stripe.confirmP24Payment without passing in any additional data.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["203",{"pageContent":"JavaScript\n\nstripe\n  .confirmP24Payment('{PAYMENT_INTENT_CLIENT_SECRET}')\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\nstripe.confirmPayNowPayment(clientSecret,data?,options?)\nUse stripe.confirmPayNowPayment in the PayNow payment method creation flow when the customer submits your payment form. When called, it will confirm the PaymentIntent with data you provide and handle the NextAction for the customer to authorize the payment. When you confirm a PaymentIntent, it needs to have an attached PaymentMethod. In addition to confirming the PaymentIntent, this method can automatically create and attach a new PaymentMethod for you. If you have already attached a PaymentMethod you can call this method without needing to provide any additional data. These use cases are detailed in the sections that follow.\n\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent.","metadata":{"source":"StripeAPI.md"}}],["204",{"pageContent":"Method parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent.\n\ndata\noptional\nobject\nData to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n\nHide data properties\npayment_method\nRECOMMENDED\nstring | object\nEither the id of an existing PaymentMethod, or an object containing data to create a PaymentMethod with. See the use case sections below for details.\n\noptions\noptional\nobject\nAn options object to control the behavior of this method.\n\nHide options properties\nhandleActions\nboolean\nDefault is true. Set this to false if you would like to handle displaying the PayNow QR code yourself.\n\nReturns\nBy default, stripe.confirmPayNowPayment will display the PayNow QR code overlay. If there is an error, or when handling next actions manually by using the handleActions: false option, it will return a Promise which resolves with a result object. This object has either:","metadata":{"source":"StripeAPI.md"}}],["205",{"pageContent":"result.paymentIntent: the successful PaymentIntent.\nresult.error: an error. Refer to the API reference for all possible errors.\nNote that stripe.confirmPayNowPayment may take several seconds to complete and display the QR code. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["206",{"pageContent":"JavaScript\n\nstripe.confirmPayNowPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {}\n).then(function({error, paymentIntent}) {\n  if (error) {\n    // Inform the customer that there was an error.\n  } else if (paymentIntent.status === 'succeeded') {\n    // Inform the customer that the payment was successful\n  } else if (paymentIntent.status === 'requires_action') {\n    // Inform the customer that the payment did not go through\n  }\n});\nConfirm a PayNow paymentWithout an existing payment method\nIf you have not already created a PaymentMethod, you can pass payment method parameters, and the newly created PaymentMethod will be used to confirm the PaymentIntent.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass payment method billing details.\n\nHide payment_method properties\nbilling_details\nRECOMMENDED\nobject\nThe billing_details associated with the payment method.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["207",{"pageContent":"Hide payment_method properties\nbilling_details\nRECOMMENDED\nobject\nThe billing_details associated with the payment method.\n\n\nJavaScript\n\nstripe.confirmPayNowPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: '{NAME}',\n        email: '{EMAIL}'\n      },\n    },\n  }\n).then(function({error, paymentIntent}) {\n  if (error) {\n    // Inform the customer that there was an error.\n  } else if (paymentIntent.status === 'succeeded') {\n    // Inform the customer that the payment was successful\n  } else if (paymentIntent.status === 'requires_action') {\n    // Inform the customer that the payment did not go through\n  }\n});\nConfirm a PayNow paymentWith an existing payment method\nIf you have already created a PaymentMethod, you can pass its id to payment_method and it will be used to confirm the PaymentIntent.\n\nData argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["208",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\n\nJavaScript\n\nstripe.confirmPayNowPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  }\n).then(function({error, paymentIntent}) {\n  if (error) {\n    // Inform the customer that there was an error.\n  } else if (paymentIntent.status === 'succeeded') {\n    // Inform the customer that the payment was successful\n  } else if (paymentIntent.status === 'requires_action') {\n    // Inform the customer that the payment did not go through\n  }\n});\nConfirm a PayNow paymentWith an attached PaymentMethod\nIf you have already attached a PaymentMethod to this PaymentIntent, then you can confirm without passing in any additional data.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["209",{"pageContent":"JavaScript\n\nstripe.confirmPayNowPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {}\n).then(function({error, paymentIntent}) {\n  if (error) {\n    // Inform the customer that there was an error.\n  } else if (paymentIntent.status === 'succeeded') {\n    // Inform the customer that the payment was successful\n  } else if (paymentIntent.status === 'requires_action') {\n    // Inform the customer that the payment did not go through\n  }\n});\nstripe.confirmPixPayment(clientSecret,data?,options?)\nUse stripe.confirmPixPayment in the Pix Payment with Payment Methods flow when the customer submits your payment form. When called, it will confirm the PaymentIntent with data you provide. Note that there are some additional requirements to this flow that are not covered in this reference. Refer to our integration guide for more details.","metadata":{"source":"StripeAPI.md"}}],["210",{"pageContent":"When you confirm a PaymentIntent, it needs to have an attached PaymentMethod. In addition to confirming the PaymentIntent, this method can automatically create and attach a new PaymentMethod for you. If you have already attached a PaymentMethod you can call this method without needing to provide any additional data. These use cases are detailed in the sections that follow.\n\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent.\n\ndata\noptional\nobject\nData to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n\nHide data properties\npayment_method\nstring | object\nEither the id of an existing PaymentMethod, or an object containing data to create a PaymentMethod with. See the use case sections below for details.\n\noptions\noptional\nobject\nAn options object to control the behavior of this method.","metadata":{"source":"StripeAPI.md"}}],["211",{"pageContent":"options\noptional\nobject\nAn options object to control the behavior of this method.\n\nHide options properties\nhandleActions\nboolean\nDefault to be true. Set this to false if you would like to handle displaying the Pix QR code yourself.\n\nReturns\nBy default, stripe.confirmPixPayment will display the Pix QR code overlay. If there is an error, or when handling next actions manually by using the handleActions: false option, it will return a Promise which resolves with a result object. This object has either:\n\nresult.paymentIntent: the successful PaymentIntent.\nresult.error: an error. Refer to the API reference for all possible errors.\nNote that stripe.confirmPixPayment may take several seconds to complete and display the QR code. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["212",{"pageContent":"JavaScript\n\nstripe.confirmPixPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {}\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\nConfirm a Pix paymentwithout an existing payment method\nIf you have not already created a PaymentMethod, you can pass payment method parameters, and the newly created PaymentMethod will be used to confirm the PaymentIntent.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass payment method paramters or and empty payment method object.\n\n\nJavaScript\n\nstripe.confirmPixPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {},\n  }\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\nConfirm a Pix paymentwith an existing payment method\nIf you have already created a PaymentMethod, you can pass its id to payment_method and it will be used to confirm the PaymentIntent.\n\nData argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["213",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\n\nJavaScript\n\nstripe.confirmPixPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  }\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\nConfirm a Pix paymentwith an attached PaymentMethod\nIf you have already attached a PaymentMethod to this PaymentIntent, then you can confirm without passing in any additional data.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["214",{"pageContent":"JavaScript\n\nstripe.confirmPixPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {}\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\nstripe.confirmPromptPayPayment(clientSecret,data?,options?)\nUse stripe.confirmPromptPayPayment in the PromptPay payment method creation flow when the customer submits your payment form. When called, it will confirm the PaymentIntent with data you provide and handle the NextAction for the customer to authorize the payment. When you confirm a PaymentIntent, it needs to have an attached PaymentMethod. In addition to confirming the PaymentIntent, this method can automatically create and attach a new PaymentMethod for you. If you have already attached a PaymentMethod you can call this method without needing to provide any additional data. These use cases are detailed in the sections that follow.\n\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent.","metadata":{"source":"StripeAPI.md"}}],["215",{"pageContent":"Method parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent.\n\ndata\noptional\nobject\nData to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n\nHide data properties\npayment_method\nRECOMMENDED\nstring | object\nEither the id of an existing PaymentMethod, or an object containing data to create a PaymentMethod with. See the use case sections below for details.\n\noptions\noptional\nobject\nAn options object to control the behavior of this method.\n\nHide options properties\nhandleActions\nboolean\nDefault to be true. Set this to false if you would like to handle displaying the PromptPay QR code yourself.\n\nReturns\nBy default, stripe.confirmPromptPayPayment will display the PromptPay QR code overlay. If there is an error, or when handling next actions manually by using the handleActions: false option, it will return a Promise which resolves with a result object. This object has either:","metadata":{"source":"StripeAPI.md"}}],["216",{"pageContent":"result.paymentIntent: the successful PaymentIntent.\nresult.error: an error. Refer to the API reference for all possible errors.\nNote that stripe.confirmPromptPayPayment may take several seconds to complete and display the QR code. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["217",{"pageContent":"JavaScript\n\nstripe.confirmPromptPayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {}\n).then(function({error, paymentIntent}) {\n  if (error) {\n    // Inform the customer that there was an error.\n  } else if (paymentIntent.status === 'succeeded') {\n    // Inform the customer that the payment was successful\n  } else if (paymentIntent.status === 'requires_action') {\n    // Inform the customer that the payment did not go through\n  }\n});\nConfirm a PromptPay paymentWithout an existing payment method\nIf you have not already created a PaymentMethod, you can pass payment method parameters, and the newly created PaymentMethod will be used to confirm the PaymentIntent.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass payment method billing details.\n\nHide payment_method properties\nbilling_details\nRECOMMENDED\nobject\nThe billing_details associated with the payment method.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["218",{"pageContent":"Hide payment_method properties\nbilling_details\nRECOMMENDED\nobject\nThe billing_details associated with the payment method.\n\n\nJavaScript\n\nstripe.confirmPromptPayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: '{NAME}',\n        email: '{EMAIL}'\n      },\n    },\n  }\n).then(function({error, paymentIntent}) {\n  if (error) {\n    // Inform the customer that there was an error.\n  } else if (paymentIntent.status === 'succeeded') {\n    // Inform the customer that the payment was successful\n  } else if (paymentIntent.status === 'requires_action') {\n    // Inform the customer that the payment did not go through\n  }\n});\nConfirm a PromptPay paymentWith an existing payment method\nIf you have already created a PaymentMethod, you can pass its id to payment_method and it will be used to confirm the PaymentIntent.\n\nData argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["219",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\n\nJavaScript\n\nstripe.confirmPromptPayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  }\n).then(function({error, paymentIntent}) {\n  if (error) {\n    // Inform the customer that there was an error.\n  } else if (paymentIntent.status === 'succeeded') {\n    // Inform the customer that the payment was successful\n  } else if (paymentIntent.status === 'requires_action') {\n    // Inform the customer that the payment did not go through\n  }\n});\nConfirm a PromptPay paymentWith an attached PaymentMethod\nIf you have already attached a PaymentMethod to this PaymentIntent, then you can confirm without passing in any additional data.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["220",{"pageContent":"JavaScript\n\nstripe.confirmPromptPayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {}\n).then(function({error, paymentIntent}) {\n  if (error) {\n    // Inform the customer that there was an error.\n  } else if (paymentIntent.status === 'succeeded') {\n    // Inform the customer that the payment was successful\n  } else if (paymentIntent.status === 'requires_action') {\n    // Inform the customer that the payment did not go through\n  }\n});\nstripe.confirmSepaDebitPayment(clientSecret,data?)\nUse stripe.confirmSepaDebitPayment in the SEPA Direct Debit Payments with Payment Methods flow when the customer submits your payment form. When called, it will confirm the PaymentIntent with data you provide. Note that there are some additional requirements to this flow that are not covered in this reference. Refer to our integration guide for more details.","metadata":{"source":"StripeAPI.md"}}],["221",{"pageContent":"When you confirm a PaymentIntent, it needs to have an attached PaymentMethod. In addition to confirming the PaymentIntent, this method can automatically create and attach a new PaymentMethod for you. If you have already attached a PaymentMethod you can call this method without needing to provide any additional data. These use cases are detailed in the sections that follow.\n\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent.\n\ndata\noptional\nobject\nData to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n\nHide data properties\npayment_method\nRECOMMENDED\nobject | string\nThe id of an existing PaymentMethod or an object of collected data. See use cases below for details.","metadata":{"source":"StripeAPI.md"}}],["222",{"pageContent":"Hide data properties\npayment_method\nRECOMMENDED\nobject | string\nThe id of an existing PaymentMethod or an object of collected data. See use cases below for details.\n\nsetup_future_usage\nstring\nTo set up the SEPA Direct Debit account for reuse, set this parameter to off_session. SEPA Direct Debit only accepts an off_session value for this parameter. If a customer is provided on this PaymentIntent, the PaymentMethod will be attached to the customer when the PaymentIntent transitions to processing.\n\nReturns\nstripe.confirmSepaDebitPayment will return a Promise which resolves with a result object. This object has either:","metadata":{"source":"StripeAPI.md"}}],["223",{"pageContent":"Returns\nstripe.confirmSepaDebitPayment will return a Promise which resolves with a result object. This object has either:\n\nresult.paymentIntent: the successful PaymentIntent.\nresult.error: an error. Refer to the API reference for all possible errors.\nNote that stripe.confirmSepaDebitPayment may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["224",{"pageContent":"JavaScript\n\nstripe\n  .confirmSepaDebitPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      sepa_debit: ibanElement,\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\nConfirm a SEPA Debit paymentwith payment data from an Element\nCreate and attach a new PaymentMethod with stripe.confirmSepaDebitPayment by passing an iban Element to payment_method[sepa_debit]. The new PaymentMethod will be created with the data collected by the Element and will be used to confirm the PaymentIntent. Additionally, to create a SEPA Direct Debit PaymentMethod, you are required to collect and include the customer’s name and email address.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm the payment using data collected by an iban Element.\n\nHide payment_method properties\nsepa_debit\nREQUIRED\nElement\nAn iban Element.","metadata":{"source":"StripeAPI.md"}}],["225",{"pageContent":"Hide payment_method properties\nsepa_debit\nREQUIRED\nElement\nAn iban Element.\n\nbilling_details\nREQUIRED\nObject\nThe customer's billing_details. name and email are required.\n\nHide billing_details properties\nname\nREQUIRED\nstring\nThe customer's name.\n\nemail\nREQUIRED\nstring\nThe customer's email.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["226",{"pageContent":"Hide billing_details properties\nname\nREQUIRED\nstring\nThe customer's name.\n\nemail\nREQUIRED\nstring\nThe customer's email.\n\n\nJavaScript\n\nstripe\n  .confirmSepaDebitPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      sepa_debit: ibanElement,\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\nConfirm a SEPA Debit paymentwith self collected data\nIf you already know the customer’s IBAN account number or want to collect it yourself, then you do not need to use the iban Element with stripe.confirmSepaDebitPayment. You can pass in the customer’s account number directly to create a new PaymentMethod and confirm the PaymentIntent. To create a SEPA Direct Debit PaymentMethod, you are required to collect and include the customer’s name and email address.","metadata":{"source":"StripeAPI.md"}}],["227",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm using data collected without an Element.\n\nHide payment_method properties\nsepa_debit\nREQUIRED\nobject\nHide sepa_debit properties\niban\nREQUIRED\nstring\nAn IBAN account number.\n\nbilling_details\nREQUIRED\nObject\nThe customer's billing_details. name and email are required.\n\nHide billing_details properties\nname\nREQUIRED\nstring\nThe customer's name.\n\nemail\nREQUIRED\nstring\nThe customer's email.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["228",{"pageContent":"Hide billing_details properties\nname\nREQUIRED\nstring\nThe customer's name.\n\nemail\nREQUIRED\nstring\nThe customer's email.\n\n\nJavaScript\n\nstripe\n  .confirmSepaDebitPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      sepa_debit: {\n        iban: 'DE89370400440532013000',\n      },\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\nConfirm a SEPA Debit paymentwith an existing payment method\nIf you have already created a PaymentMethod, you can pass its id to payment_method when calling stripe.confirmSepaDebitPayment. It will be used to confirm the PaymentIntent.\n\nData argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["229",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\n\nJavaScript\n\nstripe\n  .confirmSepaDebitPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  })\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\nConfirm a SEPA Debit paymentwith an attached PaymentMethod\nIf you have already attached a PaymentMethod to this PaymentIntent, then you can confirm the PaymentIntent using stripe.confirmSepaDebitPayment without passing in any additional data.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["230",{"pageContent":"JavaScript\n\nstripe\n  .confirmSepaDebitPayment('{PAYMENT_INTENT_CLIENT_SECRET}')\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\nstripe.confirmSofortPayment(clientSecret,data?,options?)\nUse stripe.confirmSofortPayment in the Sofort Payments with Payment Methods flow when the customer submits your payment form. When called, it will confirm the PaymentIntent with data you provide. It will then automatically redirect the customer to authorize the transaction. Once authorization is complete, the customer will be redirected back to your specified return_url.\n\nWhen you confirm a PaymentIntent, it needs to have an attached PaymentMethod. In addition to confirming the PaymentIntent, this method can automatically create and attach a new PaymentMethod for you. If you have already attached a PaymentMethod you can call this method without needing to provide any additional data. These use cases are detailed in the sections that follow.","metadata":{"source":"StripeAPI.md"}}],["231",{"pageContent":"Method parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent.\n\ndata\noptional\nobject\nData to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n\nHide data properties\npayment_method\nRECOMMENDED\nstring | object\nEither the id of an existing PaymentMethod, or an object containing data to create a PaymentMethod with. See the use case sections below for details.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\nsetup_future_usage\nstring\nTo set up a SEPA Direct Debit payment method using the bank details from this SOFORT payment, set this parameter to off_session. When using this parameter, a customer will need to be set on the PaymentIntent. The newly created SEPA Direct Debit PaymentMethod will be attached to this customer.\n\noptions\noptional\nobject\nAn options object to control the behavior of this method.","metadata":{"source":"StripeAPI.md"}}],["232",{"pageContent":"options\noptional\nobject\nAn options object to control the behavior of this method.\n\nHide options properties\nhandleActions\nboolean\nSet this to false if you want to manually handle the authorization redirect. Default is true.\n\nReturns\nstripe.confirmSofortPayment will trigger a redirect when successful. If there is an error, it will return a Promise which resolves with a result object. This object has either:\n\nresult.paymentIntent: the successful PaymentIntent.\nresult.error: an error. Refer to the API reference for all possible errors.\nNote that stripe.confirmSofortPayment may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["233",{"pageContent":"JavaScript\n\nstripe\n  .confirmSofortPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      sofort: {\n        country: 'DE'\n      }\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\nConfirm a Sofort paymentwith an existing payment method\nUse stripe.confirmSofortPayment with an existing PaymentMethod by passing its id to payment_method. The PaymentMethod will be used to confirm the PaymentIntent.\n\nData argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.","metadata":{"source":"StripeAPI.md"}}],["234",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\nsetup_future_usage\nstring\nTo set up a SEPA Direct Debit payment method using the bank details from this SOFORT payment, set this parameter to off_session. When using this parameter, a customer will need to be set on the PaymentIntent. The newly created SEPA Direct Debit PaymentMethod will be attached to this customer.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["235",{"pageContent":"JavaScript\n\nstripe\n  .confirmSofortPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    // Inform the customer that there was an error.\n  });\nConfirm a Sofort paymentwith collected data\nThe country of your customer's bank is required for the Sofort authorization to succeed. You can pass in the country of your customer's bank directly to create a new PaymentMethod and confirm the PaymentIntent.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm with the customer's name.\n\nHide payment_method properties\nsofort\nREQUIRED\nobject\nAn object detailing SOFORT specific parameters.\n\nHide sofort properties\ncountry\nREQUIRED\nstring\nThe country code where customer's bank is located.","metadata":{"source":"StripeAPI.md"}}],["236",{"pageContent":"Hide payment_method properties\nsofort\nREQUIRED\nobject\nAn object detailing SOFORT specific parameters.\n\nHide sofort properties\ncountry\nREQUIRED\nstring\nThe country code where customer's bank is located.\n\nbilling_details\nobject\nThe customer's billing_details. Required when setup_future_usage is set to off_session.\n\nShow billing_details properties\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\nsetup_future_usage\nstring\nTo set up a SEPA Direct Debit payment method using the bank details from this SOFORT payment, set this parameter to off_session. When using this parameter, a customer will need to be set on the PaymentIntent. The newly created SEPA Direct Debit PaymentMethod will be attached to this customer.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["237",{"pageContent":"JavaScript\n\nstripe\n  .confirmSofortPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      sofort: {\n        country: 'DE'\n      }\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\nConfirm a Sofort paymentwith an attached PaymentMethod\nIf you have already attached a PaymentMethod to this PaymentIntent, then you can confirm the PaymentIntent using stripe.confirmSofortPayment without passing in any additional data.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["238",{"pageContent":"JavaScript\n\nstripe\n  .confirmSofortPayment('{PAYMENT_INTENT_CLIENT_SECRET}')\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\nstripe.confirmWechatPayPayment(clientSecret,data?,options?)\nUse stripe.confirmWechatPayPayment in the WeChat Pay payment method creation flow when the customer submits your payment form. When called, it will confirm the PaymentIntent with data you provide and handle the NextAction for the customer to authorize the payment. When you confirm a PaymentIntent, it needs to have an attached PaymentMethod. In addition to confirming the PaymentIntent, this method can automatically create and attach a new PaymentMethod for you. If you have already attached a PaymentMethod you can call this method without needing to provide any additional data. These use cases are detailed in the sections that follow.\n\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent.","metadata":{"source":"StripeAPI.md"}}],["239",{"pageContent":"Method parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent.\n\ndata\noptional\nobject\nData to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n\nHide data properties\npayment_method\nRECOMMENDED\nstring | object\nEither the id of an existing PaymentMethod, or an object containing data to create a PaymentMethod with. See the use case sections below for details.\n\noptions\noptional\nobject\nAn options object to control the behavior of this method.\n\nHide options properties\nhandleActions\nboolean\nSet this to false if you would like to handle displaying the WeChat Pay QR code yourself.\n\nReturns\nBy default, stripe.confirmWechatPayPayment will display WeChat Pay QR code. If there is an error, or when handling next actions manually by using the handleActions: false option, it will return a Promise which resolves with a result object. This object has either:","metadata":{"source":"StripeAPI.md"}}],["240",{"pageContent":"result.paymentIntent: the successful PaymentIntent.\nresult.error: an error. Refer to the API reference for all possible errors.\nNote that stripe.confirmWechatPayPayment may take several seconds to complete and display the QR code. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["241",{"pageContent":"JavaScript\n\nstripe.confirmWechatPayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {}\n).then(function({error, paymentIntent}) {\n  if (error) {\n    // Inform the customer that there was an error.\n  } else if (paymentIntent.status === 'succeeded') {\n    // Inform the customer that the payment was successful\n  } else if (paymentIntent.status === 'requires_action') {\n    // Inform the customer that the payment did not go through\n  }\n});\nConfirm a WeChat Pay paymentWithout an existing payment method\nIf you have not already created a PaymentMethod, you can pass payment method parameters, and the newly created PaymentMethod will be used to confirm the PaymentIntent.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass payment method billing details.\n\nHide payment_method properties\nbilling_details\nRECOMMENDED\nobject\nThe billing_details associated with the payment method.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["242",{"pageContent":"Hide payment_method properties\nbilling_details\nRECOMMENDED\nobject\nThe billing_details associated with the payment method.\n\n\nJavaScript\n\nstripe.confirmWechatPayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: '{NAME}',\n        email: '{EMAIL}'\n      },\n      wechat_pay: {},\n    },\n  }\n).then(function({error, paymentIntent}) {\n  if (error) {\n    // Inform the customer that there was an error.\n  } else if (paymentIntent.status === 'succeeded') {\n    // Inform the customer that the payment was successful\n  } else if (paymentIntent.status === 'requires_action') {\n    // Inform the customer that the payment did not go through\n  }\n});\nConfirm a WeChat Pay paymentWith an existing payment method\nIf you have already created a PaymentMethod, you can pass its id to payment_method and it will be used to confirm the PaymentIntent.\n\nData argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["243",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\n\nJavaScript\n\nstripe.confirmWechatPayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  }\n).then(function({error, paymentIntent}) {\n  if (error) {\n    // Inform the customer that there was an error.\n  } else if (paymentIntent.status === 'succeeded') {\n    // Inform the customer that the payment was successful\n  } else if (paymentIntent.status === 'requires_action') {\n    // Inform the customer that the payment did not go through\n  }\n});\nConfirm a WeChat Pay paymentWith an attached PaymentMethod\nIf you have already attached a PaymentMethod to this PaymentIntent, then you can confirm without passing in any additional data.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["244",{"pageContent":"JavaScript\n\nstripe.confirmWechatPayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {}\n).then(function({error, paymentIntent}) {\n  if (error) {\n    // Inform the customer that there was an error.\n  } else if (paymentIntent.status === 'succeeded') {\n    // Inform the customer that the payment was successful\n  } else if (paymentIntent.status === 'requires_action') {\n    // Inform the customer that the payment did not go through\n  }\n});\nstripe.retrievePaymentIntent(clientSecret)\nRetrieve a PaymentIntent using its client secret.\n\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent to retrieve.\n\nReturns\nThis method returns a Promise which resolves with a result object. This object has either:\n\nresult.paymentIntent: a PaymentIntent was retrieved successfully.\nresult.error: an error. Refer to the API reference for all possible errors.\nWas this section helpful?YesNo\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["245",{"pageContent":"result.paymentIntent: a PaymentIntent was retrieved successfully.\nresult.error: an error. Refer to the API reference for all possible errors.\nWas this section helpful?YesNo\n\n\nJavaScript\n\nstripe\n  .retrievePaymentIntent('{PAYMENT_INTENT_CLIENT_SECRET}')\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\nstripe.verifyMicrodepositsForPayment(clientSecret,data?)\nUse stripe.verifyMicrodepositsForPayment in the Accept a Canadian pre-authorized debit payment or Accept an ACH Direct Debit payment flow to verify a customer's bank account with micro-deposits.\n\nIt should be only called when PaymentIntent is in the requires_action state, and contains a next_action field that has a type equal to verify_with_microdeposits. Refer to our integration guide for more details.\n\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent.\n\ndata\noptional\nobject\nData to be sent with the request.","metadata":{"source":"StripeAPI.md"}}],["246",{"pageContent":"Method parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent.\n\ndata\noptional\nobject\nData to be sent with the request.\n\nHide data properties\namounts\narray\nAn array of two positive integers, in cents, equal to the values of the micro-deposits sent to the bank account.\n\ndescriptor_code\nstring\nA six-character code starting with SM present in the microdeposit sent to the bank account.\n\nReturns\nstripe.verifyMicrodepositsForPayment will return a Promise which resolves with a result object. This object has either:\n\nresult.paymentIntent: the PaymentIntent with a status of processing.\nresult.error: an error. Refer to the API reference and our integration guide for all possible errors.\nVerification can fail for several reasons. The failure may happen synchronously as a direct error response, or asynchronously through a payment_intent.payment_failed webhook event. Refer to our integration guide for more details.\n\nWas this section helpful?YesNo\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["247",{"pageContent":"Was this section helpful?YesNo\n\n\nJavaScript\n\nstripe.verifyMicrodepositsForPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    amounts: [32, 45],\n  }\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\nstripe.createRadarSession()\nUse stripe.createRadarSession() to associate client browser information with a Radar Session ID. This ID can then be passed to Stripe when creating charges and payment methods to associate client browser information with those charges and improve Radar's ability to identify fraud.\n\nWe've prefilled the example with a sample test API key. Don’t submit any personally identifiable information in requests made with this key. To create a Stripe object using your account, replace the sample API key with your actual API key or sign in.\n\nReturns\nThis method returns a Promise which resolves with a result object. This object has either:","metadata":{"source":"StripeAPI.md"}}],["248",{"pageContent":"Returns\nThis method returns a Promise which resolves with a result object. This object has either:\n\nresult.radarSession: a Radar Session was created successfully.\nresult.error: an error. Refer to the API reference for all possible errors and the FPX guide for FPX specific errors.\nAfter you receive a Radar Session ID, pass it to your server and subsequently include it in your API requests to create charges, payment methods, or to create or confirm a PaymentIntent.\n\nNote that stripe.createRadarSession should be non-blocking. If you receive an error from this function, continue on with completing charges without passing through a Radar Session ID.\n\nWas this section helpful?YesNo\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["249",{"pageContent":"Was this section helpful?YesNo\n\n\nJavaScript\n\nvar stripe = Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\nstripe.createRadarSession().then(function(result) {\n  // Handle result.error or result.radarSession\n});\nstripe.handleCardAction(clientSecret)\nUse stripe.handleCardAction in the Payment Intents API manual confirmation flow to handle a PaymentIntent with the requires_action status. It will throw an error if the PaymentIntent has a different status.\n\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent to handle.\n\nReturns\nThis method returns a Promise which resolves with a result object. This object has either:","metadata":{"source":"StripeAPI.md"}}],["250",{"pageContent":"Method parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent to handle.\n\nReturns\nThis method returns a Promise which resolves with a result object. This object has either:\n\nresult.paymentIntent: a PaymentIntent with the requires_confirmation status to confirm server-side.\nresult.error: an error. Refer to the API reference for all possible errors.\nNote that stripe.handleCardAction may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\nAdditionally, stripe.handleCardAction may trigger a 3D Secure authentication challenge. The authentication challenge requires a context switch that can be hard to follow on a screen-reader. Ensure that your form is accessible by ensuring that success or error messages are clearly read out.","metadata":{"source":"StripeAPI.md"}}],["251",{"pageContent":"Was this section helpful?YesNo\n\n\nJavaScript\n\nstripe\n  .handleCardAction('{PAYMENT_INTENT_CLIENT_SECRET}')\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\nstripe.collectBankAccountForPayment(options)\nUse stripe.collectBankAccountForPayment in the Accept a payment flow for the ACH Direct Debit payment method to collect the customer’s bank account in your payment form. When called, it will automatically load an on-page modal UI to collect bank account details and verification, and attach the PaymentMethod to the PaymentIntent.\n\nMethod parameters\noptions\nREQUIRED\nobject\nData to be sent with the request.\n\nHide options properties\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent.\n\nparams\nREQUIRED\nobject\nHide params properties\npayment_method_type\nREQUIRED\nstring\nThe payment method type for the bank account details (e.g. us_bank_account)\n\npayment_method_data\nREQUIRED\nobject\nPayment method specific data to be sent with the request","metadata":{"source":"StripeAPI.md"}}],["252",{"pageContent":"payment_method_data\nREQUIRED\nobject\nPayment method specific data to be sent with the request\n\nShow payment_method_data properties\nReturns\nWhen the stripe.collectBankAccountForPayment completes successfully, it returns a PaymentIntent. If the customer provided their account, the PaymentIntent is in the requires_confirmation state. If the customer closed the dialog without providing their account, the PaymentIntent is in the requires_payment_method state. Use stripe.confirmUsBankAccountPayment to complete the process.\n\nWas this section helpful?YesNo\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["253",{"pageContent":"Was this section helpful?YesNo\n\n\nJavaScript\n\nstripe.collectBankAccountForPayment(\n  {\n    clientSecret: '{PAYMENT_INTENT_CLIENT_SECRET}',\n    params: {\n      payment_method_type: 'us_bank_account',\n      payment_method_data: {\n        billing_details: {name: 'Jenny Rosen', email: 'jenny@example.com'},\n      },\n    },\n  }\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\nSetup Intents\nUse the Setup Intents APIs to save a card and charge it later. For step-by-step instructions on using the Setup Intents APIs, see the set up recurring payments guide.\n\nThe following Stripe.js methods are available for working with Setup Intents.\n\nWas this section helpful?YesNo","metadata":{"source":"StripeAPI.md"}}],["254",{"pageContent":"The following Stripe.js methods are available for working with Setup Intents.\n\nWas this section helpful?YesNo\n\nstripe.confirmSetup(options)\nUse stripe.confirmSetup to confirm a SetupIntent using data collected by the Payment Element. When called, stripe.confirmSetup will attempt to complete any required actions, such as authenticating your user by displaying a 3DS dialog or redirecting them to a bank authorization page. Your user will be redirected to the return_url you pass once the authorization is complete.\n\nMethod parameters\noptions\nREQUIRED\nobject\nHide options properties\nelements\nREQUIRED\nobject\nThe Elements instance that was used to create the Payment Element.\n\nconfirmParams\nobject\nParameters that will be passed on to the Stripe API. Refer to the Setup Intents API for a full list of parameters.\n\nHide confirmParams properties\nreturn_url\nREQUIRED\nstring\nThe url your customer will be directed to after they complete authentication.","metadata":{"source":"StripeAPI.md"}}],["255",{"pageContent":"Hide confirmParams properties\nreturn_url\nREQUIRED\nstring\nThe url your customer will be directed to after they complete authentication.\n\npayment_method_data\nobject\nWhen you call stripe.confirmSetup, payment details are collected from the Element and passed to the SetupIntents confirm endpoint as the payment_method_data parameter. You can also include additional payment_method_data fields, which will be merged with the data collected from the Element.\n\nShow payment_method_data properties\nredirect\n'always' | 'if_required'\nBy default, stripe.confirmSetup will always redirect to your return_url after a successful confirmation. If you set redirect: \"if_required\", then stripe.confirmSetup will only redirect if your user chooses a redirect-based payment method.","metadata":{"source":"StripeAPI.md"}}],["256",{"pageContent":"Note: Setting if_required requires that you handle successful confirmations for redirect-based and non-redirect based payment methods separately. When a non-redirect based payment method is successfully confirmed, stripe.confirmSetup will resolve with a {setupIntent} object.\n\nReturns\nstripe.confirmSetup will return a Promise. Upon a successful authorization, your user will be redirected to the return_url you provide before the Promise ever resolves.\n\nIf the authorization fails, the Promise will resolve with an {error} object that describes the failure. When the error type is card_error or validation_error, you can display the error message in error.message directly to your user. An error type of invalid_request_error could be due to an invalid request or 3DS authentication failures.","metadata":{"source":"StripeAPI.md"}}],["257",{"pageContent":"Note that for some payment methods such as iDEAL or Afterpay Clearpay, your user will first be redirected to an intermediate page to authorize the payment. If they fail to authorize the payment, they will be redirected back to your return_url and the SetupIntent will have a status of requires_payment_method. In this case you should attempt to recollect payment from the user.\n\nNote that stripe.confirmSetup may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\nWas this section helpful?YesNo\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["258",{"pageContent":"Was this section helpful?YesNo\n\n\nJavaScript\n\nstripe.confirmSetup({\n  elements,\n  confirmParams: {\n    // Return URL where the customer should be redirected after the SetupIntent is confirmed.\n    return_url: 'https://example.com',\n  },\n})\n.then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\nConfirm a SetupIntent by payment method\nBelow are a number of methods used to confirm a SetupIntent for a specific payment method type.\n\nstripe.confirmCardSetup(clientSecret,data?,options?)\nUse stripe.confirmCardSetup in the Setup Intents API flow when the customer submits your payment form. When called, it will confirm the SetupIntent with data you provide and carry out 3DS or other next actions if they are required.","metadata":{"source":"StripeAPI.md"}}],["259",{"pageContent":"When you confirm a SetupIntent, it needs to have an attached PaymentMethod. In addition to confirming the SetupIntent, this method can automatically create and attach a new PaymentMethod for you. It can also be called with an existing PaymentMethod, or if you have already attached a PaymentMethod you can call this method without needing to provide any additional data. These use cases are detailed in the sections that follow.\n\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the SetupIntent.\n\ndata\noptional\nobject\nData to be sent with the request. Refer to the Setup Intents API for a full list of parameters.\n\nHide data properties\npayment_method\nRECOMMENDED\nstring | object\nEither the id of an existing PaymentMethod, or an object containing data to create a PaymentMethod with. See the use case sections below for details.","metadata":{"source":"StripeAPI.md"}}],["260",{"pageContent":"return_url\nstring\nIf you are handling next actions yourself, pass in a return_url. If the subsequent action is redirect_to_url, this URL will be used on the return path for the redirect.\n\noptions\noptional\nobject\nAn options object to control the behavior of this method.\n\nHide options properties\nhandleActions\nboolean\nSet this to false if you want to handle next actions yourself, or if you want to defer next action handling until later (e.g. for use in the PaymentRequest API). Default is true.\n\nReturns\nstripe.confirmCardSetup will return a Promise which resolves with a result object. This object has either:","metadata":{"source":"StripeAPI.md"}}],["261",{"pageContent":"Returns\nstripe.confirmCardSetup will return a Promise which resolves with a result object. This object has either:\n\nresult.setupIntent: the successful SetupIntent.\nresult.error: an error. Refer to the API reference for all possible errors.\nNote that stripe.confirmCardSetup may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\nAdditionally, stripe.confirmCardSetup may trigger a 3D Secure authentication challenge. This will be shown in a modal dialog and may be confusing for customers using assistive technologies like screen readers. You should make your form accessible by ensuring that success or error messages are clearly read out after this method completes.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["262",{"pageContent":"JavaScript\n\nstripe\n  .confirmCardSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      card: cardElement,\n      billing_details: {\n        name: 'Jenny Rosen',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\nConfirm card setupwith payment data from an Element\nUse stripe.confirmCardSetup with payment data from an Element by passing a card or cardNumber Element to payment_method[card]. The new PaymentMethod will be created with data collected by the Element and will be used to confirm the SetupIntent.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm using data collected by a card or cardNumber Element.\n\nHide payment_method properties\ncard\nREQUIRED\nElement\nUses the provided card or cardNumber Element for confirmation.\n\nbilling_details\nRECOMMENDED\nobject\nThe billing_details associated with the card.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["263",{"pageContent":"billing_details\nRECOMMENDED\nobject\nThe billing_details associated with the card.\n\n\nJavaScript\n\nstripe\n  .confirmCardSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      card: cardElement,\n      billing_details: {\n        name: 'Jenny Rosen',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\nConfirm card setupwith an existing payment method\nUse stripe.confirmCardSetup with an existing PaymentMethod by passing its id to payment_method. The PaymentMethod will be used to confirm the SetupIntent.\n\nData argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["264",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\n\nJavaScript\n\nstripe\n  .confirmCardSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\nConfirm card setupwith an existing token\nFor backwards compatibility, you can convert an existing Token into a PaymentMethod with stripe.confirmCardSetup by passing the Token to payment_method[card][token]. The newly created PaymentMethod will be used to confirm the PaymentMethod.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm using an existing token.\n\nHide payment_method properties\ncard\nREQUIRED\nobject\nAn object of card data.\n\nHide card properties\ntoken\nREQUIRED\nstring\nConverts the provided token into a PaymentMethod to use for confirmation.\n\nbilling_details\nRECOMMENDED\nobject\nThe billing_details associated with the card.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["265",{"pageContent":"billing_details\nRECOMMENDED\nobject\nThe billing_details associated with the card.\n\n\nJavaScript\n\nstripe\n  .confirmCardSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      card: {\n        token: 'tok_visa',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\nConfirm card setupwith an attached PaymentMethod\nIf you have already attached a PaymentMethod to this SetupIntent, then you can confirm the SetupIntent using stripe.confirmCardSetup without passing in any additional data.\n\n\nJavaScript\n\nstripe\n  .confirmCardSetup('{SETUP_INTENT_CLIENT_SECRET}')\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\nstripe.confirmUsBankAccountSetup(clientSecret,data?)\nUse stripe.confirmUsBankAccountSetup in the Save bank details flow for the ACH Direct Debit payment method to record the customer’s authorization for future payments.","metadata":{"source":"StripeAPI.md"}}],["266",{"pageContent":"When you confirm a SetupIntent, it needs to have an attached PaymentMethod. We suggest using stripe.collectBankAccountForSetup, which automatically collects bank account details and attaches a PaymentMethod. You may also choose to reuse an existing PaymentMethod or manually collect bank account details using the data parameter. These use cases are detailed in the sections that follow.\n\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the SetupIntent.\n\ndata\noptional\nobject\nData to be sent with the request. Refer to the Setup Intents API for a full list of parameters.\n\nHide data properties\npayment_method\nobject | string\nThe id of an existing PaymentMethod or an object of collected data. See use cases below for details.\n\nReturns\nstripe.confirmUsBankAccountSetup will return a Promise which resolves with a result object. This object has either:","metadata":{"source":"StripeAPI.md"}}],["267",{"pageContent":"Returns\nstripe.confirmUsBankAccountSetup will return a Promise which resolves with a result object. This object has either:\n\nresult.setupIntent: the successful SetupIntent.\nresult.error: an error. Refer to the API reference and our integration guide for all possible errors.\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["268",{"pageContent":"JavaScript\n\nstripe.confirmUsBankAccountSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      us_bank_account: {\n        routing_number: '110000000',\n        account_number: '000123456789',\n        account_holder_type: 'individual',\n      },\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on SetupIntent's status.\n    console.log(\"SetupIntent ID: \" + result.setupIntent.id);\n    console.log(\"SetupIntent status: \" + result.setupIntent.status);\n  }\n});\nConfirm an ACH Direct Debit setupwith an existing PaymentMethod\nIf you have already created a PaymentMethod, you can pass its id to payment_method when calling stripe.confirmUsBankAccountSetup.\n\nData argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.","metadata":{"source":"StripeAPI.md"}}],["269",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\n\nJavaScript\n\nstripe.confirmUsBankAccountSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on SetupIntent's status.\n    console.log(\"SetupIntent ID: \" + result.setupIntent.id);\n    console.log(\"SetupIntent status: \" + result.setupIntent.status);\n  }\n});\nConfirm an ACH Direct Debit setupwith an attached PaymentMethod\nIf you have successfully called stripe.collectBankAccountForSetup or attached a PaymentMethod to this SetupIntent already, then you can confirm the SetupIntent without passing in any additional data.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["270",{"pageContent":"JavaScript\n\nstripe.confirmUsBankAccountSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {}\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on SetupIntent's status.\n    console.log(\"SetupIntent ID: \" + result.setupIntent.id);\n    console.log(\"SetupIntent status: \" + result.setupIntent.status);\n  }\n});\nConfirm an ACH Direct Debit setupwith self collected bank account information\nIf you already know the customer’s bank account information, or want to collect it yourself, you can pass them in directly to create a new PaymentMethod and confirm the SetupIntent.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm using data collected.\n\nHide payment_method properties\nbilling_details\nREQUIRED\nObject\nThe customer's billing_details. name is required. Providing email allows your customer to receive ACH Direct Debit mandate and microdeposit emails.","metadata":{"source":"StripeAPI.md"}}],["271",{"pageContent":"Hide billing_details properties\nname\nREQUIRED\nstring\nThe customer's name. The first and last name must be at minimum 2 characters each.\n\nemail\nstring\nThe customer's email.\n\nus_bank_account\nREQUIRED\nObject\nThe customer's bank account information.\n\nHide us_bank_account properties\naccount_number\nREQUIRED\nstring\nThe customer’s bank account number.\n\nrouting_number\nREQUIRED\nstring\nThe routing number of the customer’s bank.\n\naccount_holder_type\nREQUIRED\nstring\nAccount holder type: individual or company.\n\naccount_type\nstring\nAccount type: checkings or savings. Defaults to checking if omitted.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["272",{"pageContent":"stripe.confirmUsBankAccountSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      us_bank_account: {\n        routing_number: '110000000',\n        account_number: '000123456789',\n        account_holder_type: 'individual',\n      },\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on SetupIntent's status.\n    console.log(\"SetupIntent ID: \" + result.setupIntent.id);\n    console.log(\"SetupIntent status: \" + result.setupIntent.status);\n  }\n});\nstripe.confirmAcssDebitSetup(clientSecret,data?,options?)","metadata":{"source":"StripeAPI.md"}}],["273",{"pageContent":"console.log(\"SetupIntent ID: \" + result.setupIntent.id);\n    console.log(\"SetupIntent status: \" + result.setupIntent.status);\n  }\n});\nstripe.confirmAcssDebitSetup(clientSecret,data?,options?)\nUse stripe.confirmAcssDebitSetup in the Save bank details flow to set up a Canadian pre-authorized debit payment method for future payments. When called, it will automatically pop up a modal to collect bank account details and verification, accept the mandate, and confirm the SetupIntent when the user submits the form. Note that there are some additional requirements to this flow that are not covered in this reference. Refer to our integration guide for more details.","metadata":{"source":"StripeAPI.md"}}],["274",{"pageContent":"When you confirm a SetupIntent, it needs to have an attached PaymentMethod. stripe.confirmAcssDebitSetup automatically creates a new PaymentMethod for you when your customer completes the modal UI. It can also be called with an existing PaymentMethod, which will load the modal UI to collect a new mandate agreement. These use cases are detailed in the sections that follow.\n\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the SetupIntent.\n\ndata\noptional\nobject\nData to be sent with the request. Refer to the Setup Intents API for a full list of parameters.\n\nHide data properties\npayment_method\nobject | string\nThe id of an existing PaymentMethod or an object of collected data. See use cases below for details.\n\noptions\noptional\nobject\nAn options object to control the behavior of this method.\n\nHide options properties\nskipMandate\nboolean\nSet this to true if you want to skip displaying the mandate confirmation.","metadata":{"source":"StripeAPI.md"}}],["275",{"pageContent":"options\noptional\nobject\nAn options object to control the behavior of this method.\n\nHide options properties\nskipMandate\nboolean\nSet this to true if you want to skip displaying the mandate confirmation.\n\nReturns\nstripe.confirmAcssDebitSetup will return a Promise which resolves with a result object. This object has either:\n\nresult.setupIntent: the successful SetupIntent.\nresult.error: an error. Refer to the API reference and our integration guide for all possible errors.\nNote that stripe.confirmAcssDebitSetup may take several seconds to complete. During that time, disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, show it to the customer, re-enable the form, and hide the waiting indicator.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["276",{"pageContent":"JavaScript\n\nstripe.confirmAcssDebitSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on SetupIntent's status.\n    console.log(\"SetupIntent ID: \" + result.setupIntent.id);\n    console.log(\"SetupIntent status: \" + result.setupIntent.status);\n  }\n});\nConfirm a Canadian pre-authorized debit setupwith a new PaymentMethod\nYou can pass in the customer’s billing details to create a new PaymentMethod and confirm the SetupIntent. You are required to collect and include the customer’s name and email address. This method loads an on-page modal UI that handles bank account details collection and verification, presents a hosted mandate agreement and collects authorization for you.","metadata":{"source":"StripeAPI.md"}}],["277",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm using data collected.\n\nHide payment_method properties\nbilling_details\nREQUIRED\nObject\nThe customer's billing_details. name and email are required.\n\nHide billing_details properties\nname\nREQUIRED\nstring\nThe customer's name. The first and last name must be at minimum 2 characters each.\n\nemail\nREQUIRED\nstring\nThe customer's email.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["278",{"pageContent":"email\nREQUIRED\nstring\nThe customer's email.\n\n\nJavaScript\n\nstripe.confirmAcssDebitSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on SetupIntent's status.\n    console.log(\"SetupIntent ID: \" + result.setupIntent.id);\n    console.log(\"SetupIntent status: \" + result.setupIntent.status);\n  }\n});\nConfirm a Canadian pre-authorized debit setupwith an existing PaymentMethod\nIf you have already created a PaymentMethod, you can pass its id to payment_method when calling stripe.confirmAcssDebitSetup. This method loads an on-page modal UI that only presents a hosted mandate agreement and collects authorization for you.","metadata":{"source":"StripeAPI.md"}}],["279",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\n\nJavaScript\n\nstripe.confirmAcssDebitSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on SetupIntent's status.\n    console.log(\"SetupIntent ID: \" + result.setupIntent.id);\n    console.log(\"SetupIntent status: \" + result.setupIntent.status);\n  }\n});\nConfirm a Canadian pre-authorized debit setupwith an attached PaymentMethod\nIf you have already attached a PaymentMethod to this SetupIntent, then you can confirm the SetupIntent without passing in any additional data. This method loads an on-page modal UI that only presents a hosted mandate agreement and collects authorization for you.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["280",{"pageContent":"JavaScript\n\nstripe.confirmAcssDebitSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {}\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on SetupIntent's status.\n    console.log(\"SetupIntent ID: \" + result.setupIntent.id);\n    console.log(\"SetupIntent status: \" + result.setupIntent.status);\n  }\n});\nConfirm a Canadian pre-authorized debit setupwith self collected bank account information\nIf you already know the customer’s bank account information, or want to collect it yourself, you can pass them in directly to create a new PaymentMethod and confirm the SetupIntent. In this case, this method does not load the on-page modal UI, so you will need to build your own mandate agreement page.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm using data collected.","metadata":{"source":"StripeAPI.md"}}],["281",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm using data collected.\n\nHide payment_method properties\nbilling_details\nREQUIRED\nObject\nThe customer's billing_details. name and email are required.\n\nHide billing_details properties\nname\nREQUIRED\nstring\nThe customer's name. The first and last name must be at minimum 2 characters each.\n\nemail\nREQUIRED\nstring\nThe customer's email.\n\nacss_debit\nREQUIRED\nObject\nThe customer's bank account information.\n\nHide acss_debit properties\naccount_number\nREQUIRED\nstring\nThe customer’s bank account number.\n\ninstitution_number\nREQUIRED\nstring\nThe institution number of the customer’s bank.\n\ntransit_number\nREQUIRED\nstring\nThe transit number of the customer’s bank.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["282",{"pageContent":"stripe.confirmAcssDebitSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      acss_debit: {\n        institution_number: '000',\n        transit_number: '11000',\n        account_number: '000123456789',\n      },\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on SetupIntent's status.\n    console.log(\"SetupIntent ID: \" + result.setupIntent.id);\n    console.log(\"SetupIntent status: \" + result.setupIntent.status);\n  }\n});\nConfirm a Canadian pre-authorized debit setupwith an existing PaymentMethod but skip mandate display\nIf you have already created a PaymentMethod and built your own mandate agreement page, you can reuse it by passing its id to payment_method when calling stripe.confirmAcssDebitSetup and skip the on-page modal UI at the same time.","metadata":{"source":"StripeAPI.md"}}],["283",{"pageContent":"Data and options argument paramters\ndata\nobject\nData to be sent with the request.\n\nHide data properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\noptions\nobject\nAn options object to control the behavior of this method.\n\nHide options properties\nskipMandate\nREQUIRED\nboolean\nSet to true to skip the on-page modal UI.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["284",{"pageContent":"Hide options properties\nskipMandate\nREQUIRED\nboolean\nSet to true to skip the on-page modal UI.\n\n\nJavaScript\n\nstripe.confirmAcssDebitSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  },\n  {\n    skipMandate: true,\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on SetupIntent's status.\n    console.log(\"SetupIntent ID: \" + result.setupIntent.id);\n    console.log(\"SetupIntent status: \" + result.setupIntent.status);\n  }\n});\nstripe.confirmAuBecsDebitSetup(clientSecret,data?)\nUse stripe.confirmAuBecsDebitSetup in the BECS Direct Debit Payments flow when the customer submits your payment form. When called, it will confirm the SetupIntent with data you provide. Note that there are some additional requirements to this flow that are not covered in this reference. Refer to our integration guide for more details.","metadata":{"source":"StripeAPI.md"}}],["285",{"pageContent":"When you confirm a SetupIntent, it needs to have an attached PaymentMethod. In addition to confirming the SetupIntent, this method can automatically create and attach a new PaymentMethod for you. It can also be called with an existing PaymentMethod, or if you have already attached a PaymentMethod you can call this method without needing to provide any additional data. These use cases are detailed in the sections that follow.\n\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the SetupIntent.\n\ndata\noptional\nobject\nData to be sent with the request. Refer to the Setup Intents API for a full list of parameters.\n\nHide data properties\npayment_method\nRECOMMENDED\nobject | string\nThe id of an existing PaymentMethod or an object of collected data. See use cases below for details.\n\nReturns\nstripe.confirmAuBecsDebitSetup will return a Promise which resolves with a result object. This object has either:","metadata":{"source":"StripeAPI.md"}}],["286",{"pageContent":"Returns\nstripe.confirmAuBecsDebitSetup will return a Promise which resolves with a result object. This object has either:\n\nresult.setupIntent: the successful SetupIntent.\nresult.error: an error. Refer to the API reference for all possible errors.\nNote that stripe.confirmAuBecsDebitSetup may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["287",{"pageContent":"JavaScript\n\nstripe\n  .confirmAuBecsDebitSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      au_becs_debit: auBankAccountElement,\n      billing_details: {\n        name: 'John Smith',\n        email: 'john.smith@example.com',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\nConfirm BECS Debit setupwith payment data from an Element\nCreate and attach a new PaymentMethod with stripe.confirmAuBecsDebitSetup by passing an auBankAccount Element to payment_method[au_becs_debit]. The new PaymentMethod will be created with the data collected by the Element and will be used to confirm the SetupIntent. Additionally, to create a BECS Direct Debit PaymentMethod, you are required to collect and include the account holder's name and the customer’s email address.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm using data collected by an auBankAccount Element.","metadata":{"source":"StripeAPI.md"}}],["288",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm using data collected by an auBankAccount Element.\n\nHide payment_method properties\nau_becs_debit\nREQUIRED\nElement\nAn auBankAccount Element.\n\nbilling_details\nREQUIRED\nObject\nThe customer's billing_details. name and email are required.\n\nHide billing_details properties\nname\nREQUIRED\nstring\nThe customer's name.\n\nemail\nREQUIRED\nstring\nThe customer's email.\n\n\nJavaScript\n\nstripe\n  .confirmAuBecsDebitSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      au_becs_debit: auBankAccountElement,\n      billing_details: {\n        name: 'John Smith',\n        email: 'john.smith@example.com',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\nConfirm BECS Debit setupwith an existing payment method\nIf you have already created a PaymentMethod, you can pass its id to payment_method when calling stripe.confirmAuBecsDebitSetup and it will be used to confirm the SetupIntent.","metadata":{"source":"StripeAPI.md"}}],["289",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\n\nJavaScript\n\nstripe\n  .confirmAuBecsDebitSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\nConfirm BECS Debit setupwith self collected data\nIf you already know the customer’s BSB number and bank account number or want to collect it yourself, then you do not need to use the auBankAccount Element. You can pass in the customer’s bank account information directly to create a new PaymentMethod and confirm the SetupIntent. Additionally, to create a BECS Direct Debit PaymentMethod, you are required to collect and include the account holder's name and the customer's email address.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm using data collected without an Element.","metadata":{"source":"StripeAPI.md"}}],["290",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm using data collected without an Element.\n\nHide payment_method properties\nau_becs_debit\nREQUIRED\nobject\nAn object of self-collected bank account data.\n\nHide au_becs_debit properties\nbsb_number\nREQUIRED\nstring\nA Bank State Branch (BSB) number.\n\naccount_number\nREQUIRED\nstring\nA bank account number.\n\nbilling_details\nREQUIRED\nobject\nThe customer's billing_details. name and email are required.\n\nHide billing_details properties\nname\nREQUIRED\nstring\nThe account holder's name.\n\nemail\nREQUIRED\nstring\nThe customer's email.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["291",{"pageContent":"Hide billing_details properties\nname\nREQUIRED\nstring\nThe account holder's name.\n\nemail\nREQUIRED\nstring\nThe customer's email.\n\n\nJavaScript\n\nstripe\n  .confirmAuBecsDebitSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      au_becs_debit: {\n        bsb_number: '000000',\n        account_number: '000123456'\n      },\n      billing_details: {\n        name: 'John Smith',\n        email: 'john.smith@example.com',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\nstripe.confirmBacsDebitSetup(clientSecret,data?)\nUse stripe.confirmBacsDebitSetup in the Bacs Direct Debit Payments flow when the customer submits your payment form. When called, it will confirm the SetupIntent with data you provide. Note that there are some additional requirements to this flow that are not covered in this reference. Refer to our integration guide for more details.","metadata":{"source":"StripeAPI.md"}}],["292",{"pageContent":"When you confirm a SetupIntent, it needs to have an attached PaymentMethod. In addition to confirming the SetupIntent, this method can automatically create and attach a new PaymentMethod for you. It can also be called with an existing PaymentMethod, or if you have already attached a PaymentMethod you can call this method without needing to provide any additional data. These use cases are detailed in the sections that follow.\n\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the SetupIntent.\n\ndata\noptional\nobject\nData to be sent with the request. Refer to the Setup Intents API for a full list of parameters.\n\nHide data properties\npayment_method\nRECOMMENDED\nobject | string\nThe id of an existing PaymentMethod or an object of collected data. See use cases below for details.\n\nReturns\nstripe.confirmBacsDebitSetup will return a Promise which resolves with a result object. This object has either:","metadata":{"source":"StripeAPI.md"}}],["293",{"pageContent":"Returns\nstripe.confirmBacsDebitSetup will return a Promise which resolves with a result object. This object has either:\n\nresult.setupIntent: the successful SetupIntent.\nresult.error: an error. Refer to the API reference for all possible errors.\nNote that stripe.confirmBacsDebitSetup may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["294",{"pageContent":"JavaScript\n\nstripe\n  .confirmBacsDebitSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      bacs_debit: {\n        sort_code: '108800',\n        account_number: '000123456'\n      },\n      billing_details: {\n        address: {\n          line1: addressLine1,\n          city: addressCity,\n          country: addressCountry,\n          postal_code: addressPostalCode,\n        },\n        email: customerEmail,\n        name: customerName,\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\nConfirm Bacs Debit setupwith self collected data\nYou can also pass in the customer’s bank account information directly to create a new PaymentMethod and confirm the SetupIntent. Additionally, to create a Bacs Direct Debit PaymentMethod, you are required to collect and include the account holder's name and the customer's email address.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm using payment method data.","metadata":{"source":"StripeAPI.md"}}],["295",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm using payment method data.\n\nHide payment_method properties\nbacs_debit\nREQUIRED\nobject\nAn object of self-collected bank account data.\n\nHide bacs_debit properties\naccount_number\nREQUIRED\nstring\nA bank account number.\n\nsort_code\nREQUIRED\nstring\nA sort code.\n\nbilling_details\nREQUIRED\nobject\nThe customer's billing_details. name and email are required.\n\nHide billing_details properties\naddress\nREQUIRED\nstring\nThe account holder's address.\n\nShow address properties\nname\nREQUIRED\nstring\nThe account holder's name.\n\nemail\nREQUIRED\nstring\nThe customer's email.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["296",{"pageContent":"Show address properties\nname\nREQUIRED\nstring\nThe account holder's name.\n\nemail\nREQUIRED\nstring\nThe customer's email.\n\n\nJavaScript\n\nstripe\n  .confirmBacsDebitSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      bacs_debit: {\n        sort_code: '108800',\n        account_number: '000123456'\n      },\n      billing_details: {\n        address: {\n          line1: addressLine1,\n          city: addressCity,\n          country: addressCountry,\n          postal_code: addressPostalCode,\n        },\n        email: customerEmail,\n        name: customerName,\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\nConfirm Bacs Debit setupwith an existing payment method\nIf you have already created a PaymentMethod, you can pass its id to payment_method when calling stripe.confirmBacsDebitSetup and it will be used to confirm the SetupIntent.\n\nData argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["297",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\n\nJavaScript\n\nstripe\n  .confirmBacsDebitSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\nstripe.confirmBancontactSetup(clientSecret,data?,options?)\nUse stripe.confirmBancontactSetup in the Set up future payments flow to use Bancontact bank details to set up a SEPA Direct Debit payment method for future payments. When called, it will confirm a SetupIntent with data you provide, and it will automatically redirect the customer to authorize the transaction. Once authorization is complete, the customer will be redirected back to your specified return_url. Note that there are some additional requirements to this flow that are not covered in this reference. Refer to our integration guide for more details.","metadata":{"source":"StripeAPI.md"}}],["298",{"pageContent":"When you confirm a SetupIntent, it needs to have an attached PaymentMethod. In addition to confirming the SetupIntent, this method can automatically create and attach a new PaymentMethod for you. It can also be called with an existing PaymentMethod, or if you have already attached a PaymentMethod you can call this method without needing to provide any additional data. These use cases are detailed in the sections that follow.\n\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the SetupIntent.\n\ndata\noptional\nobject\nData to be sent with the request. Refer to the Setup Intents API for a full list of parameters.\n\nHide data properties\npayment_method\nRECOMMENDED\nobject | string\nThe id of an existing PaymentMethod or an object of collected data. See use cases below for details.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\noptions\noptional\nobject\nAn options object to control the behavior of this method.","metadata":{"source":"StripeAPI.md"}}],["299",{"pageContent":"return_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\noptions\noptional\nobject\nAn options object to control the behavior of this method.\n\nHide options properties\nhandleActions\nboolean\nSet this to false if you want to manually handle the authorization redirect. Default is true.\n\nReturns\nstripe.confirmBancontactSetup will return a Promise which resolves with a result object. This object has either:\n\nresult.setupIntent: the successful SetupIntent.\nresult.error: an error. Refer to the API reference for all possible errors.\nNote that stripe.confirmBancontactSetup may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["300",{"pageContent":"JavaScript\n\nstripe\n  .confirmBancontactSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\nConfirm Bancontact setupwith an existing payment method\nIf you have already created a PaymentMethod, you can pass its id to payment_method when calling stripe.confirmBancontactSetup and it will be used to confirm the SetupIntent.\n\nData argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["301",{"pageContent":"return_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\n\nJavaScript\n\nstripe\n  .confirmBancontactSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\nConfirm Bancontact setupwith self collected data\nYour customer's name and email are required for the Bancontact authorization to succeed. You can pass in these properties directly to create a new PaymentMethod and confirm the SetupIntent.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm with the customer's name and email.\n\nHide payment_method properties\nbilling_details\nREQUIRED\nobject\nThe customer's billing_details. name and email are required.\n\nHide billing_details properties\nname\nREQUIRED\nstring\nThe customer's name.\n\nemail\nREQUIRED\nstring\nThe customer's email.","metadata":{"source":"StripeAPI.md"}}],["302",{"pageContent":"Hide billing_details properties\nname\nREQUIRED\nstring\nThe customer's name.\n\nemail\nREQUIRED\nstring\nThe customer's email.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["303",{"pageContent":"stripe\n  .confirmBancontactSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\nstripe.confirmIdealSetup(clientSecret,data?,options?)","metadata":{"source":"StripeAPI.md"}}],["304",{"pageContent":"})\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\nstripe.confirmIdealSetup(clientSecret,data?,options?)\nUse stripe.confirmIdealSetup in the Set up future payments flow to use iDEAL bank details to set up a SEPA Direct Debit payment method for future payments. When called, it will confirm a SetupIntent with data you provide, and it will automatically redirect the customer to authorize the transaction. Once authorization is complete, the customer will be redirected back to your specified return_url. Note that there are some additional requirements to this flow that are not covered in this reference. Refer to our integration guide for more details.","metadata":{"source":"StripeAPI.md"}}],["305",{"pageContent":"When you confirm a SetupIntent, it needs to have an attached PaymentMethod. In addition to confirming the SetupIntent, this method can automatically create and attach a new PaymentMethod for you. It can also be called with an existing PaymentMethod, or if you have already attached a PaymentMethod you can call this method without needing to provide any additional data. These use cases are detailed in the sections that follow.\n\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the SetupIntent.\n\ndata\noptional\nobject\nData to be sent with the request. Refer to the Setup Intents API for a full list of parameters.\n\nHide data properties\npayment_method\nRECOMMENDED\nobject | string\nThe id of an existing PaymentMethod or an object of collected data. See use cases below for details.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\noptions\noptional\nobject\nAn options object to control the behavior of this method.","metadata":{"source":"StripeAPI.md"}}],["306",{"pageContent":"return_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\noptions\noptional\nobject\nAn options object to control the behavior of this method.\n\nHide options properties\nhandleActions\nboolean\nSet this to false if you want to manually handle the authorization redirect. Default is true.\n\nReturns\nstripe.confirmIdealSetup will return a Promise which resolves with a result object. This object has either:\n\nresult.setupIntent: the successful SetupIntent.\nresult.error: an error. Refer to the API reference for all possible errors.\nNote that stripe.confirmIdealSetup may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["307",{"pageContent":"JavaScript\n\nstripe\n  .confirmIdealSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      ideal: idealBankElement,\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\nConfirm iDEAL setupwith payment data from an Element\nCreate and attach a new SEPA Direct Debit PaymentMethod with stripe.confirmIdealSetup by passing an idealBank Element to payment_method[ideal]. The new PaymentMethod will be created with the data collected by the Element and will be used to confirm the SetupIntent. Additionally, to create a SEPA Direct Debit PaymentMethod, you are required to collect and include the customer’s name and email address.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm using data collected by an idealBank Element.\n\nHide payment_method properties\nideal\nREQUIRED\nElement\nAn idealBank Element.","metadata":{"source":"StripeAPI.md"}}],["308",{"pageContent":"Hide payment_method properties\nideal\nREQUIRED\nElement\nAn idealBank Element.\n\nbilling_details\nREQUIRED\nobject\nThe customer's billing_details. name and email are required.\n\nHide billing_details properties\nname\nREQUIRED\nstring\nThe customer's name.\n\nemail\nREQUIRED\nstring\nThe customer's email.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\n\nJavaScript\n\nstripe\n  .confirmIdealSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      ideal: idealBankElement,\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\nConfirm iDEAL setupwith an existing payment method\nIf you have already created a PaymentMethod, you can pass its id to payment_method when calling stripe.confirmIdealSetup and it will be used to confirm the SetupIntent.","metadata":{"source":"StripeAPI.md"}}],["309",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\n\nJavaScript\n\nstripe\n  .confirmIdealSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\nConfirm iDEAL setupwith self collected data\nIf you already know the customer’s bank or want to collect it yourself, then you do not need to use the idealBank Element. You can pass in the customer’s bank code directly to create a new PaymentMethod and confirm the SetupIntent.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm using data collected by an idealBank Element.\n\nHide payment_method properties\nideal\nREQUIRED\nobject\nAn object detailing the customer's iDEAL bank.\n\nHide ideal properties\nbank\nREQUIRED\nstring\nThe customer's bank.","metadata":{"source":"StripeAPI.md"}}],["310",{"pageContent":"Hide payment_method properties\nideal\nREQUIRED\nobject\nAn object detailing the customer's iDEAL bank.\n\nHide ideal properties\nbank\nREQUIRED\nstring\nThe customer's bank.\n\nbilling_details\nREQUIRED\nobject\nThe customer's billing_details. name and email are required.\n\nHide billing_details properties\nname\nREQUIRED\nstring\nThe customer's name.\n\nemail\nREQUIRED\nstring\nThe customer's email.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["311",{"pageContent":"return_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\n\nJavaScript\n\nstripe\n  .confirmIdealSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      ideal: {\n        bank: 'abn_amro',\n      },\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\nstripe.confirmSepaDebitSetup(clientSecret,data?)\nUse stripe.confirmSepaDebitSetup in the SEPA Direct Debit with Setup Intents flow when the customer submits your payment form. When called, it will confirm the SetupIntent with data you provide. Note that there are some additional requirements to this flow that are not covered in this reference. Refer to our integration guide for more details.","metadata":{"source":"StripeAPI.md"}}],["312",{"pageContent":"When you confirm a SetupIntent, it needs to have an attached PaymentMethod. In addition to confirming the SetupIntent, this method can automatically create and attach a new PaymentMethod for you. It can also be called with an existing PaymentMethod, or if you have already attached a PaymentMethod you can call this method without needing to provide any additional data. These use cases are detailed in the sections that follow.\n\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the SetupIntent.\n\ndata\noptional\nobject\nData to be sent with the request. Refer to the Setup Intents API for a full list of parameters.\n\nHide data properties\npayment_method\nRECOMMENDED\nobject | string\nThe id of an existing PaymentMethod or an object of collected data. See use cases below for details.\n\nReturns\nstripe.confirmSepaDebitSetup will return a Promise which resolves with a result object. This object has either:","metadata":{"source":"StripeAPI.md"}}],["313",{"pageContent":"Returns\nstripe.confirmSepaDebitSetup will return a Promise which resolves with a result object. This object has either:\n\nresult.setupIntent: the successful SetupIntent.\nresult.error: an error. Refer to the API reference for all possible errors.\nNote that stripe.confirmSepaDebitSetup may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["314",{"pageContent":"JavaScript\n\nstripe\n  .confirmSepaDebitSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      sepa_debit: ibanElement,\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\nConfirm SEPA Debit setupwith payment data from an Element\nCreate and attach a new PaymentMethod with stripe.confirmSepaDebitSetup by passing an iban Element to payment_method[sepa_debit]. The new PaymentMethod will be created with the data collected by the Element and will be used to confirm the SetupIntent. Additionally, to create a SEPA Direct Debit PaymentMethod, you are required to collect and include the customer’s name and email address.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm using data collected by an iban Element.\n\nHide payment_method properties\nsepa_debit\nREQUIRED\nElement\nAn iban Element.","metadata":{"source":"StripeAPI.md"}}],["315",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm using data collected by an iban Element.\n\nHide payment_method properties\nsepa_debit\nREQUIRED\nElement\nAn iban Element.\n\nbilling_details\nREQUIRED\nObject\nThe customer's billing_details. name and email are required.\n\nHide billing_details properties\nname\nREQUIRED\nstring\nThe customer's name.\n\nemail\nREQUIRED\nstring\nThe customer's email.\n\n\nJavaScript\n\nstripe\n  .confirmSepaDebitSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      sepa_debit: ibanElement,\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\nConfirm SEPA Debit setupwith an existing payment method\nIf you have already created a PaymentMethod, you can pass its id to payment_method when calling stripe.confirmSepaDebitSetup and it will be used to confirm the SetupIntent.","metadata":{"source":"StripeAPI.md"}}],["316",{"pageContent":"Data argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\n\nJavaScript\n\nstripe\n  .confirmSepaDebitSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\nConfirm SEPA Debit setupwith self collected data\nIf you already know the customer’s IBAN account number or want to collect it yourself, then you do not need to use the iban Element. You can pass in the customer’s account number directly to create a new PaymentMethod and confirm the SetupIntent. Additionally, to create a SEPA Direct Debit PaymentMethod, you are required to collect and include the customer’s name and email address.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm using data collected by an iban Element.\n\nHide payment_method properties\nsepa_debit\nREQUIRED\nobject\nAn object of self-collected IBAN data.","metadata":{"source":"StripeAPI.md"}}],["317",{"pageContent":"Hide payment_method properties\nsepa_debit\nREQUIRED\nobject\nAn object of self-collected IBAN data.\n\nHide sepa_debit properties\niban\nREQUIRED\nstring\nAn IBAN account number.\n\nbilling_details\nREQUIRED\nobject\nThe customer's billing_details. name and email are required.\n\nHide billing_details properties\nname\nREQUIRED\nstring\nThe customer's name.\n\nemail\nREQUIRED\nstring\nThe customer's email.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["318",{"pageContent":"JavaScript\n\nstripe\n  .confirmSepaDebitSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      sepa_debit: {\n        iban: 'DE89370400440532013000',\n      },\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\nstripe.confirmSofortSetup(clientSecret,data?,options?)\nUse stripe.confirmSofortSetup in the Set up future payments flow to use SOFORT bank details to set up a SEPA Direct Debit payment method for future payments. When called, it will confirm a SetupIntent with data you provide, and it will automatically redirect the customer to authorize the transaction. Once authorization is complete, the customer will be redirected back to your specified return_url. Note that there are some additional requirements to this flow that are not covered in this reference. Refer to our integration guide for more details.","metadata":{"source":"StripeAPI.md"}}],["319",{"pageContent":"When you confirm a SetupIntent, it needs to have an attached PaymentMethod. In addition to confirming the SetupIntent, this method can automatically create and attach a new PaymentMethod for you. It can also be called with an existing PaymentMethod, or if you have already attached a PaymentMethod you can call this method without needing to provide any additional data. These use cases are detailed in the sections that follow.\n\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the SetupIntent.\n\ndata\noptional\nobject\nData to be sent with the request. Refer to the Setup Intents API for a full list of parameters.\n\nHide data properties\npayment_method\nRECOMMENDED\nobject | string\nThe id of an existing PaymentMethod or an object of collected data. See use cases below for details.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\noptions\noptional\nobject\nAn options object to control the behavior of this method.","metadata":{"source":"StripeAPI.md"}}],["320",{"pageContent":"return_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\noptions\noptional\nobject\nAn options object to control the behavior of this method.\n\nHide options properties\nhandleActions\nboolean\nSet this to false if you want to manually handle the authorization redirect. Default is true.\n\nReturns\nstripe.confirmSofortSetup will return a Promise which resolves with a result object. This object has either:\n\nresult.setupIntent: the successful SetupIntent.\nresult.error: an error. Refer to the API reference for all possible errors.\nNote that stripe.confirmSofortSetup may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["321",{"pageContent":"JavaScript\n\nstripe\n  .confirmSofortSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      sofort: {\n        country: 'DE'\n      },\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\nConfirm Sofort setupwith an existing payment method\nIf you have already created a PaymentMethod, you can pass its id to payment_method when calling stripe.confirmSofortSetup and it will be used to confirm the SetupIntent.\n\nData argument properties\npayment_method\nREQUIRED\nstring\nThe id of an existing PaymentMethod.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["322",{"pageContent":"return_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\n\nJavaScript\n\nstripe\n  .confirmSofortSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\nConfirm Sofort setupwith self collected data\nYour customer's name, email and the country of their bank are required for the SOFORT authorization to succeed. You can pass in these properties directly to create a new PaymentMethod and confirm the SetupIntent.\n\nData argument properties\npayment_method\nREQUIRED\nobject\nPass an object to confirm with the customer's name and email.\n\nHide payment_method properties\ncountry\nREQUIRED\nstring\nThe country code where customer's bank is located.\n\nbilling_details\nREQUIRED\nobject\nThe customer's billing_details. name and email are required.\n\nHide billing_details properties\nname\nREQUIRED\nstring\nThe customer's name.\n\nemail\nREQUIRED\nstring\nThe customer's email.","metadata":{"source":"StripeAPI.md"}}],["323",{"pageContent":"Hide billing_details properties\nname\nREQUIRED\nstring\nThe customer's name.\n\nemail\nREQUIRED\nstring\nThe customer's email.\n\nreturn_url\nRECOMMENDED\nstring\nThe url your customer will be directed to after they complete authentication.\n\n\nJavaScript\n\nstripe\n  .confirmSofortSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      sofort: {\n        country: 'DE'\n      },\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\nstripe.retrieveSetupIntent(clientSecret)\nRetrieve a SetupIntent using its client secret.\n\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the SetupIntent to retrieve.\n\nReturns\nThis method returns a Promise which resolves with a result object. This object has either:","metadata":{"source":"StripeAPI.md"}}],["324",{"pageContent":"Method parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the SetupIntent to retrieve.\n\nReturns\nThis method returns a Promise which resolves with a result object. This object has either:\n\nresult.setupIntent: a SetupIntent was retrieved successfully.\nresult.error: an error. Refer to the API reference for all possible errors.\nWas this section helpful?YesNo\n\n\nJavaScript\n\nstripe\n  .retrieveSetupIntent(\n    '{SETUP_INTENT_CLIENT_SECRET}',\n  )\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\nstripe.verifyMicrodepositsForSetup(clientSecret,data?)\nUse stripe.verifyMicrodepositsForSetup in the Save details for future payments with pre-authorized debit in Canada or Save details for future payments with ACH Direct Debit flow to verify a customer's bank account with micro-deposits.","metadata":{"source":"StripeAPI.md"}}],["325",{"pageContent":"It should be only called when SetupIntent is in the requires_action state, and contains a next_action field that has a type equal to verify_with_microdeposits. Refer to our integration guide for more details.\n\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the SetupIntent.\n\ndata\noptional\nobject\nData to be sent with the request.\n\nHide data properties\namounts\narray\nAn array of two positive integers, in cents, equal to the values of the micro-deposits sent to the bank account.\n\ndescriptor_code\nstring\nA six-character code starting with SM present in the microdeposit sent to the bank account.\n\nReturns\nstripe.verifyMicrodepositsForSetup will return a Promise which resolves with a result object. This object has either:","metadata":{"source":"StripeAPI.md"}}],["326",{"pageContent":"Returns\nstripe.verifyMicrodepositsForSetup will return a Promise which resolves with a result object. This object has either:\n\nresult.setupIntent: the SetupIntent with a status of succeeded.\nresult.error: an error. Refer to the API reference and our integration guide for all possible errors.\nVerification can fail for several reasons. The failure may happen synchronously as a direct error response, or asynchronously through a payment_intent.payment_failed webhook event. Refer to our integration guide for more details.\n\nWas this section helpful?YesNo\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["327",{"pageContent":"Was this section helpful?YesNo\n\n\nJavaScript\n\nstripe.verifyMicrodepositsForSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    amounts: [32, 45],\n  }\n).then(function(result) {\n  // Handle result.error or result.setupIntent\n});\nstripe.collectBankAccountForSetup(options)\nUse stripe.collectBankAccountForSetup in the Save bank details flow for the ACH Direct Debit payment method to collect the customer’s bank account in your payment form. When called, it will automatically load an on-page modal UI to collect bank account details and verification, and attach the PaymentMethod to the SetupIntent.\n\nMethod parameters\noptions\nREQUIRED\nobject\nData to be sent with the request.\n\nHide options properties\nclientSecret\nREQUIRED\nstring\nThe client secret of the SetupIntent.\n\nparams\nREQUIRED\nobject\nHide params properties\npayment_method_type\nREQUIRED\nstring\nThe payment method type for the bank account details (e.g. us_bank_account)","metadata":{"source":"StripeAPI.md"}}],["328",{"pageContent":"params\nREQUIRED\nobject\nHide params properties\npayment_method_type\nREQUIRED\nstring\nThe payment method type for the bank account details (e.g. us_bank_account)\n\npayment_method_data\nREQUIRED\nobject\nPayment method specific data to be sent with the request\n\nShow payment_method_data properties\nReturns\nWhen the stripe.collectBankAccountForSetup completes successfully, it returns a SetupIntent. If the customer provided their account, the SetupIntent is in the requires_confirmation state. If the customer closed the dialog without providing their account, the SetupIntent is in the requires_payment_method state. Use stripe.confirmUsBankAccountSetup to complete the process.\n\nWas this section helpful?YesNo\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["329",{"pageContent":"Was this section helpful?YesNo\n\n\nJavaScript\n\nstripe.collectBankAccountForSetup(\n  {\n    clientSecret: '{SETUP_INTENT_CLIENT_SECRET}',\n    params: {\n      payment_method_type: 'us_bank_account',\n      payment_method_data: {\n        billing_details: {name: 'Jenny Rosen', email: 'jenny@example.com'},\n      },\n    },\n  }\n).then(function(result) {\n  // Handle result.error or result.setupIntent\n});\nThe Payment Request object\nA PaymentRequest object is used to collect payment information through an interface controlled and styled by the browser itself (i.e., not by you or your page).\n\nSee the Payment Request Button Element quickstart for a high-level overview of when you’d want to do this.\n\nWas this section helpful?YesNo\n\nstripe.paymentRequest(options)\nUse stripe.paymentRequest to create a PaymentRequest object. Creating a PaymentRequest requires that you configure it with an options object.\n\nIn Safari, stripe.paymentRequest uses Apple Pay, and in other browsers it uses the Payment Request API standard.","metadata":{"source":"StripeAPI.md"}}],["330",{"pageContent":"In Safari, stripe.paymentRequest uses Apple Pay, and in other browsers it uses the Payment Request API standard.\n\nMethod parameters\noptions\nREQUIRED\nobject\nA set of options to create this PaymentRequest instance with. These options can be updated using paymentRequest.update.\n\nHide options properties\ncountry\nREQUIRED\nstring\nThe two-letter country code of your Stripe account (e.g., US).\n\ncurrency\nREQUIRED\nstring\nThree character currency code (e.g., usd).\n\ntotal\nREQUIRED\nPaymentItem\nA PaymentItem object. This PaymentItem is shown to the customer in the browser’s payment interface.\n\ndisplayItems\narray\nAn array of PaymentItem objects. These objects are shown as line items in the browser’s payment interface. Note that the sum of the line item amounts does not need to add up to the total amount above.","metadata":{"source":"StripeAPI.md"}}],["331",{"pageContent":"requestPayerName\nRECOMMENDED\nboolean\nBy default, the browser‘s payment interface only asks the customer for actual payment information. A customer name can be collected by setting this option to true. This collected name will appears in the PaymentResponse object.\n\nWe highly recommend you collect name as this also results in collection of billing address for Apple Pay. The billing address can be used to perform address verification and block fraudulent payments. For all other payment methods, the billing address is automatically collected when available.\n\nrequestPayerEmail\nboolean\nSee the requestPayerName option.\n\nrequestPayerPhone\nboolean\nSee the requestPayerName option.\n\nrequestShipping\nboolean\nCollect shipping address by setting this option to true. The address appears in the PaymentResponse.","metadata":{"source":"StripeAPI.md"}}],["332",{"pageContent":"requestPayerPhone\nboolean\nSee the requestPayerName option.\n\nrequestShipping\nboolean\nCollect shipping address by setting this option to true. The address appears in the PaymentResponse.\n\nYou must also supply a valid [ShippingOptions] to the shippingOptions property. This can be up front at the time stripe.paymentRequest is called, or in response to a shippingaddresschange event using the updateWith callback.\n\nshippingOptions\narray\nAn array of ShippingOption objects. The first shipping option listed appears in the browser payment interface as the default option.\n\ndisableWallets\narray\nAn array of wallet strings. Can be one or more of applePay, googlePay, link, and browserCard. Use this option to disable Apple Pay, Google Pay, Link, and/or browser-saved cards.","metadata":{"source":"StripeAPI.md"}}],["333",{"pageContent":"disableWallets\narray\nAn array of wallet strings. Can be one or more of applePay, googlePay, link, and browserCard. Use this option to disable Apple Pay, Google Pay, Link, and/or browser-saved cards.\n\nstripe.paymentRequest abstracts over a number of implementation details to work uniformly across Apple Pay and the Payment Request browser standard. In particular, under the hood we set supportedNetworks to its most permissive setting, dynamically accounting for country and platform. It is currently not possible to override this and make supportedNetworks be more restrictive.\n\nWas this section helpful?YesNo\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["334",{"pageContent":"Was this section helpful?YesNo\n\n\nJavaScript\n\nvar paymentRequest = stripe.paymentRequest({\n  country: 'US',\n  currency: 'usd',\n  total: {\n    label: 'Demo total',\n    amount: 1000,\n  },\n  requestPayerName: true,\n  requestPayerEmail: true,\n});\npaymentRequest.canMakePayment()\nReturns a Promise that resolves with an object detailing if an enabled wallet is ready to pay. If no wallet is available, it resolves with null. The resolution object has the properties in the table below.\n\nNOTE: The paymentRequestButton element automatically shows the correct wallet branding. You shouldn't need to inspect the return object's properties unless you are building your own custom button.\n\nReturn object properties\napplePay\noptional\nboolean\ntrue if Apple Pay wallet is ready to pay. In this case:","metadata":{"source":"StripeAPI.md"}}],["335",{"pageContent":"Return object properties\napplePay\noptional\nboolean\ntrue if Apple Pay wallet is ready to pay. In this case:\n\npaymentRequestButton Element will show as a branded Apple Pay button automatically.\nWhen using a custom button, you‘ll want to show a button that conforms to the Apple Pay Human Interface Guidelines.\ngooglePay\noptional\nboolean\ntrue if Google Pay wallet is ready to pay. In this case:\n\npaymentRequestButton Element will show as a branded Google Pay button automatically.\nWhen using a custom button, you'll want to show a button that conforms to the Google Pay Brand Guidelines.\nlink\noptional\nboolean\ntrue if Link wallet is ready to pay. In this case:\n\npaymentRequestButton Element will show as a branded Link button automatically.\nLink is not supported in custom button configurations.\ncanMakePayment resolves to null outside the following supported cases:","metadata":{"source":"StripeAPI.md"}}],["336",{"pageContent":"Safari 10.1+ (desktop and mobile)\nwith a saved Apple Pay card\nor when in a Private Browsing window\nor when the “Allow websites to check if Apple Pay is set up” preference is disabled\nChrome 61+ (desktop and mobile)\nwith a saved Google Pay card\nor when the browser has a saved card (i.e. autofill)\nFor more information, see Testing your integration.\n\nWas this section helpful?YesNo\n\n\nJavaScript\n\npaymentRequest.canMakePayment().then(result => {\n  if (result) {\n    // Mount paymentRequestButtonElement to the DOM\n  }\n});\n{\n  applePay: true,\n  googlePay: false,\n  link: false,\n}\npaymentRequest.show()\nShows the browser’s payment interface. When using the paymentRequestButton Element, this is called for you automatically. This method must be called as the result of a user interaction (for example, in a click handler).\n\nWas this section helpful?YesNo\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["337",{"pageContent":"Was this section helpful?YesNo\n\n\nJavaScript\n\npaymentRequest.show();\npaymentRequest.update(options)\nPaymentRequest instances can be updated with an options object. Available options are documented below.\n\npaymentRequest.update can only be called when the browser payment interface is not showing. Listen to the click and cancel events to detect if the payment interface has been initiated. To update the PaymentRequest right before the payment interface is initiated, call paymentRequest.update in your click event handler.\n\nMethod parameters\noptions\nREQUIRED\nobject\nA set of options to update this PaymentRequest instance with.\n\nHide options properties\ncurrency\nstring\nThree character currency code (e.g., usd).\n\ntotal\nobject\nA PaymentItem object. This PaymentItem is shown to the customer in the browser’s payment interface.","metadata":{"source":"StripeAPI.md"}}],["338",{"pageContent":"Hide options properties\ncurrency\nstring\nThree character currency code (e.g., usd).\n\ntotal\nobject\nA PaymentItem object. This PaymentItem is shown to the customer in the browser’s payment interface.\n\ndisplayItems\narray\nAn array of PaymentItem objects. These payment items are shown as line items in the browser’s payment interface. Note that the sum of the line item amounts does not need to add up to the total amount above.\n\nshippingOptions\narray\nAn array of ShippingOption objects. The first shipping option listed appears in the browser payment interface as the default option.\n\nWas this section helpful?YesNo\n\n\nJavaScript\n\npaymentRequest.update({\n  total: {\n    label: 'Demo total',\n    amount: 2000,\n  },\n  shippingOptions: [\n    {\n      id: 'basic',\n      label: 'Ground shipping',\n      detail: 'Ground shipping via UPS or FedEx',\n      amount: 995,\n    },\n  ],\n});\nPaymentRequest events\nPaymentRequest instances emit several different types of events.","metadata":{"source":"StripeAPI.md"}}],["339",{"pageContent":"paymentRequest.on('token',handler)\nStripe.js automatically creates a Token after the customer is done interacting with the browser’s payment interface. To access the created Token, listen for this event.\n\nMethod parameters\nevent\nREQUIRED\nstring\nThe name of the event. In this case, token.\n\nhandler\nREQUIRED\nfunction\nA callback function that will be called with a PaymentResponse object when the event is fired. The PaymentResponse object will contain a token field.\n\nWas this section helpful?YesNo\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["340",{"pageContent":"Was this section helpful?YesNo\n\n\nJavaScript\n\npaymentRequest.on('token', function(event) {\n  // event.token is available\n});\n{\n  token: {\n    id: \"tok_1FlM3yDbZnUGiCm0LMM4gqzs\",\n    object: \"token\",\n    // ...\n  },\n  complete: function(status) {\n    // Call this when you have processed the token data provided by\n    // the API. Note that you must must call complete within 30\n    // seconds.\n  },\n  ...,\n}\npaymentRequest.on('paymentmethod',handler)\nStripe.js automatically creates a PaymentMethod after the customer is done interacting with the browser’s payment interface. To access the created PaymentMethod, listen for this event.\n\nMethod parameters\nevent\nREQUIRED\nstring\nThe name of the event. In this case, paymentmethod.\n\nhandler\nREQUIRED\nfunction\nA callback function that will be called with a PaymentResponse object when the event is fired. The PaymentResponse object will contain a paymentMethod field.\n\nWas this section helpful?YesNo\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["341",{"pageContent":"Was this section helpful?YesNo\n\n\nJavaScript\n\npaymentRequest.on('paymentmethod', function(event) {\n  // event.paymentMethod is available\n});\n{\n  paymentMethod: {\n    id: \"src_1FlM3yDbZnUGiCm0P8eqjAuI\",\n    object: \"payment_method\",\n    // ...,\n  },\n  complete: function(status) {\n    // Call this when you have processed the payment method data\n    // provided by the API. Note that you must must call complete\n    // within 30 seconds.\n  },\n  ...,\n}\npaymentRequest.on('source',handler)\nStripe.js automatically creates a Source after the customer is done interacting with the browser’s payment interface. To access the created source, listen for this event.\n\nMethod parameters\nevent\nREQUIRED\nstring\nThe name of the event. In this case, source.\n\nhandler\nREQUIRED\nfunction\nA callback function that will be called with a PaymentResponse object when the event is fired. The PaymentResponse object will contain a source field.\n\nWas this section helpful?YesNo\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["342",{"pageContent":"Was this section helpful?YesNo\n\n\nJavaScript\n\npaymentRequest.on('source', function(event) {\n  // event.source is available\n});\n{\n  source: {\n    id: \"src_1FlM3yDbZnUGiCm0P8eqjAuI\",\n    object: \"source\",\n    // ...\n  }\n  complete: function(status) {\n    // Call this when you have processed the source data provided\n    // by the API. Note that you must must call complete within 30\n    // seconds.\n  },\n  ...,\n}\npaymentRequest.on('cancel',handler)\nThe cancel event is emitted from a PaymentRequest when the browser‘s payment interface is dismissed.\n\nNote that in some browsers, the payment interface may be dismissed by the customer even after they authorize the payment. This means that you may receive a cancel event on your PaymentRequest object after receiving a token, paymentmethod, or source event. If you’re using the cancel event as a hook for canceling the customer’s order, make sure you also refund the payment that you just created.","metadata":{"source":"StripeAPI.md"}}],["343",{"pageContent":"Method parameters\nevent\nREQUIRED\nstring\nThe name of the event. In this case, cancel.\n\nhandler\nREQUIRED\nfunction\nA callback function that you will provide that will be called when the event is fired.\n\nWas this section helpful?YesNo\n\n\nJavaScript\n\npaymentRequest.on('cancel', function() {\n  // handle cancel event\n});\npaymentRequest.on('shippingaddresschange',handler)\nThe shippingaddresschange event is emitted from a PaymentRequest whenever the customer selects a new address in the browser's payment interface.\n\nMethod parameters\nevent\nREQUIRED\nstring\nThe name of the event. In this case, shippingaddresschange.\n\nhandler\nREQUIRED\nfunction\nhandler(event) => void is a callback function that you provide that will be called when the event is fired.\n\nWhen called it will be passed an event object with the following properties:","metadata":{"source":"StripeAPI.md"}}],["344",{"pageContent":"When called it will be passed an event object with the following properties:\n\nHide handler event object properties\nupdateWith\nfunction\nupdateWith(updateDetails) => void is a Stripe.js provided function that is called with an UpdateDetails object to merge your updates into the current PaymentRequest object. Note that if you subscribe to shippingaddresschange events, then you must call updateWith within 30 seconds.\n\nshippingAddress\nShippingAddress\nThe customer's selected ShippingAddress.\n\nTo maintain privacy, browsers may anonymize the shipping address by removing sensitive information that is not necessary to calculate shipping costs. Depending on the country, some fields can be missing or partially redacted. For example, the shipping address in the U.S. may only contain a city, state, and ZIP code. The full shipping address appears in the PaymentResponse object after the purchase is confirmed in the browser’s payment interface\n\nWas this section helpful?YesNo\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["345",{"pageContent":"Was this section helpful?YesNo\n\n\nJavaScript\n\npaymentRequest.on('shippingaddresschange', function(event) {\n  var updateWith = event.updateWith;\n  var shippingAddress = event.shippingAddress;\n  // handle shippingaddresschange event\n\n  // call event.updateWith within 30 seconds\n  updateWith(updateDetails);\n});\n{\n  shippingAddress: {\n    country: \"US\",\n    addressLine: [\n      \"185 Berry St.\",\n      \"Suite 500\",\n    ],\n    region: \"CA\",\n    city: \"San Francisco\",\n    ...,\n  },\n  updateWith: function(updateDetails) {\n    // Call this function to merge your updates into the current\n    // PaymentRequest object. Note that you must call this\n    // within 30 seconds.\n  },\n}\npaymentRequest.on('shippingoptionchange',handler)\nThe shippingoptionchange event is emitted from a PaymentRequest whenever the customer selects a new shipping option in the browser's payment interface.\n\nMethod parameters\nevent\nREQUIRED\nstring\nThe name of the event. In this case, shippingoptionchange.","metadata":{"source":"StripeAPI.md"}}],["346",{"pageContent":"Method parameters\nevent\nREQUIRED\nstring\nThe name of the event. In this case, shippingoptionchange.\n\nhandler\nREQUIRED\nfunction\nhandler(event) => void is a callback function that you provide that will be called when the event is fired.\n\nWhen called it will be passed an event object with the following properties:\n\nHide handler event object properties\nupdateWith\nfunction\nupdateWith(updateDetails) => void is a Stripe.js provided function that is called with an UpdateDetails object to merge your updates into the current PaymentRequest object. Note that if you subscribe to shippingoptionchange events, then you must call updateWith within 30 seconds.\n\nshippingOption\nShippingOption\nThe customer's selected ShippingOption.\n\nWas this section helpful?YesNo\n\n\nJavaScript\n\npaymentRequest.on('shippingoptionchange', function(event) {\n  var updateWith = event.updateWith;\n  var shippingOption = event.shippingOption;\n  // handle shippingoptionchange event","metadata":{"source":"StripeAPI.md"}}],["347",{"pageContent":"JavaScript\n\npaymentRequest.on('shippingoptionchange', function(event) {\n  var updateWith = event.updateWith;\n  var shippingOption = event.shippingOption;\n  // handle shippingoptionchange event\n\n  // call event.updateWith within 30 seconds\n  updateWith(updateDetails);\n});\n{\n  shippingOption: {\n    id: \"someUniqueID\",\n    label: \"Ground\",\n    detail: \"UPS standard ground shipping\",\n    amount: 999,\n  },\n  updateWith: function(updateDetails) {\n    // Call this function to merge your updates into the current\n    // PaymentRequest object. Note that you must must call this\n    // within 30 seconds.\n  },\n}\nPayment Methods\nPaymentMethod objects represent your customer's payment instruments. They can be used with PaymentIntents to collect payments or saved to Customer objects to store instrument details for future payments.\n\nRelated guides: Payment Methods and More Payment Scenarios.\n\nWas this section helpful?YesNo","metadata":{"source":"StripeAPI.md"}}],["348",{"pageContent":"Related guides: Payment Methods and More Payment Scenarios.\n\nWas this section helpful?YesNo\n\nstripe.createPaymentMethod(paymentMethodData)\nUse stripe.createPaymentMethod to convert payment information collected by elements into a PaymentMethod object that you safely pass to your server to use in an API call.\n\nNOTE: In most integrations, you will not need to use this method. Instead, use methods like stripe.confirmCardPayment, which will automatically create a PaymentMethod when you confirm a PaymentIntent.\n\nMethod parameters\npaymentMethodData\nREQUIRED\nobject\nRefer to the PaymentMethod API for a full list of parameters.\n\nHide paymentMethodData properties\ntype\nREQUIRED\nstring\nThe type of the PaymentMethod to create. Refer to the PaymentMethod API for all possible values.\n\ncard\nElement\nA card or cardNumber Element.\n\nau_becs_debit\nElement\nAn auBankAccount Element.\n\nfpx\nElement\nAn fpx Element.\n\nfpx[bank]\nstring\nThe customer's bank.\n\nnetbanking[bank]\nstring\nThe customer's bank.","metadata":{"source":"StripeAPI.md"}}],["349",{"pageContent":"card\nElement\nA card or cardNumber Element.\n\nau_becs_debit\nElement\nAn auBankAccount Element.\n\nfpx\nElement\nAn fpx Element.\n\nfpx[bank]\nstring\nThe customer's bank.\n\nnetbanking[bank]\nstring\nThe customer's bank.\n\nideal\nElement\nAn idealBank Element.\n\nideal[bank]\nstring\nThe customer's bank.\n\nsepa_debit\nElement\nAn iban Element.\n\nsepa_debit[iban]\nstring\nAn IBAN account number.\n\nupi[vpa]\nstring\nThe customer's VPA.\n\nbilling_details\nobject\nBilling information associated with the PaymentMethod that may be used or required by particular types of payment methods.\n\nReturns\nstripe.createPaymentMethod(paymentMethodData) returns a Promise which resolves with a result object. This object has either:\n\nresult.paymentMethod: a PaymentMethod was created successfully.\nresult.error: there was an error. This includes client-side validation errors. Refer to the API reference for all possible errors.\nWas this section helpful?YesNo\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["350",{"pageContent":"JavaScript\n\nstripe\n  .createPaymentMethod({\n    type: 'card',\n    card: cardElement,\n    billing_details: {\n      name: 'Jenny Rosen',\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.paymentMethod\n  });\nTokens & Sources\nThe Charges API is the fastest way to accept U.S. and Canadian payments for your startup or prototype. Stripe.js provides the following methods to create Tokens and Sources, which are part of the Charges API.\n\nTo accept payments globally, use the Payment Intents API instead.\n\nWas this section helpful?YesNo\n\nstripe.createToken(cardElement,data?)\nUse stripe.createToken to convert information collected by card elements into a single-use Token that you safely pass to your server to use in an API call.","metadata":{"source":"StripeAPI.md"}}],["351",{"pageContent":"stripe.createToken(cardElement,data?)\nUse stripe.createToken to convert information collected by card elements into a single-use Token that you safely pass to your server to use in an API call.\n\nMethod parameters\ncardElement\nREQUIRED\nElement\nThe card Element you wish to tokenize data from. If applicable, the Element tokenizes by pulling data from other elements you’ve created on the same instance of Elements—you only need to supply one Element as the parameter.\n\ndata\noptional\nobject\nAn object containing additional payment information you might have collected.\n\nAlthough these fields are optional, we highly recommend collecting name and address. This information can be used to perform a number of verifications, such as CVC, ZIP, and address verification. Radar includes built-in rules that can block payments where the ZIP or CVC verifications with the cardholder’s bank failed.\n\nHide data properties\nname\nRECOMMENDED\nstring\nCardholder name.","metadata":{"source":"StripeAPI.md"}}],["352",{"pageContent":"Hide data properties\nname\nRECOMMENDED\nstring\nCardholder name.\n\naddress_line1\nstring\naddress_line2\nstring\naddress_city\nstring\naddress_state\nstring\naddress_zip\nstring\naddress_country\nRECOMMENDED\nstring\nA two character country code (for example, US).\n\ncurrency\nstring\nRequired in order to add the card to a Connect account (in all other cases, this parameter is not used).\n\nReturns\nstripe.createToken returns a Promise which resolves with a result object. This object has either:\n\nresult.token: a Token was created successfully.\nresult.error: there was an error. This includes client-side validation errors. Refer to the API reference for all possible errors.\nWas this section helpful?YesNo\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["353",{"pageContent":"JavaScript\n\nstripe.createToken(cardElement).then(function(result) {\n  // Handle result.error or result.token\n});\nstripe.createSource(element,sourceData)\nUse stripe.createSource to convert payment information collected by elements into a Source object that you safely pass to your server to use in an API call. See the Sources documentation for more information about sources.\n\nMethod parameters\nelement\nREQUIRED\nobject\nThe Element containing payment information. If applicable, the Element pulls data from other elements you’ve created on the same Elements instance.\n\nsourceData\nREQUIRED\nobject\nA required object containing the type of Source you want to create, and any additional payment information that you have collected. See the Sources API reference for details.\n\nReturns\nThis method returns a Promise which resolves with a result object. This object has either:","metadata":{"source":"StripeAPI.md"}}],["354",{"pageContent":"Returns\nThis method returns a Promise which resolves with a result object. This object has either:\n\nresult.source: a Source was created successfully.\nresult.error: there was an error. This includes client-side validation errors. Refer to the API reference for all possible errors.\nWas this section helpful?YesNo\n\n\nJavaScript\n\nstripe\n  .createSource(ibanElement, {\n    type: 'sepa_debit',\n    currency: 'eur',\n    owner: {\n      name: 'Jenny Rosen',\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.source\n  });\nstripe.createSource(sourceData)\nUse stripe.createSource to convert raw payment information into a Source object that you can safely pass to your server for use in an API call. See the Sources documentation for more information about sources.\n\nMethod parameters\nsourceData\nREQUIRED\nobject\nA required object containing the type of Source you want to create, and any additional payment information that you have collected. See the Sources API reference for details.","metadata":{"source":"StripeAPI.md"}}],["355",{"pageContent":"Returns\nThis method returns a Promise which resolves with a result object. This object has either:\n\nresult.source: a Source was created successfully.\nresult.error: there was an error. This includes client-side validation errors. Refer to the API reference for all possible errors.\nYou cannot pass raw card information to stripe.createSource(sourceData). Instead, you must gather card information in an Element and use stripe.createSource(element, sourceData). You can also pass an existing card token to convert it into a Source object.\n\nWas this section helpful?YesNo\n\n\nJavaScript\n\nstripe\n  .createSource({\n    type: 'ideal',\n    amount: 1099,\n    currency: 'eur',\n    owner: {\n      name: 'Jenny Rosen',\n    },\n    redirect: {\n      return_url: 'https://shop.example.com/crtA6B28E1',\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.source\n  });\nstripe.retrieveSource(source)\nRetrieve a Source using its unique ID and client secret.","metadata":{"source":"StripeAPI.md"}}],["356",{"pageContent":"Method parameters\nsource\nREQUIRED\nobject\nAn object containing the unique ID and client secret for a Source.\n\nYou can use a Source object created with stripe.createSource as the argument to stripe.retrieveSource, as every Source object has both id and client_secret keys.\n\nHide source properties\nid\nREQUIRED\nstring\nUnique identifier of the Source.\n\nclient_secret\nREQUIRED\nstring\nA secret available to the web client that created the Source, for purposes of retrieving the Source later from that same client.\n\nReturns\nThis method returns a Promise which resolves with a result object. This object has either:\n\nresult.source: a Source was retrieved successfully.\nresult.error: there was an error. This includes client-side validation errors. Refer to the API reference for all possible errors.\nWas this section helpful?YesNo\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["357",{"pageContent":"JavaScript\n\nstripe\n  .retrieveSource({\n    id: '{SOURCE_ID}',\n    client_secret: '{SOURCE_CLIENT_SECRET}',\n  })\n  .then(function(result) {\n    // Handle result.error or result.source\n  });\nstripe.verifyIdentity(clientSecret)\nUse stripe.verifyIdentity to display an Identity modal that securely collects verification information.\n\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the VerificationSession.\n\nReturns\nThis method returns a Promise which resolves with a result object. If this method fails, the result object will contain a localized error message in the error.message field.\n\nWas this section helpful?YesNo\n\n\nJavaScript\n\nvar stripe = Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx');","metadata":{"source":"StripeAPI.md"}}],["358",{"pageContent":"Was this section helpful?YesNo\n\n\nJavaScript\n\nvar stripe = Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\n// Call your backend to create the VerificationSession\nfetch('/create-verification-session', {\n  method: 'POST',\n})\n.then(function(response) {\n  return response.json();\n})\n.then(function(verificationSession) {\n  return stripe.verifyIdentity(verificationSession.client_secret);\n})\n.then(function(result) {\n  // If `verifyIdentity` fails due to a browser or network\n  // error, you should display the localized error message to your\n  // customer using `error.message`.\n  if (result.error) {\n    alert(result.error.message);\n  }\n});\nstripe.createEphemeralKeyNonce(options)\nUse stripe.createEphemeralKeyNonce in the Issuing Elements flow to create an ephemeral key nonce. Refer to our integration guide for more details.\n\nMethod parameters\noptions\nREQUIRED\nobject\nData to be sent with the request.","metadata":{"source":"StripeAPI.md"}}],["359",{"pageContent":"Method parameters\noptions\nREQUIRED\nobject\nData to be sent with the request.\n\nHide options properties\nissuingCard\nREQUIRED\nstring\nThe id of an existing Issuing card. The nonce returned by this method can only be used to retrieve this Issuing card.\n\nReturns\nstripe.createEphemeralKeyNonce will return a Promise which resolves with a result object. This object has either:\n\nresult.nonce: the successful ephemeral key nonce.\nresult.error: an error. Refer to the API reference for all possible errors.\nWas this section helpful?YesNo","metadata":{"source":"StripeAPI.md"}}],["360",{"pageContent":"result.nonce: the successful ephemeral key nonce.\nresult.error: an error. Refer to the API reference for all possible errors.\nWas this section helpful?YesNo\n\n\nstripe\n  .createEphemeralKeyNonce({\n    issuingCard: 'ic_1ITi6XKYfU8ZP6raDAXem8ql'\n  })\n  .then(function(result) {\n    // Handle result.error or result.nonce\n  });\nstripe.retrieveIssuingCard(issuingCard,options)DEPRECATED\nUse stripe.retrieveIssuingCard in the Issuing Elements flow to retrieve an Issuing card. Note that once you retrieve the card, you still need to display the card details in Elements. You need to pass in the issuing_elements_2 beta to the Stripe instance to access this method. Refer to our integration guide for more details.\n\nMethod parameters\nissuingCard\nREQUIRED\nstring\nThe id of an existing Issuing card.\n\noptions\nREQUIRED\nobject\nAn options object to configure the Issuing card retrieved from this method.","metadata":{"source":"StripeAPI.md"}}],["361",{"pageContent":"Method parameters\nissuingCard\nREQUIRED\nstring\nThe id of an existing Issuing card.\n\noptions\nREQUIRED\nobject\nAn options object to configure the Issuing card retrieved from this method.\n\nHide options properties\nephemeralKeySecret\nREQUIRED\nstring\nThe ephemeral key secret retrieved from the API. The card id used to retrieve the ephemeral key must match the card id passed into this method. See the integration guide for more details.\n\nnonce\nREQUIRED\nstring\nThe ephemeral key nonce returned by stripe.createEphemeralKeyNonce. The card id used to create the nonce must match the card id passed into this method.\n\nexpand\narray\nAn array of Card fields to expand in the response from the Stripe API. Can be one or more of number, cvc, and pin.number. Expand fields as required to display Issuing Elements for those fields.\n\nReturns\nstripe.retrieveIssuingCard will return a Promise which resolves with a result object. This object has either:","metadata":{"source":"StripeAPI.md"}}],["362",{"pageContent":"Returns\nstripe.retrieveIssuingCard will return a Promise which resolves with a result object. This object has either:\n\nresult.issuingCard: the successful Issuing card.\nresult.error: an error. Refer to the API reference for all possible errors.\nWas this section helpful?YesNo\n\n\nstripe.retrieveIssuingCard(\n  'ic_1ITi6XKYfU8ZP6raDAXem8ql',\n  {\n    ephemeralKeySecret: 'ek_test_YWNjdF8xSVRpNkhLWWZVOFpQNnJhLGNYbEpnTEJXUUN4aWhsUHFwMXR1S2NsSDdnc3JTdWY_00GReOJAVP ',\n    nonce: 'ephkn_pub_i4LvSOayGrKKHm6DYLOOKmzX',\n  },\n).then(function(result) {\n  // Handle result.error or result.issuingCard\n});\nFinancial Connections\nStripe Financial Connections enables your users to securely share their financial data by linking their external financial accounts to your business.","metadata":{"source":"StripeAPI.md"}}],["363",{"pageContent":"stripe.collectFinancialConnectionsAccounts(options)\nUse stripe.collectFinancialConnectionsAccounts in the Add a Financial Connections Account to retrieve data flow. When called, it will load the Authentication Flow, an on-page modal UI which allows your user to securely link their external financial account(s).\n\nMethod parameters\noptions\nREQUIRED\nobject\nHide options properties\nclientSecret\nREQUIRED\nstring\nThe client_secret of the Financial Connections Session.\n\nReturns\nstripe.collectFinancialConnectionsAccounts returns a Promise which resolves with a result object. The object has either:","metadata":{"source":"StripeAPI.md"}}],["364",{"pageContent":"Returns\nstripe.collectFinancialConnectionsAccounts returns a Promise which resolves with a result object. The object has either:\n\nresult.financialConnectionsSession: the updated Financial Connections Session object. The accounts property will contain the list of accounts collected during this session. If the user chooses to link no accounts, or exits the Authentication Flow early, the accounts array will be empty.\nresult.error: there was an error launching the Authentication Flow. For example, the Financial Connections Session has expired, or the Financial Connections Session has already been used.\nWas this section helpful?YesNo\n\n\nJavaScript\n\nstripe.collectFinancialConnectionsAccounts({\n  clientSecret: '{FINANCIAL_CONNECTIONS_SESSION_CLIENT_SECRET}'\n})\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n      console.log(result.error.message);","metadata":{"source":"StripeAPI.md"}}],["365",{"pageContent":"// Handle next step based on length of accounts array\n    } else if (result.financialConnectionsSession.accounts.length === 0) {\n      console.log('No accounts were linked');\n    } else {\n      console.log(result.financialConnectionsSession.accounts)\n    }\n  });\nstripe.collectBankAccountToken(options)\nUse stripe.collectBankAccountToken in the Add a Financial Connections Account to a US Custom Connect account flow. When called, it will load the Authentication Flow, an on-page modal UI which allows your user to securely link their external financial account for payouts.\n\nMethod parameters\noptions\nREQUIRED\nobject\nHide options properties\nclientSecret\nREQUIRED\nstring\nThe client_secret of the Financial Connections Session.\n\nReturns\nstripe.collectBankAccountToken returns a Promise which resolves with a result object.\n\nIf an external financial account was successfully collected, the result object will contain:","metadata":{"source":"StripeAPI.md"}}],["366",{"pageContent":"Returns\nstripe.collectBankAccountToken returns a Promise which resolves with a result object.\n\nIf an external financial account was successfully collected, the result object will contain:\n\nresult.token: a bank account Token.\nresult.financialConnectionsSession: the updated Financial Connections Session object. The accounts array will contain a single Financial Connections Account (representing the same external financial account used for result.token).\nIf there was an error launching the Authentication Flow, the result object will contain:\n\nresult.error: there was an error launching the Authentication Flow. For example, the Financial Connections Session has expired, or the Financial Connections Session has already been used.\nIf the user chooses to link no accounts, or exits the Authentication Flow early, the result object will contain:\n\nresult.financialConnectionsSession: the updated Financial Connections Session object. The accounts array will be empty.\nWas this section helpful?YesNo","metadata":{"source":"StripeAPI.md"}}],["367",{"pageContent":"result.financialConnectionsSession: the updated Financial Connections Session object. The accounts array will be empty.\nWas this section helpful?YesNo\n\n\nJavaScript\n\nstripe.collectBankAccountToken({\n  clientSecret: '{FINANCIAL_CONNECTIONS_SESSION_CLIENT_SECRET}'\n})\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n      console.log(result.error.message);\n    } else if (result.token) {\n      // Use result.token to set your user's external payout account\n      console.log(result.token)\n    }\n  });\nThe CssFontSource object\nThis object is used to pass custom fonts via a stylesheet URL when creating an Elements object.\n\nObject Properties\ncssSrc\nstring\nA relative or absolute URL pointing to a CSS file with @font-face definitions, for example:\n\nhttps://fonts.googleapis.com/css?family=Open+Sans\nNote that if you are using a content security policy (CSP), additional directives may be necessary.\n\nWas this section helpful?YesNo","metadata":{"source":"StripeAPI.md"}}],["368",{"pageContent":"https://fonts.googleapis.com/css?family=Open+Sans\nNote that if you are using a content security policy (CSP), additional directives may be necessary.\n\nWas this section helpful?YesNo\n\n{\n  cssSrc: 'https://fonts.googleapis.com/css?family=Open+Sans'\n}\nThe CustomFontSource object\nThis object is used to pass custom fonts when creating an Elements object.\n\nObject Properties\nfamily\nREQUIRED\nstring\nThe name to give the font.\n\nsrc\nREQUIRED\nstring\nA valid src value pointing to your custom font file. This is usually (though not always) a link to a file with a .woff , .otf, or .svg suffix.\n\ndisplay\nstring\nA valid font-display value.\n\nstyle\nstring\nOne of normal, italic, oblique. Defaults to normal.\n\nunicodeRange\nstring\nA valid unicode-range value.\n\nweight\nstring\nA valid font-weight. Note that this is a string, not a number.\n\nWas this section helpful?YesNo","metadata":{"source":"StripeAPI.md"}}],["369",{"pageContent":"unicodeRange\nstring\nA valid unicode-range value.\n\nweight\nstring\nA valid font-weight. Note that this is a string, not a number.\n\nWas this section helpful?YesNo\n\n{\n  family: 'Avenir',\n  src: 'url(https://my-domain.com/assets/avenir.woff)',\n  weight: '500',\n}\nThe Contact object\nThe Contact object describes a saved contact passed in to the Address Element.\n\nObject Properties\nname\nstring\nThe name of the contact. This might be a person, or a business name.\n\naddress\nobject\nThe address of the contact.\n\nHide address properties\nline1\nREQUIRED\nstring\nline2\nstring\ncity\nREQUIRED\nstring\nThe name of a city, town, village, etc.\n\nstate\nREQUIRED\nstring\nThe most coarse subdivision of a country. Depending on the country, this might correspond to a state, a province, an oblast, a prefecture, or something else along these lines.\n\npostal_code\nREQUIRED\nstring\nThe postal code or ZIP code, also known as PIN code in India.","metadata":{"source":"StripeAPI.md"}}],["370",{"pageContent":"postal_code\nREQUIRED\nstring\nThe postal code or ZIP code, also known as PIN code in India.\n\ncountry\nREQUIRED\nstring\nTwo-letter country code, capitalized. Valid two-letter country codes are specified by ISO3166 alpha-2.\n\nphone\nstring\nThe phone number of the contact.\n\nThe fields.phone option must be set to always if this property is specified.\n\nWas this section helpful?YesNo\n\n{\n  name: 'Jenny Rosen',\n  address: {\n    line1: '185 Berry St.',\n    city: 'San Francisco',\n    state: 'CA',\n    postal_code: '94941',\n    country: 'US',\n  },\n}\nThe PaymentItem object\nThe PaymentItem object is used to configure a PaymentRequest.\n\nObject Properties\namount\nREQUIRED\nnumber\nThe amount in the currency's subunit (e.g. cents, yen, etc.)\n\nlabel\nREQUIRED\nstring\nA name that the browser shows the customer in the payment interface.","metadata":{"source":"StripeAPI.md"}}],["371",{"pageContent":"Object Properties\namount\nREQUIRED\nnumber\nThe amount in the currency's subunit (e.g. cents, yen, etc.)\n\nlabel\nREQUIRED\nstring\nA name that the browser shows the customer in the payment interface.\n\npending\nboolean\nIf you might change this amount later (for example, after you have calcluated shipping costs), set this to true. Note that browsers treat this as a hint for how to display things, and not necessarily as something that will prevent submission.\n\nWas this section helpful?YesNo\n\n{\n  amount: 2000,\n  label: 'A soft cotton shirt',\n}\nThe PaymentResponse object\nThis object is returned as the payload of the PaymentRequest object's token, paymentmethod, or source event handlers.\n\nObject Properties\ntoken\nobject\nA Token object. Present if this was the result of a token event listener.\n\npaymentMethod\nobject\nA PaymentMethod object. Present if this was the result of a paymentmethod event listener.\n\nsource\nobject\nA Source object. Present if this was the result of a source event listener.","metadata":{"source":"StripeAPI.md"}}],["372",{"pageContent":"paymentMethod\nobject\nA PaymentMethod object. Present if this was the result of a paymentmethod event listener.\n\nsource\nobject\nA Source object. Present if this was the result of a source event listener.\n\ncomplete\nfunction\ncomplete(status) => void is a Stripe.js provided function. Call this when you have processed the token data provided by the API. Note that you must must call complete within 30 seconds.\n\nAccepts one of the following values:\n\nHide allowed status values\n'success'\nvalue\nReport to the browser that the payment was successful, and that it can close any active payment interface.\n\n'fail'\nvalue\nReport to the browser that you were unable to process the customer‘s payment. Browsers may re-show the payment interface, or simply show a message and close.\n\n'invalid_payer_name'\nvalue\nEquivalent to fail, except that the browser can choose to show a more-specific error message.\n\n'invalid_payer_phone'\nvalue\nEquivalent to fail, except that the browser can choose to show a more-specific error message.","metadata":{"source":"StripeAPI.md"}}],["373",{"pageContent":"'invalid_payer_phone'\nvalue\nEquivalent to fail, except that the browser can choose to show a more-specific error message.\n\n'invalid_payer_email'\nvalue\nEquivalent to fail, except that the browser can choose to show a more-specific error message.\n\n'invalid_shipping_address'\nvalue\nEquivalent to fail, except that the browser can choose to show a more-specific error message.\n\npayerName\nstring\nThe customer's name. Only present if it was explicitly asked for when creating the PaymentRequest object.\n\npayerEmail\nstring\nThe customer's email. Only present if it was explicitly asked for when creating the PaymentRequest object.\n\npayerPhone\nstring\nThe customer's phone. Only present if it was explicitly asked for when creating the PaymentRequest object.\n\nshippingAddress\nShippingAddress\nThe final ShippingAddress the customer selected.\n\nOnly populated when requestShipping is true when creating the PaymentRequest object, and you've supplied at least one ShippingOption.","metadata":{"source":"StripeAPI.md"}}],["374",{"pageContent":"Only populated when requestShipping is true when creating the PaymentRequest object, and you've supplied at least one ShippingOption.\n\nshippingOption\nShippingOption\nThe final ShippingOption the customer selected.\n\nOnly present when requestShipping is true when creating the PaymentRequest object, and you've supplied at least one ShippingOption.\n\nwalletName\nstring\nThe unique name of the wallet the customer chose to authorize payment. For example, browserCard.\n\nWas this section helpful?YesNo","metadata":{"source":"StripeAPI.md"}}],["375",{"pageContent":"walletName\nstring\nThe unique name of the wallet the customer chose to authorize payment. For example, browserCard.\n\nWas this section helpful?YesNo\n\n{\n  source: {\n    id: \"src_1FlM3yDbZnUGiCm0P8eqjAuI\",\n    object: \"source\",\n    // ...\n  }\n  complete: function(status) {\n    // Call this when you have processed the source data provided\n    // by the API. Note that you must must call complete within 30\n    // seconds.\n  },\n  payerName: 'Jenny Rosen',\n  payerEmail: 'jenny@example.com',\n  walletName: 'browserCard',\n  shippingOption: {\n    id: 'basic',\n    label: 'Ground shipping',\n    detail: 'Ground shipping via UPS or FedEx',\n    amount: 995,\n  }\n}\nThe ShippingOption object\nThe ShippingOption object describes a shipping method used with a PaymentRequest.\n\nObject Properties\nid\nstring\nA unique ID you create to keep track of this shipping option. You’ll be told the ID of the selected option on changes and on completion.\n\nlabel\nstring\nA short label for this shipping option.","metadata":{"source":"StripeAPI.md"}}],["376",{"pageContent":"label\nstring\nA short label for this shipping option.\n\ndetail\nstring\nA longer description of this shipping option.\n\namount\nnumber\nThe amount to show for this shipping option. If the cost of this shipping option depends on the shipping address the customer enters, listen for the shippingaddresschange event.\n\nWas this section helpful?YesNo\n\n{\n  id: 'basic',\n  label: 'Ground shipping',\n  detail: 'Ground shipping via UPS or FedEx',\n  amount: 995,\n}\nThe ShippingAddress object\nThe ShippingAddress object describes a shipping address collected with a PaymentRequest.\n\nObject Properties\ncountry\nstring\nTwo-letter country code, capitalized. Valid two-letter country codes are specified by ISO3166 alpha-2.\n\naddressLine\narray\nAn array of address line items. For example, 185 Berry St., Suite 500, P.O. Box 12345, etc.\n\nregion\nstring\nThe most coarse subdivision of a country. Depending on the country, this might correspond to a state, a province, an oblast, a prefecture, or something else along these lines.","metadata":{"source":"StripeAPI.md"}}],["377",{"pageContent":"region\nstring\nThe most coarse subdivision of a country. Depending on the country, this might correspond to a state, a province, an oblast, a prefecture, or something else along these lines.\n\ncity\nstring\nThe name of a city, town, village, etc.\n\npostalCode\nstring\nThe postal code or ZIP code, also known as PIN code in India.\n\nrecipient\nstring\nThe name of the recipient. This might be a person, a business name, or contain “care of” (c/o) instructions.\n\nphone\nstring\nThe phone number of the recipient. Note that this might be different from any phone number you collect with requestPayerPhone.\n\nsortingCode\nstring\nThe sorting code as used in, for example, France. Not present on Apple platforms.\n\ndependentLocality\nstring\nA logical subdivision of a city. Can be used for things like neighborhoods, boroughs, districts, or UK dependent localities. Not present on Apple platforms.\n\nWas this section helpful?YesNo","metadata":{"source":"StripeAPI.md"}}],["378",{"pageContent":"Was this section helpful?YesNo\n\n{\n  recipient: 'Jenny Rosen',\n  addressLine: ['185 Berry St.'],\n  city: 'San Francisco',\n  region: 'CA',\n  postalCode: '94941',\n  country: 'US',\n}\nThe Style object\nElements are styled using a Style object, which consists of CSS properties nested under objects for any of the following variants:\n\nbase, base variant—all other variants inherit from these styles\ncomplete, applied when the Element has valid input\nempty, applied when the Element has no customer input\ninvalid, applied when the Element has invalid input\nThe following pseudo-classes and pseudo-elements can also be styled using a nested object inside of a variant:\n\n:hover\n:focus\n::placeholder\n::selection\n:-webkit-autofill\n:disabled, available for all Elements except the paymentRequestButton Element.\n::-ms-clear, available for the cardNumber, cardExpiry, and cardCvc Elements. Inside the ::-ms-clear selector, the display property can be customized.\nThe following CSS properties are supported:","metadata":{"source":"StripeAPI.md"}}],["379",{"pageContent":"Object Properties\nbackgroundColor\nstring\nThe background-color CSS property.\n\nThis property works best with the ::selection pseudo-class. In other cases, consider setting the background color on the Element's container instead.\n\ncolor\nstring\nThe color CSS property.\n\nfontFamily\nstring\nThe font-family CSS property.\n\nfontSize\nstring\nThe font-size CSS property.\n\nfontSmoothing\nstring\nThe font-smoothing CSS property.\n\nfontStyle\nstring\nThe font-style CSS property.\n\nfontVariant\nstring\nThe font-variant CSS property.\n\nfontWeight\nstring\nThe font-weight CSS property.\n\niconColor\nstring\nA custom property, used to set the color of the icons that are rendered in an Element.\n\nlineHeight\nstring\nThe line-height CSS property.\n\nTo avoid cursors being rendered inconsistently across browsers, consider using a padding on the Element's container instead.\n\nletterSpacing\nstring\nThe letter-spacing CSS property.\n\ntextAlign\nstring\nThe text-align CSS property.\n\nAvailable for the cardNumber, cardExpiry, cardCvc and iban Elements.","metadata":{"source":"StripeAPI.md"}}],["380",{"pageContent":"letterSpacing\nstring\nThe letter-spacing CSS property.\n\ntextAlign\nstring\nThe text-align CSS property.\n\nAvailable for the cardNumber, cardExpiry, cardCvc and iban Elements.\n\npadding\nstring\nThe padding CSS property.\n\nAvailable for the idealBank Element. Accepts integer length with px unit as values.\n\ntextDecoration\nstring\nThe text-decoration CSS property.\n\ntextShadow\nstring\nThe text-shadow CSS property.\n\ntextTransform\nstring\nThe text-transform CSS property.\n\nWas this section helpful?YesNo\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["381",{"pageContent":"textDecoration\nstring\nThe text-decoration CSS property.\n\ntextShadow\nstring\nThe text-shadow CSS property.\n\ntextTransform\nstring\nThe text-transform CSS property.\n\nWas this section helpful?YesNo\n\n\nJavaScript\n\nvar element = elements.create('card', {\n  style: {\n    base: {\n      iconColor: '#c4f0ff',\n      color: '#fff',\n      fontWeight: '500',\n      fontFamily: 'Roboto, Open Sans, Segoe UI, sans-serif',\n      fontSize: '16px',\n      fontSmoothing: 'antialiased',\n      ':-webkit-autofill': {\n        color: '#fce883',\n      },\n      '::placeholder': {\n        color: '#87BBFD',\n      },\n    },\n    invalid: {\n      iconColor: '#FFC7EE',\n      color: '#FFC7EE',\n    },\n  },\n});\nThe UpdateDetails object\nThis object is passed to the updateWith callback on a PaymentRequest's shippingaddresschange and shippingoptionchange events.","metadata":{"source":"StripeAPI.md"}}],["382",{"pageContent":"Object Properties\nstatus\nstring\nThe browser uses this value to show an error message to the customer if they‘ve taken an action that invalidates the payment request. The value must be one of the following:\n\nHide allowed values\n'success'\nvalue\nLet the customer proceed.\n\n'fail'\nvalue\nPrevent the customer from making the change they just made.\n\n'invalid_shipping_address'\nvalue\nEquivalent to fail, except we show a more specific error message. Can only be used in a shippingaddresschange handler.\n\ntotal\nPaymentItem\nThe new total amount, if applicable, as a PaymentItem object.\n\ndisplayItems\narray\nAn array of PaymentItem objects. These PaymentItems are shown as line items in the browser‘s payment interface. Note that the sum of the line item amounts does not need to add up to the total amount above.\n\nshippingOptions\narray\nAn array of ShippingOption objects. The first shipping option listed appears in the browser payment interface as the default option.\n\nWas this section helpful?YesNo","metadata":{"source":"StripeAPI.md"}}],["383",{"pageContent":"shippingOptions\narray\nAn array of ShippingOption objects. The first shipping option listed appears in the browser payment interface as the default option.\n\nWas this section helpful?YesNo\n\n{\n  status: 'success',\n  total: {\n    amount: 15000,\n    label: 'A soft cotton shirt',\n  },\n}\nSupported browsers\nStripe.js strives to support all recent versions of major browsers. For the sake of security and providing the best experience to the majority of customers, we do not support browsers that are no longer receiving security updates and represent a small minority of traffic.","metadata":{"source":"StripeAPI.md"}}],["384",{"pageContent":"We support the following evergreen browsers: Chrome, Chrome Mobile, Firefox, and Microsoft Edge.\nWe support Safari on desktop and iOS (last 3 major versions).\nWe support the latest major version of Android and iOS WebViews.\nWe require TLS 1.2 to be supported by the browser.\nWe respond to bug reports but do not proactively test other mobile browsers.\nStripe.js depends on certain native browser functionality to remain intact and unaltered, such as the Promises API. Polyfilling certain browser features may prevent Stripe.js from working normally. If Stripe.js isn't functioning as expected, try removing polyfills to determine if they might be causing the issue.\n\nIf you have an issue with Stripe.js on a specific browser, please contact us so we can improve its support.\n\nWas this section helpful?YesNo\n\nSupported locales\nThe following subset of IETF language tags can be used to configure localization in Stripe.js.","metadata":{"source":"StripeAPI.md"}}],["385",{"pageContent":"Was this section helpful?YesNo\n\nSupported locales\nThe following subset of IETF language tags can be used to configure localization in Stripe.js.\n\nNote that Checkout supports a slightly different set of locales than Stripe.js. If you are using Checkout with stripe.redirectToCheckout, make sure to use a locale that Checkout supports.","metadata":{"source":"StripeAPI.md"}}],["386",{"pageContent":"VALUE\tLOCALE\tELEMENTS\tCHECKOUT\nauto\tStripe detects the locale of the browser\t✔\t✔\nar\tArabic\t✔\t\nbg\tBulgarian (Bulgaria)\t✔\t✔\ncs\tCzech (Czech Republic)\t✔\t✔\nda\tDanish (Denmark)\t✔\t✔\nde\tGerman (Germany)\t✔\t✔\nel\tGreek (Greece)\t✔\t✔\nen\tEnglish\t✔\t✔\nen-GB\tEnglish (United Kingdom)\t✔\t✔\nes\tSpanish (Spain)\t✔\t✔\nes-419\tSpanish (Latin America)\t✔\t✔\net\tEstonian (Estonia)\t✔\t✔\nfi\tFinnish (Finland)\t✔\t✔\nfil\tFilipino (Philipines)\t✔\t✔\nfr\tFrench (France)\t✔\t✔\nfr-CA\tFrench (Canada)\t✔\t✔\nhe\tHebrew (Israel)\t✔\t\nhr\tCroatian (Croatia)\t✔\t✔\nhu\tHungarian (Hungary)\t✔\t✔\nid\tIndonesian (Indonesia)\t✔\t✔\nit\tItalian (Italy)\t✔\t✔\nja\tJapanese (Japan)\t✔\t✔\nko\tKorean (Korea)\t✔\t✔\nlt\tLithuanian (Lithuania)\t✔\t✔\nlv\tLatvian (Latvia)\t✔\t✔\nms\tMalay (Malaysia)\t✔\t✔\nmt\tMaltese (Malta)\t✔\t✔\nnb\tNorwegian Bokmål\t✔\t✔\nnl\tDutch (Netherlands)\t✔\t✔\npl\tPolish (Poland)\t✔\t✔\npt-BR\tPortuguese (Brazil)\t✔\t✔\npt\tPortuguese (Brazil)\t✔\t✔\nro\tRomanian (Romania)\t✔\t✔\nru\tRussian (Russia)\t✔\t✔\nsk\tSlovak (Slovakia)\t✔\t✔\nsl\tSlovenian (Slovenia)\t✔\t✔\nsv\tSwedish (Sweden)\t✔\t✔\nth\tThai (Thailand)\t✔\t✔","metadata":{"source":"StripeAPI.md"}}],["387",{"pageContent":"pt-BR\tPortuguese (Brazil)\t✔\t✔\npt\tPortuguese (Brazil)\t✔\t✔\nro\tRomanian (Romania)\t✔\t✔\nru\tRussian (Russia)\t✔\t✔\nsk\tSlovak (Slovakia)\t✔\t✔\nsl\tSlovenian (Slovenia)\t✔\t✔\nsv\tSwedish (Sweden)\t✔\t✔\nth\tThai (Thailand)\t✔\t✔\ntr\tTurkish (Turkey)\t✔\t✔\nvi\tVietnamese (Vietnam)\t✔\t✔\nzh\tChinese Simplified (China)\t✔\t✔\nzh-HK\tChinese Traditional (Hong Kong)\t✔\t✔\nzh-TW\tChinese Traditional (Taiwan)\t✔\t✔\nWas this section helpful?YesNo","metadata":{"source":"StripeAPI.md"}}],["388",{"pageContent":"JavaScript\n\nvar stripe = Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx', {\n  locale: 'fr'\n});\nCookies\nStripe uses cookies to ensure that the site works properly, detect and prevent fraud, and understand how people interact with Stripe. There are some cookies that are essential for Stripe to function properly. These Necessary Cookies provide secure access to the site and enable page navigation. Other categories of cookies include Advertising Cookies, Analytics Cookies, and Preference Cookies.\n\nYou can find more information in the Stripe Cookies Policy, including how to opt-out or manage your cookie preferences.\n\nWas this section helpful?YesNo\n\nViewport meta tag requirements\nIn order to provide a great user experience for 3D Secure on all devices, you should set your page's viewport width to device-width with the viewport meta tag.\n\nThere are several other viewport settings, and you can configure those based on your needs. Just make sure you include width=device-width somewhere in your configuration.","metadata":{"source":"StripeAPI.md"}}],["389",{"pageContent":"There are several other viewport settings, and you can configure those based on your needs. Just make sure you include width=device-width somewhere in your configuration.\n\nWas this section helpful?YesNo\n\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\nstripe.redirectToCheckout(options?)DEPRECATED\nUse stripe.redirectToCheckout to redirect your customers to Checkout, a Stripe-hosted page to securely collect payment information. When the customer completes their purchase, they are redirected back to your website.\n\nMethod parameters\noptions\noptional\nobject\nHide options properties\nsessionId\nstring\nThe ID of the Checkout Session that is used in Checkout's client and server integration.\n\nlineItems\narray\nAn array of objects representing the items that your customer would like to purchase. These items are shown as line items in the Checkout interface and make up the total amount to be collected by Checkout. Used with the client-only integration.","metadata":{"source":"StripeAPI.md"}}],["390",{"pageContent":"Show lineItems properties\nmode\nstring\nThe mode of the Checkout Session, one of payment or subscription. Required if using lineItems with the client-only integration.\n\nsuccessUrl\nstring\nThe URL to which Stripe should send customers when payment is complete. If you’d like access to the Checkout Session for the successful payment, read more about it in the guide on fulfilling orders. Required if using the client-only integration.\n\ncancelUrl\nstring\nThe URL to which Stripe should send customers when payment is canceled. Required if using the client-only integration.\n\nclientReferenceId\nstring\nA unique string to reference the Checkout session. This can be a customer ID, a cart ID, or similar. It is included in the checkout.session.completed webhook and can be used to fulfill the purchase.\n\ncustomerEmail\nstring\nThe email address used to create the customer object. If you already know your customer's email address, use this attribute to prefill it on Checkout.","metadata":{"source":"StripeAPI.md"}}],["391",{"pageContent":"customerEmail\nstring\nThe email address used to create the customer object. If you already know your customer's email address, use this attribute to prefill it on Checkout.\n\nbillingAddressCollection\nstring\nSpecify whether Checkout should collect the customer’s billing address. If set to required, Checkout will attempt to collect the customer’s billing address. If not set or set to auto Checkout will only attempt to collect the billing address when necessary.\n\nshippingAddressCollection\nobject\nWhen set, provides configuration for Checkout to collect a shipping address from a customer.\n\nShow shippingAddressCollection properties\nlocale\nstring\nA locale that will be used to localize the display of Checkout. Default is auto (Stripe detects the locale of the browser).","metadata":{"source":"StripeAPI.md"}}],["392",{"pageContent":"Show shippingAddressCollection properties\nlocale\nstring\nA locale that will be used to localize the display of Checkout. Default is auto (Stripe detects the locale of the browser).\n\nsubmitType\nstring\nDescribes the type of transaction being performed by Checkout in order to customize relevant text on the page, such as the Submit button. submitType can only be specified when using using line items or SKUs, and not subscriptions. The default is auto. Supported values are: auto, book, donate, pay.\n\nitems\narray\nAn array of objects representing the items that your customer would like to purchase. These items are shown as line items in the Checkout interface and make up the total amount to be collected by Checkout. Using lineItems is preferred.\n\nShow items properties\nReturns\nThis method returns a Promise which resolves with a result object. If this method fails, the result object will contain a localized error message in the error.message field.","metadata":{"source":"StripeAPI.md"}}],["393",{"pageContent":"If you are currently on a beta of the new version of Checkout, read the Beta Migration Guide to upgrade to the latest version.\n\nWas this section helpful?YesNo\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["394",{"pageContent":"Was this section helpful?YesNo\n\n\nJavaScript\n\n// Call your backend to create the Checkout Session\nfetch('/create-checkout-session', {\n  method: 'POST',\n})\n.then(function(response) {\n  return response.json();\n})\n.then(function(session) {\n  return stripe.redirectToCheckout({ sessionId: session.id });\n})\n.then(function(result) {\n  // If `redirectToCheckout` fails due to a browser or network\n  // error, you should display the localized error message to your\n  // customer using `error.message`.\n  if (result.error) {\n    alert(result.error.message);\n  }\n});\nstripe.handleCardPayment(clientSecret,element,data?)DEPRECATED\nhandleCardPayment has been renamed to confirmCardPayment. In addition to the rename, we have slightly modified the arguments. These changes do not affect the behavior of the method. While we have no plans to ever remove support for handleCardPayment, we think the new name and arguments are easier to understand and better convey what the method is doing.","metadata":{"source":"StripeAPI.md"}}],["395",{"pageContent":"Use stripe.handleCardPayment(clientSecret, element, data?) when the customer submits your payment form. It will gather payment information from the element, which can be a card or cardNumber element, along with any other data you provide. It will then confirm the PaymentIntent and carry out 3DS or other next_actions if they are required.\n\nIf you are using Dynamic 3D Secure, handleCardPayment will trigger your Radar rules to execute and may open a dialog for your customer to authenticate their payment.\n\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent.\n\nelement\nREQUIRED\nElement\nA card or cardNumber Element that will be used to create a payment method.\n\ndata\noptional\nobject\nData to be sent with the request.\n\nHide data properties\npayment_method_data\nobject\nUse this parameter to supply additional data relevant to the payment method, such as billing details.","metadata":{"source":"StripeAPI.md"}}],["396",{"pageContent":"Hide data properties\npayment_method_data\nobject\nUse this parameter to supply additional data relevant to the payment method, such as billing details.\n\nHide payment_method_data properties\nbilling_details\nRECOMMENDED\nobject\nThe billing details associated with the card.\n\nshipping\nRECOMMENDED\nobject\nThe shipping details for the payment, if collected.\n\nreceipt_email\nstring\nEmail address that the receipt for the resulting payment will be sent to.\n\nsetup_future_usage\nstring\nIndicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf present, the PaymentMethod used with this PaymentIntent can be attached to a Customer, even after the transaction completes.\n\nUse on_session if you intend to only reuse the PaymentMethod when your customer is present in your checkout flow. Use off_session if your customer may or may not be in your checkout flow. See saving card details during payment to learn more.","metadata":{"source":"StripeAPI.md"}}],["397",{"pageContent":"Stripe uses setup_future_usage to dynamically optimize your payment flow and comply with regional legislation and network rules. For example, if your customer is impacted by SCA, using off_session will ensure that they are authenticated while processing this PaymentIntent. You will then be able to collect off-session payments for this customer.\n\nReturns\nA Promise which resolves with a result object.\n\nThe object will have either:\n\nresult.paymentIntent: the successful PaymentIntent.\nresult.error: An error. Refer to the API reference for all possible errors.\nNote that stripe.handleCardPayment may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.","metadata":{"source":"StripeAPI.md"}}],["398",{"pageContent":"Additionally, stripe.handleCardPayment may trigger a 3D Secure authentication challenge. This will be shown in a modal dialog and may be confusing for customers using assistive technologies like screen readers. You should make your form accessible by ensuring that success or error messages are clearly read out after this method completes.\n\nWas this section helpful?YesNo\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["399",{"pageContent":"Was this section helpful?YesNo\n\n\nJavaScript\n\nstripe\n  .handleCardPayment('{PAYMENT_INTENT_CLIENT_SECRET}', element, {\n    payment_method_data: {\n      billing_details: {\n        name: 'Jenny Rosen',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\nstripe.handleCardPayment(clientSecret,data?)DEPRECATED\nhandleCardPayment has been renamed to confirmCardPayment. In addition to the rename, we have slightly modified the arguments. These changes do not affect the behavior of the method. While we have no plans to ever remove support for handleCardPayment, we think the new name and arguments are easier to understand and better convey what the method is doing.\n\nUse stripe.handleCardPayment(clientSecret, data?) to advance the PaymentIntent towards completion when you are not gathering payment method information from an Element.","metadata":{"source":"StripeAPI.md"}}],["400",{"pageContent":"Use stripe.handleCardPayment(clientSecret, data?) to advance the PaymentIntent towards completion when you are not gathering payment method information from an Element.\n\nCall this variation when you have already attached a card to this PaymentIntent or if you want to attach an existing card to it.\n\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent.\n\ndata\noptional\nobject\nData to be sent with the request.\n\nHide data properties\npayment_method\nstring\nUse payment_method to specify an existing PaymentMethod to use for this payment.\n\nOnly one of payment_method_data and payment_method is required.\n\npayment_method_data\nobject\nUse this parameter to supply additional data relevant to the payment method, such as billing details.\n\nHide payment_method_data properties\nbilling_details\nRECOMMENDED\nobject\nThe billing details associated with the card.\n\ncard[token]\nstring\nConverts the provided token into a PaymentMethod to use for the payment.","metadata":{"source":"StripeAPI.md"}}],["401",{"pageContent":"card[token]\nstring\nConverts the provided token into a PaymentMethod to use for the payment.\n\nshipping\nRECOMMENDED\nobject\nThe shipping details for the payment, if collected.\n\nreceipt_email\nstring\nEmail address that the receipt for the resulting payment will be sent to.\n\nsetup_future_usage\nstring\nIndicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf present, the PaymentMethod used with this PaymentIntent can be attached to a Customer, even after the transaction completes.\n\nUse on_session if you intend to only reuse the PaymentMethod when your customer is present in your checkout flow. Use off_session if your customer may or may not be in your checkout flow. See saving card details after a payment to learn more.","metadata":{"source":"StripeAPI.md"}}],["402",{"pageContent":"Stripe uses setup_future_usage to dynamically optimize your payment flow and comply with regional legislation and network rules. For example, if your customer is impacted by SCA, using off_session will ensure that they are authenticated while processing this PaymentIntent. You will then be able to collect off-session payments for this customer.\n\nReturns\nA Promise which resolves with a result object.\n\nThe object will have either:\n\nresult.paymentIntent: the successful PaymentIntent.\nresult.error: An error. Refer to the API reference for all possible errors.\nNote that stripe.handleCardPayment may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.","metadata":{"source":"StripeAPI.md"}}],["403",{"pageContent":"Additionally, stripe.handleCardPayment may trigger a 3D Secure authentication challenge. This will be shown in a modal dialog and may be confusing for customers using assistive technologies like screen readers. You should make your form accessible by ensuring that success or error messages are clearly read out after this method completes.\n\nWas this section helpful?YesNo\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["404",{"pageContent":"Was this section helpful?YesNo\n\n\nJavaScript\n\nstripe\n  .handleCardPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  })\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\nstripe.confirmPaymentIntent(clientSecret,element,data?)DEPRECATED\nconfirmPaymentIntent has been deprecated. Going forward, if you wish to confirm on the client without handling next actions, simply pass {handleActions: false} as a third argument to confirmCardPayment. While we have no plans to ever remove support for confirmPaymentIntent, we think that explicitly opting out of next action handling is easier to understand and will better convey what the method is doing.\n\nUse stripe.confirmPaymentIntent(clientSecret, element, data) when the customer submits your payment form. It will gather payment information from element, along with any other data you provide, and confirm the PaymentIntent.","metadata":{"source":"StripeAPI.md"}}],["405",{"pageContent":"Only use this method if you want to handle next actions yourself. Otherwise, use stripe.handleCardPayment.\n\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent to confirm.\n\nelement\nREQUIRED\nElement\nAn Element that will be used to create a payment method.\n\ndata\noptional\nobject\nData to be sent with the request. It can contain the following parameters\n\nHide data properties\nreturn_url\nstring\nIf you are handling next actions yourself, pass in a return_url. If the subsequent action is redirect_to_url, this URL will be used on the return path for the redirect.\n\npayment_method_data\nobject\nUse this parameter to supply additional data relevant to the payment method, such as billing details.\n\nHide payment_method_data properties\nbilling_details\nRECOMMENDED\nobject\nThe billing details associated with the card.\n\nshipping\nRECOMMENDED\nobject\nThe shipping details for the payment, if collected.","metadata":{"source":"StripeAPI.md"}}],["406",{"pageContent":"Hide payment_method_data properties\nbilling_details\nRECOMMENDED\nobject\nThe billing details associated with the card.\n\nshipping\nRECOMMENDED\nobject\nThe shipping details for the payment, if collected.\n\nreceipt_email\nstring\nEmail address that the receipt for the resulting payment will be sent to.\n\nsetup_future_usage\nstring\nIndicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf present, the PaymentMethod used with this PaymentIntent can be attached to a Customer, even after the transaction completes.\n\nUse on_session if you intend to only reuse the PaymentMethod when your customer is present in your checkout flow. Use off_session if your customer may or may not be in your checkout flow. See saving card details after a payment to learn more.","metadata":{"source":"StripeAPI.md"}}],["407",{"pageContent":"Stripe uses setup_future_usage to dynamically optimize your payment flow and comply with regional legislation and network rules. For example, if your customer is impacted by SCA, using off_session will ensure that they are authenticated while processing this PaymentIntent. You will then be able to collect off-session payments for this customer.\n\nReturns\nA Promise which resolves with a result object.\n\nThe object will have either:\n\nresult.paymentIntent: the successful PaymentIntent.\nresult.error: An error. Refer to the API reference for all possible errors.\nNote that stripe.confirmPaymentIntent may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\nWas this section helpful?YesNo\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["408",{"pageContent":"Was this section helpful?YesNo\n\n\nJavaScript\n\nstripe.confirmPaymentIntent(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  element,\n  {\n    payment_method_data: {\n      billing_details: {\n        name: 'Jenny Rosen'\n      }\n    },\n    return_url: 'https://example.com/return_url'\n  }\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\nstripe.confirmPaymentIntent(clientSecret,data?)DEPRECATED\nconfirmPaymentIntent has been deprecated. Going forward, if you wish to confirm on the client without handling next actions, simply pass {handleActions: false} as a third argument to confirmCardPayment. While we have no plans to ever remove support for confirmPaymentIntent, we think that explicitly opting out of next action handling is easier to understand and will better convey what the method is doing.","metadata":{"source":"StripeAPI.md"}}],["409",{"pageContent":"Use stripe.confirmPaymentIntent(clientSecret, data) to confirm the PaymentIntent when you are not gathering payment information from an Element. Call this variation when you have already attached a payment method to this PaymentIntent, or if you want to attach an existing card, token, or PaymentMethod to it.\n\nOnly use this method if you want to handle next actions yourself. Otherwise, use stripe.handleCardPayment.\n\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent to confirm.\n\ndata\noptional\nobject\nData to be sent with the request. It can contain the following parameters\n\nHide data properties\nreturn_url\nstring\nIf you are handling next actions yourself, pass in a return_url. If the subsequent action is redirect_to_url, this URL will be used on the return path for the redirect.\n\npayment_method\nstring\nUse payment_method to specify an existing PaymentMethod to use for this payment.\n\nOnly one of payment_method_data and payment_method is required.","metadata":{"source":"StripeAPI.md"}}],["410",{"pageContent":"payment_method\nstring\nUse payment_method to specify an existing PaymentMethod to use for this payment.\n\nOnly one of payment_method_data and payment_method is required.\n\npayment_method_data\nobject\nUse this parameter to supply additional data relevant to the payment method, such as billing details.\n\nHide payment_method_data properties\nbilling_details\nRECOMMENDED\nobject\nThe billing details associated with the card.\n\ncard[token]\nstring\nConverts the provided token into a PaymentMethod to use for the payment.\n\nshipping\nRECOMMENDED\nobject\nThe shipping details for the payment, if collected.\n\nreceipt_email\nstring\nEmail address that the receipt for the resulting payment will be sent to.\n\nsetup_future_usage\nstring\nIndicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf present, the PaymentMethod used with this PaymentIntent can be attached to a Customer, even after the transaction completes.","metadata":{"source":"StripeAPI.md"}}],["411",{"pageContent":"If present, the PaymentMethod used with this PaymentIntent can be attached to a Customer, even after the transaction completes.\n\nUse on_session if you intend to only reuse the PaymentMethod when your customer is present in your checkout flow. Use off_session if your customer may or may not be in your checkout flow. See saving card details after a payment to learn more.\n\nStripe uses setup_future_usage to dynamically optimize your payment flow and comply with regional legislation and network rules. For example, if your customer is impacted by SCA, using off_session will ensure that they are authenticated while processing this PaymentIntent. You will then be able to collect off-session payments for this customer.\n\nReturns\nA Promise which resolves with a result object.\n\nThe object will have either:","metadata":{"source":"StripeAPI.md"}}],["412",{"pageContent":"Returns\nA Promise which resolves with a result object.\n\nThe object will have either:\n\nresult.paymentIntent: the successful PaymentIntent.\nresult.error: An error. Refer to the API reference for all possible errors.\nNote that stripe.confirmPaymentIntent may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\nWas this section helpful?YesNo\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["413",{"pageContent":"Was this section helpful?YesNo\n\n\nJavaScript\n\nstripe\n  .confirmPaymentIntent('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    return_url: 'https://example.com/return_url',\n  })\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\nstripe.handleCardSetup(clientSecret,element,data?)DEPRECATED\nhandleCardSetup has been renamed to confirmCardSetup. In addition to the rename, we have slightly modified the arguments. These changes do not affect the behavior of the method. While we have no plans to ever remove support for handleCardSetup, we think the new name and arguments are easier to understand and better convey what the method is doing.","metadata":{"source":"StripeAPI.md"}}],["414",{"pageContent":"Use stripe.handleCardSetup(clientSecret, element, data?) in the Setup Intents API flow when the customer submits your payment form. It will gather payment information from the element, which can be a card or cardNumber element, along with any other data you provide. It will then confirm the SetupIntent and carry out 3DS or other next_actions if they are required.\n\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the SetupIntent.\n\nelement\nREQUIRED\nElement\nA card or cardNumber Element that will be used to create a payment method.\n\ndata\noptional\nobject\nData to be sent with the request.\n\nHide data properties\npayment_method_data\nobject\nUse this parameter to supply additional data relevant to the payment method, such as billing details.\n\nHide payment_method_data properties\nbilling_details\nRECOMMENDED\nobject\nThe billing details associated with the card.\n\nReturns\nA Promise which resolves with a result object.\n\nThe object will have either:","metadata":{"source":"StripeAPI.md"}}],["415",{"pageContent":"Hide payment_method_data properties\nbilling_details\nRECOMMENDED\nobject\nThe billing details associated with the card.\n\nReturns\nA Promise which resolves with a result object.\n\nThe object will have either:\n\nresult.setupIntent: the successful SetupIntent.\nresult.error: An error. Refer to the API reference for all possible errors.\nNote that stripe.handleCardSetup may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\nAdditionally, stripe.handleCardSetup may trigger a 3D Secure authentication challenge. This will be shown in a modal dialog and may be confusing for customers using assistive technologies like screen readers. You should make your form accessible by ensuring that success or error messages are clearly read out after this method completes.","metadata":{"source":"StripeAPI.md"}}],["416",{"pageContent":"Was this section helpful?YesNo\n\n\nJavaScript\n\nstripe.handleCardSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  element,\n  {\n    payment_method_data: {\n      billing_details: {\n        name: 'Jenny Rosen'\n      }\n    }\n  }\n).then(function(result) {\n  // Handle result.error or result.setupIntent\n});\nstripe.handleCardSetup(clientSecret,data?)DEPRECATED\nhandleCardSetup has been renamed to confirmCardSetup. In addition to the rename, we have slightly modified the arguments. These changes do not affect the behavior of the method. While we have no plans to ever remove support for handleCardSetup, we think the new name and arguments are easier to understand and better convey what the method is doing.\n\nUse stripe.handleCardSetup(clientSecret, data) to advance the SetupIntent towards completion when you are not gathering payment method information from an Element.\n\nCall this variation when you have already attached a card to this SetupIntent or if you want to attach an existing card to it.","metadata":{"source":"StripeAPI.md"}}],["417",{"pageContent":"Call this variation when you have already attached a card to this SetupIntent or if you want to attach an existing card to it.\n\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the SetupIntent.\n\ndata\noptional\nobject\nData to be sent with the request.\n\nHide data properties\npayment_method\nstring\nUse payment_method to specify an existing PaymentMethod to use for this payment.\n\nOnly one of payment_method_data and payment_method is required.\n\npayment_method_data\nobject\nUse this parameter to supply additional data relevant to the payment method, such as billing details.\n\nHide payment_method_data properties\nbilling_details\nRECOMMENDED\nobject\nThe billing details associated with the card.\n\ncard[token]\nstring\nConverts the provided token into a PaymentMethod to use for the payment.\n\nReturns\nA Promise which resolves with a result object.\n\nThe object will have either:","metadata":{"source":"StripeAPI.md"}}],["418",{"pageContent":"card[token]\nstring\nConverts the provided token into a PaymentMethod to use for the payment.\n\nReturns\nA Promise which resolves with a result object.\n\nThe object will have either:\n\nresult.setupIntent: the successful SetupIntent.\nresult.error: An error. Refer to the API reference for all possible errors.\nNote that stripe.handleCardSetup may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\nAdditionally, stripe.handleCardSetup may trigger a 3D Secure authentication challenge. This will be shown in a modal dialog and may be confusing for customers using assistive technologies like screen readers. You should make your form accessible by ensuring that success or error messages are clearly read out after this method completes.\n\nWas this section helpful?YesNo","metadata":{"source":"StripeAPI.md"}}],["419",{"pageContent":"Was this section helpful?YesNo\n\n\nJavaScript\n\nstripe\n  .handleCardSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\nstripe.confirmSetupIntent(clientSecret,element,data?)DEPRECATED\nconfirmSetupIntent has been deprecated. Going forward, if you wish to confirm on the client without handling next actions, simply pass {handleActions: false} as a third argument to confirmCardSetup. While we have no plans to ever remove support for confirmSetupIntent, we think that explicitly opting out of next action handling is easier to understand and will better convey what the method is doing.\n\nUse stripe.confirmSetupIntent(clientSecret, element, data) when the customer submits your save payment method form. It will gather payment information from element, along with any other data you provide, and confirm the SetupIntent.","metadata":{"source":"StripeAPI.md"}}],["420",{"pageContent":"Only use this method if you want to handle next actions yourself. Otherwise, use stripe.handleCardSetup.\n\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the SetupIntent to confirm.\n\nelement\nREQUIRED\nElement\nAn Element that will be used to create a payment method.\n\ndata\noptional\nobject\nData to be sent with the request. It can contain the following parameters\n\nHide data properties\npayment_method_data\nobject\nUse this parameter to supply additional data relevant to the payment method, such as billing details.\n\nHide payment_method_data properties\nbilling_details\nRECOMMENDED\nobject\nThe billing details associated with the card.\n\nReturns\nA Promise which resolves with a result object.\n\nThe object will have either:","metadata":{"source":"StripeAPI.md"}}],["421",{"pageContent":"Hide payment_method_data properties\nbilling_details\nRECOMMENDED\nobject\nThe billing details associated with the card.\n\nReturns\nA Promise which resolves with a result object.\n\nThe object will have either:\n\nresult.setupIntent: the successful SetupIntent.\nresult.error: An error. Refer to the API reference for all possible errors.\nNote that stripe.confirmSetupIntent may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\nWas this section helpful?YesNo\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["422",{"pageContent":"Was this section helpful?YesNo\n\n\nJavaScript\n\nstripe.confirmSetupIntent(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  element,\n  {\n    payment_method_data: {\n      billing_details: {\n        name: 'Jenny Rosen'\n      }\n    },\n    return_url: 'https://example.com/return_url'\n  }\n).then(function(result) {\n  // Handle result.error or result.setupIntent\n});\nstripe.confirmSetupIntent(clientSecret,data?)DEPRECATED\nconfirmSetupIntent has been deprecated. Going forward, if you wish to confirm on the client without handling next actions, simply pass {handleActions: false} as a third argument to confirmCardSetup. While we have no plans to ever remove support for confirmSetupIntent, we think that explicitly opting out of next action handling is easier to understand and will better convey what the method is doing.","metadata":{"source":"StripeAPI.md"}}],["423",{"pageContent":"Use stripe.confirmSetupIntent(clientSecret, data) to confirm the SetupIntent when you are not gathering payment information from an Element. Call this variation when you have already attached a payment method to this SetupIntent, or if you want to attach an existing card, token, or PaymentMethod to it.\n\nOnly use this method if you want to handle next actions yourself. Otherwise, use stripe.handleCardSetup.\n\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the SetupIntent to confirm.\n\ndata\noptional\nobject\nData to be sent with the request. It can contain the following parameters\n\nHide data properties\nreturn_url\nstring\nIf you are handling next actions yourself, pass in a return_url. If the subsequent action is redirect_to_url, this URL will be used on the return path for the redirect.\n\npayment_method\nstring\nUse payment_method to specify an existing PaymentMethod to use for this payment.\n\nOnly one of payment_method_data and payment_method is required.","metadata":{"source":"StripeAPI.md"}}],["424",{"pageContent":"payment_method\nstring\nUse payment_method to specify an existing PaymentMethod to use for this payment.\n\nOnly one of payment_method_data and payment_method is required.\n\npayment_method_data\nobject\nUse this parameter to supply additional data relevant to the payment method, such as billing details.\n\nHide payment_method_data properties\nbilling_details\nRECOMMENDED\nobject\nThe billing details associated with the card.\n\ncard[token]\nstring\nConverts the provided token into a PaymentMethod to use for the payment.\n\nReturns\nA Promise which resolves with a result object.\n\nThe object will have either:","metadata":{"source":"StripeAPI.md"}}],["425",{"pageContent":"card[token]\nstring\nConverts the provided token into a PaymentMethod to use for the payment.\n\nReturns\nA Promise which resolves with a result object.\n\nThe object will have either:\n\nresult.setupIntent: the successful SetupIntent.\nresult.error: An error. Refer to the API reference for all possible errors.\nNote that stripe.confirmSetupIntent may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\nWas this section helpful?YesNo\n\n\nJavaScript","metadata":{"source":"StripeAPI.md"}}],["426",{"pageContent":"Was this section helpful?YesNo\n\n\nJavaScript\n\nstripe\n  .confirmSetupIntent('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    return_url: 'https://example.com/return_url',\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\nstripe.handleFpxPayment(clientSecret,element,data?)DEPRECATED\nhandleFpxPayment has been renamed to confirmFpxPayment. In addition to the rename, we have slightly modified the arguments. These changes do not affect the behavior of the method. While we will continue to support handleFpxPayment for the duration of the beta, we think the new name and arguments are easier to understand and better convey what the method is doing.","metadata":{"source":"StripeAPI.md"}}],["427",{"pageContent":"Use stripe.handleFpxPayment in the FPX payment method creation flow when the customer selects a bank from the dropdown. It will gather the bank code from the element, along with any other PaymentIntent data you provide. It will then create an FPX payment method and confirm the PaymentIntent.\n\nMethod parameters\nclientSecret\nREQUIRED\nstring\nThe client secret of the PaymentIntent.\n\nelement\nREQUIRED\nElement\nAn fpxBank Element that will be used to create a payment method.\n\ndata\noptional\nobject\nA data object to be sent with the request.\n\nHide data properties\nreturn_url\nstring\nThe url your customer will be directed to after they complete authentication. Be sure to review the payment confirmation page requirements.\n\nReturns\nThis method returns a Promise which resolves with a result object. This object has either:","metadata":{"source":"StripeAPI.md"}}],["428",{"pageContent":"Returns\nThis method returns a Promise which resolves with a result object. This object has either:\n\nresult.paymentIntent: a PaymentIntent with the requires_confirmation status to confirm server-side.\nresult.error: an error. Refer to the API reference for all possible errors and the FPX guide for FPX specific errors.\nNote that stripe.handleFpxPayment may take several seconds to complete. During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\nWas this section helpful?YesNo\n\n\nJavaScript\n\nstripe.handleFpxPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  element,\n  {\n    return_url: 'https://example.com/return_url',\n  }\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});","metadata":{"source":"StripeAPI.md"}}]]